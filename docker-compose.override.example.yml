version: '3.8'

# Production Override Example for Social Cube
# Rename to docker-compose.override.yml and adjust for your production environment

services:
  # Web application service overrides
  web:
    # Set hostname and domain for SSL certificate
    environment:
      - VIRTUAL_HOST=yourdomain.com
      - LETSENCRYPT_HOST=yourdomain.com
      - LETSENCRYPT_EMAIL=your_email@example.com
    # Resource limits to prevent container from using too much CPU/memory
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
      restart_policy:
        condition: on-failure
        max_attempts: 3
        
  # Database service overrides
  db:
    # Mount backup directory for scheduled backups
    volumes:
      - ./backups:/backups
    # Database resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
    # Health check configuration
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-social_cube}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
        
  # Nginx service overrides
  nginx:
    # Mount SSL certificate volumes
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    # Expose ports
    ports:
      - "80:80"
      - "443:443"
    # Use the SSL configuration if available, otherwise use default.conf
    command: >
      /bin/sh -c "if [ -f /etc/letsencrypt/live/yourdomain.com/fullchain.pem ]; then
                    cp /etc/nginx/conf.d/ssl.conf /etc/nginx/conf.d/default.conf;
                    sed -i 's/example.com/yourdomain.com/g' /etc/nginx/conf.d/default.conf;
                  fi &&
                  nginx -g 'daemon off;'"
        
  # Certbot service for SSL certificate management
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    # Automatically renew certificates every 12 hours
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx
        
  # Redis service overrides
  redis:
    # Redis resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    # Health check configuration
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
      
  # ASGI service for WebSockets
  asgi:
    # Resource limits for ASGI service
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        max_attempts: 3
        
# Optional backup service for automated backups
  backup:
    image: alpine:latest
    volumes:
      - ./scripts:/scripts
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
      - media_volume:/app/media:ro
    depends_on:
      - db
    environment:
      - DB_USER=${DB_USER:-postgres}
      - DB_NAME=${DB_NAME:-social_cube}
      - BACKUP_RETENTION_DAYS=7
    entrypoint: >
      /bin/sh -c "apk add --no-cache postgresql-client &&
                  chmod +x /scripts/backup.sh &&
                  while :; do /scripts/backup.sh; sleep 24h; done"
    restart: unless-stopped
      
volumes:
  redis_data:
  postgres_data:
  static_volume:
  media_volume:
  logs_volume: