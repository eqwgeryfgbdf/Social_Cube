From ba394f979893e47ac6ceef91b11be44dacc09ab3 Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 26 Apr 2025 21:52:22 +0800
Subject: [PATCH 01/10] feat: Initialize Django project structure and
 development environment

---
 .env.example                                  |  42 +-
 .gitignore                                    | 104 ++-
 Dockerfile                                    |  45 +
 README.md                                     | 359 ++++++--
 api/__init__.py                               |   0
 api/admin.py                                  |   3 +
 api/apps.py                                   |   7 +
 api/migrations/0001_initial.py                |  83 ++
 api/migrations/__init__.py                    |   0
 api/models.py                                 |  28 +
 api/tests.py                                  |   3 +
 api/urls.py                                   |   9 +
 api/views.py                                  |  10 +
 bot_management/__init__.py                    |   0
 bot_management/admin.py                       |   3 +
 bot_management/apps.py                        |   7 +
 bot_management/migrations/0001_initial.py     |  73 ++
 bot_management/migrations/__init__.py         |   0
 bot_management/models.py                      |  42 +
 .../templates/bot_management/index.html       |  14 +
 bot_management/tests.py                       |   3 +
 bot_management/urls.py                        |   9 +
 bot_management/views.py                       |   8 +
 config/__init__.py                            |   3 +
 config/asgi.py                                |  17 +
 config/settings_base.py                       | 162 ++++
 config/settings_dev.py                        |  76 ++
 config/settings_prod.py                       |  94 ++
 config/settings_test.py                       |  62 ++
 config/urls.py                                |  26 +
 config/wsgi.py                                |  20 +
 conftest.py                                   |  31 +
 dashboard/__init__.py                         |   1 +
 dashboard/admin.py                            |  40 +
 dashboard/apps.py                             |   5 +
 dashboard/auth_urls.py                        |   8 +
 dashboard/base.html                           | 181 ++++
 dashboard/middleware.py                       |   1 +
 dashboard/migrations/0001_initial.py          | 123 +++
 .../0002_tasktag_task_tasktagassignment.py    | 118 +++
 dashboard/migrations/__init__.py              |   0
 dashboard/models.py                           |  57 ++
 dashboard/registration/login.html             |  27 +
 dashboard/static/img/default-avatar.png       |   1 +
 dashboard/taskmaster/__init__.py              |   0
 dashboard/taskmaster/forms.py                 |  36 +
 dashboard/taskmaster/models.py                |  64 ++
 dashboard/taskmaster/urls.py                  |  21 +
 dashboard/taskmaster/views.py                 | 212 +++++
 dashboard/templates/base.html                 | 189 ++++
 dashboard/templates/dashboard/base.html       | 179 ++++
 dashboard/templates/dashboard/bot_add.html    | 298 +++++++
 dashboard/templates/dashboard/bot_detail.html | 131 +++
 dashboard/templates/dashboard/bots.html       | 114 +++
 dashboard/templates/dashboard/commands.html   | 539 ++++++++++++
 dashboard/templates/dashboard/error.html      |  37 +
 dashboard/templates/dashboard/index.html      |  27 +
 dashboard/templates/dashboard/new_base.html   | 278 ++++++
 .../templates/dashboard/new_bot_add.html      | 121 +++
 dashboard/templates/dashboard/new_bots.html   | 274 ++++++
 dashboard/templates/dashboard/new_index.html  | 351 ++++++++
 .../templates/dashboard/new_servers.html      | 294 +++++++
 dashboard/templates/dashboard/stats.html      | 109 +++
 .../dashboard/taskmaster/dashboard.html       | 202 +++++
 .../taskmaster/tag_confirm_delete.html        |  38 +
 .../dashboard/taskmaster/tag_form.html        |  39 +
 .../dashboard/taskmaster/tag_list.html        |  65 ++
 .../taskmaster/task_confirm_delete.html       |  35 +
 .../dashboard/taskmaster/task_detail.html     |  91 ++
 .../dashboard/taskmaster/task_form.html       |  70 ++
 .../dashboard/taskmaster/task_list.html       | 185 ++++
 dashboard/templatetags/dashboard_extras.py    |  16 +
 dashboard/tests.py                            | 107 +++
 dashboard/urls.py                             |  39 +
 dashboard/views.py                            | 284 ++++++
 docker-compose.yml                            |  57 ++
 environment.yml                               |   8 +
 pytest.ini                                    |   4 +
 requirements.txt                              |  24 +-
 run_dev.bat                                   |   2 +
 run_dev.sh                                    |   2 +
 scripts/PRD.txt                               | 101 +++
 scripts/example_prd.txt                       |  47 +
 scripts/run_dev.py                            |  42 +
 scripts/setup_env.py                          |  59 ++
 scripts/task-complexity-report.json           |  91 ++
 setup.py                                      |  50 ++
 social_cube/__init__.py                       |   1 +
 social_cube/asgi.py                           |   8 +
 social_cube/settings.py                       | 147 ++++
 social_cube/urls.py                           |  33 +
 social_cube/wsgi.py                           |  11 +
 static/css/m3.css                             | 432 ++++++++++
 static/css/main.css                           | 815 ++++++++++++++++++
 static/css/settings.css                       | 388 +++++++++
 static/css/theme.css                          | 597 +++++++++++++
 static/img/default-avatar.svg                 |   6 +
 static/img/default_bot.png                    |  18 +
 static/img/empty_bot.svg                      |  16 +
 static/img/logo.png                           |   1 +
 static/js/bot_management.js                   | 151 ++++
 static/js/common.js                           | 347 ++++++++
 102 files changed, 9726 insertions(+), 82 deletions(-)
 create mode 100644 Dockerfile
 create mode 100644 api/__init__.py
 create mode 100644 api/admin.py
 create mode 100644 api/apps.py
 create mode 100644 api/migrations/0001_initial.py
 create mode 100644 api/migrations/__init__.py
 create mode 100644 api/models.py
 create mode 100644 api/tests.py
 create mode 100644 api/urls.py
 create mode 100644 api/views.py
 create mode 100644 bot_management/__init__.py
 create mode 100644 bot_management/admin.py
 create mode 100644 bot_management/apps.py
 create mode 100644 bot_management/migrations/0001_initial.py
 create mode 100644 bot_management/migrations/__init__.py
 create mode 100644 bot_management/models.py
 create mode 100644 bot_management/templates/bot_management/index.html
 create mode 100644 bot_management/tests.py
 create mode 100644 bot_management/urls.py
 create mode 100644 bot_management/views.py
 create mode 100644 config/__init__.py
 create mode 100644 config/asgi.py
 create mode 100644 config/settings_base.py
 create mode 100644 config/settings_dev.py
 create mode 100644 config/settings_prod.py
 create mode 100644 config/settings_test.py
 create mode 100644 config/urls.py
 create mode 100644 config/wsgi.py
 create mode 100644 conftest.py
 create mode 100644 dashboard/__init__.py
 create mode 100644 dashboard/admin.py
 create mode 100644 dashboard/apps.py
 create mode 100644 dashboard/auth_urls.py
 create mode 100644 dashboard/base.html
 create mode 100644 dashboard/middleware.py
 create mode 100644 dashboard/migrations/0001_initial.py
 create mode 100644 dashboard/migrations/0002_tasktag_task_tasktagassignment.py
 create mode 100644 dashboard/migrations/__init__.py
 create mode 100644 dashboard/models.py
 create mode 100644 dashboard/registration/login.html
 create mode 100644 dashboard/static/img/default-avatar.png
 create mode 100644 dashboard/taskmaster/__init__.py
 create mode 100644 dashboard/taskmaster/forms.py
 create mode 100644 dashboard/taskmaster/models.py
 create mode 100644 dashboard/taskmaster/urls.py
 create mode 100644 dashboard/taskmaster/views.py
 create mode 100644 dashboard/templates/base.html
 create mode 100644 dashboard/templates/dashboard/base.html
 create mode 100644 dashboard/templates/dashboard/bot_add.html
 create mode 100644 dashboard/templates/dashboard/bot_detail.html
 create mode 100644 dashboard/templates/dashboard/bots.html
 create mode 100644 dashboard/templates/dashboard/commands.html
 create mode 100644 dashboard/templates/dashboard/error.html
 create mode 100644 dashboard/templates/dashboard/index.html
 create mode 100644 dashboard/templates/dashboard/new_base.html
 create mode 100644 dashboard/templates/dashboard/new_bot_add.html
 create mode 100644 dashboard/templates/dashboard/new_bots.html
 create mode 100644 dashboard/templates/dashboard/new_index.html
 create mode 100644 dashboard/templates/dashboard/new_servers.html
 create mode 100644 dashboard/templates/dashboard/stats.html
 create mode 100644 dashboard/templates/dashboard/taskmaster/dashboard.html
 create mode 100644 dashboard/templates/dashboard/taskmaster/tag_confirm_delete.html
 create mode 100644 dashboard/templates/dashboard/taskmaster/tag_form.html
 create mode 100644 dashboard/templates/dashboard/taskmaster/tag_list.html
 create mode 100644 dashboard/templates/dashboard/taskmaster/task_confirm_delete.html
 create mode 100644 dashboard/templates/dashboard/taskmaster/task_detail.html
 create mode 100644 dashboard/templates/dashboard/taskmaster/task_form.html
 create mode 100644 dashboard/templates/dashboard/taskmaster/task_list.html
 create mode 100644 dashboard/templatetags/dashboard_extras.py
 create mode 100644 dashboard/tests.py
 create mode 100644 dashboard/urls.py
 create mode 100644 dashboard/views.py
 create mode 100644 docker-compose.yml
 create mode 100644 pytest.ini
 create mode 100644 run_dev.bat
 create mode 100644 run_dev.sh
 create mode 100644 scripts/PRD.txt
 create mode 100644 scripts/example_prd.txt
 create mode 100644 scripts/run_dev.py
 create mode 100644 scripts/setup_env.py
 create mode 100644 scripts/task-complexity-report.json
 create mode 100644 setup.py
 create mode 100644 social_cube/__init__.py
 create mode 100644 social_cube/asgi.py
 create mode 100644 social_cube/settings.py
 create mode 100644 social_cube/urls.py
 create mode 100644 social_cube/wsgi.py
 create mode 100644 static/css/m3.css
 create mode 100644 static/css/main.css
 create mode 100644 static/css/settings.css
 create mode 100644 static/css/theme.css
 create mode 100644 static/img/default-avatar.svg
 create mode 100644 static/img/default_bot.png
 create mode 100644 static/img/empty_bot.svg
 create mode 100644 static/img/logo.png
 create mode 100644 static/js/bot_management.js
 create mode 100644 static/js/common.js

diff --git a/.env.example b/.env.example
index eac9af9..c310312 100644
--- a/.env.example
+++ b/.env.example
@@ -1,18 +1,32 @@
-# Django settings
-DJANGO_SECRET_KEY=your-secret-key-here
-DJANGO_DEBUG=True
+# Django Settings
+DEBUG=True
+SECRET_KEY=django-insecure-your-secret-key-here
 ALLOWED_HOSTS=localhost,127.0.0.1
-DATABASE_URL=postgresql://user:password@localhost:5432/dbname
 
-# Discord OAuth2 settings
-DISCORD_CLIENT_ID=your-client-id
-DISCORD_CLIENT_SECRET=your-client-secret
-DISCORD_REDIRECT_URI=http://localhost:8000/oauth2/callback
-DISCORD_BOT_TOKEN=your-bot-token
+# Database Configuration
+DATABASE_URL=sqlite:///db.sqlite3
+# For PostgreSQL, use:
+# DATABASE_URL=postgres://user:password@localhost:5432/social_cube
 
-# Security Settings
-CSRF_TRUSTED_ORIGINS=http://localhost:8000
-CORS_ALLOWED_ORIGINS=http://localhost:8000
+# Discord Bot Settings
+DISCORD_CLIENT_ID=your-discord-client-id
+DISCORD_CLIENT_SECRET=your-discord-client-secret
+DISCORD_REDIRECT_URI=http://localhost:8000/auth/discord/callback
+DISCORD_BOT_TOKEN=your-discord-bot-token
+BOT_TOKEN_KEY=your-fernet-encryption-key
 
-# Bot settings
-BOT_TOKEN_KEY=your-32-byte-url-safe-base64-encoded-key  # Generate using: from cryptography.fernet import Fernet; Fernet.generate_key().decode() 
\ No newline at end of file
+# CORS and CSRF Settings
+CORS_ALLOWED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000
+CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000
+
+# Google OAuth2 Settings (optional)
+GOOGLE_CLIENT_ID=your-google-client-id
+GOOGLE_CLIENT_SECRET=your-google-client-secret
+
+# Task Master Settings (for development tools)
+ANTHROPIC_API_KEY=your-anthropic-api-key
+PERPLEXITY_API_KEY=your-perplexity-api-key
+MODEL=claude-3-7-sonnet-20250219
+PERPLEXITY_MODEL=sonar-pro
+MAX_TOKENS=64000
+TEMPERATURE=0.2
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index fbc2b7d..0f8efda 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,105 @@
-node_modules
+# Environment variables
 .env
 
+# Python
+__pycache__/
+*.py[cod]
+*$py.class
+*.so
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+
+# Django
+*.log
+local_settings.py
+db.sqlite3
+db.sqlite3-journal
+media/
+staticfiles/
+
+# Node.js
+node_modules/
+npm-debug.log
+yarn-error.log
+yarn-debug.log
+
+# Editor directories and files
+.idea/
+.vscode/
+*.swp
+*.swo
+*~
+
+# macOS
+.DS_Store
+
+# Windows
+Thumbs.db
+ehthumbs.db
+Desktop.ini
+
+# Coverage reports
+htmlcov/
+.tox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*.cover
+.hypothesis/
+
+# Added by Claude Task Master
+# Logs
+logs
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+dev-debug.log
+# Dependency directories
+.idea
+.vscode
+*.suo
+*.ntvs*
+*.njsproj
+*.sln
+*.sw?
+# OS specific
+# Task files
+tasks.json
+tasks/
+
+# Virtual environments
+venv/
+env/
+.venv/
+
+# pytest
+.pytest_cache/
+pytest-*.xml
+
+# mypy
+.mypy_cache/
+
+# Jupyter Notebooks
+.ipynb_checkpoints
+
+# Secret files
+client_secrets.json
+*.pem
+*.key
+ 
\ No newline at end of file
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000..c802acf
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,45 @@
+# Use Python 3.11 slim image
+FROM python:3.11-slim
+
+# Set environment variables
+ENV PYTHONDONTWRITEBYTECODE=1 \
+    PYTHONUNBUFFERED=1 \
+    DJANGO_ENV=production
+
+# Create and set working directory
+WORKDIR /app
+
+# Install system dependencies
+RUN apt-get update \
+    && apt-get install -y --no-install-recommends \
+        gcc \
+        postgresql-client \
+    && apt-get clean \
+    && rm -rf /var/lib/apt/lists/*
+
+# Install Python dependencies
+COPY requirements.txt /app/
+RUN pip install --no-cache-dir -r requirements.txt
+
+# Copy project files
+COPY . /app/
+
+# Create user to run the app
+RUN adduser --disabled-password --gecos '' appuser \
+    && chown -R appuser:appuser /app
+
+# Set up directories
+RUN mkdir -p /app/media /app/staticfiles /app/logs \
+    && chown -R appuser:appuser /app/media /app/staticfiles /app/logs
+
+# Switch to non-root user
+USER appuser
+
+# Collect static files
+RUN python manage.py collectstatic --noinput
+
+# Expose port
+EXPOSE 8000
+
+# Run gunicorn
+CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "config.wsgi:application"]
\ No newline at end of file
diff --git a/README.md b/README.md
index f36a897..5af4897 100644
--- a/README.md
+++ b/README.md
@@ -1,87 +1,338 @@
-# Discord Bot Dashboard
+# Social Cube - Discord Bot Management System
 
-A modern web dashboard for managing Discord bots, built with Django and Bootstrap 5.
+A Django application for managing Discord bots, allowing users to create, configure, and monitor Discord bots through a web interface.
 
 ## Features
 
-- Discord OAuth2 Integration
-- Bot Management
-- Server Management
-- Command Configuration
-- Activity Logging
-- Plugin System
+- Discord bot creation and management
+- Command monitoring and statistics
+- Server management and insights
+- OAuth2 integration with Discord
+- User-friendly dashboard
+- Responsive design
 
-## Setup
+## Project Structure
 
-1. Clone the repository:
-```bash
-git clone https://github.com/yourusername/discord-bot-dashboard.git
-cd discord-bot-dashboard
-```
+The project has been structured following Django best practices:
 
-2. Create and activate a virtual environment:
-```bash
-python -m venv venv
-source venv/bin/activate  # Linux/Mac
-venv\Scripts\activate     # Windows
 ```
+social_cube/
+├── config/              # Project configuration
+│   ├── settings_base.py # Base settings
+│   ├── settings_dev.py  # Development settings
+│   ├── settings_prod.py # Production settings
+│   ├── settings_test.py # Test settings
+├── api/                 # REST API endpoints for frontend and bots
+├── bot_management/      # Discord bot creation and management
+├── dashboard/           # Web interface and task management system
+│   ├── taskmaster/      # Task management subsystem
+│   ├── templatetags/    # Custom template tags
+├── scripts/             # Utility scripts
+├── static/              # Static files (CSS, JS)
+├── logs/                # Log files
+├── media/               # User-uploaded files
+├── templates/           # Project-wide templates
+├── .env.example         # Environment variables example
+├── manage.py            # Django management script
+├── setup.py             # Package setup script
+```
+
+## Architecture Overview
+
+### Core Components
+
+- **API Layer**: RESTful API endpoints for frontend communication and bot interactions
+- **Bot Management**: Services for Discord bot creation, configuration, and monitoring
+- **Dashboard**: Web interface including analytics, monitoring, and task management
+- **Configuration**: Core settings and environment-specific configurations
+
+### Technologies
+
+- **Backend Framework**: Django 4.x with Django REST Framework
+- **Database**: SQLite (development), PostgreSQL (production)
+- **Task Queue**: Celery with Redis for background processing
+- **Frontend**: HTML, CSS, JavaScript with responsive design
+- **Deployment**: Docker and Docker Compose
+- **Authentication**: OAuth2 integration with Discord
+
+### Data Models
+
+Key models in the application include:
+
+- **User**: Extended Django user model with Discord OAuth integration
+- **Bot**: Discord bot configuration and credentials
+- **Server**: Discord servers where bots are deployed
+- **Command**: Bot commands and their usage statistics
+- **Event**: Discord events tracked by bots
+
+Refer to each app's `models.py` for detailed schema information.
+
+## Getting Started
+
+### Prerequisites
+
+- Python 3.11 or higher
+- pip or conda
+
+### Installation
+
+1. Clone the repository:
+   ```bash
+   git clone https://github.com/yourusername/social_cube.git
+   cd social_cube
+   ```
+
+2. Create a Conda environment:
+   ```bash
+   # Option 1: Using Conda (recommended)
+   conda env create -f environment.yml
+   conda activate social_cube
+   
+   # Option 2: Using Python venv
+   python -m venv venv
+   # On Windows
+   .\venv\Scripts\activate
+   # On macOS/Linux
+   source venv/bin/activate
+   pip install -r requirements.txt
+   ```
+
+3. Set up environment variables:
+   ```bash
+   python scripts/setup_env.py
+   ```
+   Edit the `.env` file to add your Discord OAuth2 credentials.
+
+4. Run migrations:
+   ```bash
+   python manage.py migrate
+   ```
+
+5. Create a superuser:
+   ```bash
+   python manage.py createsuperuser
+   ```
+
+6. Run the development server:
+   ```bash
+   python scripts/run_dev.py
+   ```
+   Or directly:
+   ```bash
+   python manage.py runserver
+   ```
+
+### Running in Production
+
+For production deployment:
+
+1. Set the `DJANGO_ENV` environment variable to `production`:
+   ```bash
+   export DJANGO_ENV=production
+   ```
+
+2. Make sure to configure all required environment variables in your production environment.
+
+3. Collect static files:
+   ```bash
+   python manage.py collectstatic
+   ```
+
+4. Use gunicorn or other WSGI server:
+   ```bash
+   gunicorn config.wsgi:application
+   ```
+
+## Testing
+
+Run tests using:
 
-3. Install dependencies:
 ```bash
-pip install -r requirements.txt
+python manage.py test
 ```
 
-4. Create a `.env` file based on `.env.example`:
+Or with pytest:
+
 ```bash
-cp .env.example .env
+pytest
 ```
 
-5. Set up your environment variables in `.env`:
-- Generate a Django secret key
-- Add your Discord application credentials
-- Configure your database settings
+## Development Workflow
+
+### Setting Up Your Development Environment
+
+1. Follow the installation steps above to set up your local environment
+2. Activate your conda environment: `conda activate social_cube`
+3. Make sure your `.env` file is properly configured with necessary credentials
+
+### Git Workflow
+
+1. Create a feature branch for your work:
+   ```bash
+   git checkout -b feature/descriptive-name
+   ```
+   
+2. Make regular, atomic commits with descriptive messages:
+   ```bash
+   git commit -m "feat: Add Discord OAuth integration"
+   ```
+   
+3. Follow conventional commits for commit messages:
+   - `feat:` for new features
+   - `fix:` for bug fixes
+   - `docs:` for documentation changes
+   - `style:` for formatting changes
+   - `refactor:` for code refactoring
+   - `test:` for adding tests
+   - `chore:` for maintenance tasks
+   
+4. Push your changes to the remote repository:
+   ```bash
+   git push origin feature/descriptive-name
+   ```
+   
+5. Create a pull request for code review
+
+### Django Development Tips
+
+1. Create new apps for discrete functionality:
+   ```bash
+   python manage.py startapp new_app_name
+   ```
+   
+2. Always run migrations after model changes:
+   ```bash
+   python manage.py makemigrations
+   python manage.py migrate
+   ```
+   
+3. Use Django's test framework for writing tests:
+   ```bash
+   python manage.py test app_name
+   ```
+   
+4. Keep views lightweight by moving business logic to models and services
+
+5. Use Django Debug Toolbar during development:
+   ```bash
+   pip install django-debug-toolbar
+   ```
+   
+### Code Quality
+
+1. Run linting before committing:
+   ```bash
+   flake8 .
+   ```
+   
+2. Format code with black:
+   ```bash
+   black .
+   ```
+   
+3. Check type hints with mypy:
+   ```bash
+   mypy .
+   ```
+   
+### CI/CD Pipeline
+
+This project uses GitHub Actions for continuous integration and deployment:
+
+1. **Continuous Integration**:
+   - Automated testing runs on every pull request and push to main
+   - Code quality checks (flake8, black, mypy) are performed
+   - Test coverage reports are generated
+
+2. **Continuous Deployment**:
+   - Successful builds on the main branch trigger automatic deployment
+   - Docker images are built and pushed to a registry
+   - Deployment to staging/production is managed via deployment scripts
+
+3. **Environment Management**:
+   - Development environment: Local development with Django runserver
+   - Staging environment: Deployed from the main branch
+   - Production environment: Deployed from release tags
+
+## Contributing
+
+### Getting Started
+
+1. Fork the repository
+2. Clone your fork: `git clone https://github.com/YOUR-USERNAME/Social_Cube.git`
+3. Create a virtual environment as described in the setup section
+4. Install development dependencies: `pip install -r requirements-dev.txt`
+5. Create your feature branch: `git checkout -b feature/amazing-feature`
+
+### Development Process
+
+1. Make your changes following the development workflow described above
+2. Ensure all tests pass: `python manage.py test`
+3. Add test coverage for your new feature
+4. Update documentation if needed
+5. Commit your changes with descriptive commit messages: `git commit -m 'Add some amazing feature'`
+6. Push to your branch: `git push origin feature/amazing-feature`
+7. Open a Pull Request with detailed description of changes
+
+### Pull Request Process
+
+1. Ensure your code passes all CI checks
+2. Get at least one code review from a maintainer
+3. Address any feedback from the review
+4. Once approved, a maintainer will merge your PR
+
+### Code of Conduct
+
+Please follow our Code of Conduct in all your interactions with the project.
+
+## Troubleshooting
+
+### Common Issues
+
+#### Database Migration Errors
+
+If you encounter migration errors:
 
-6. Run migrations:
 ```bash
+python manage.py migrate --fake-initial
 python manage.py makemigrations
 python manage.py migrate
 ```
 
-7. Create a superuser:
-```bash
-python manage.py createsuperuser
-```
+#### Static Files Not Loading
+
+Ensure you've collected static files:
 
-8. Run the development server:
 ```bash
-python manage.py runserver
+python manage.py collectstatic
 ```
 
-Visit http://localhost:8000 to access the dashboard.
+#### API Authentication Issues
 
-## Project Structure
+Check your API key configuration in `.env` file and ensure your user has the correct permissions.
 
-```
-social_cube/
-├── dashboard/           # Main application
-│   ├── models.py       # Database models
-│   ├── views.py        # View logic
-│   ├── urls.py         # URL routing
-│   └── templates/      # HTML templates
-├── static/             # Static files
-├── templates/          # Global templates
-├── social_cube/        # Project settings
-└── manage.py          # Django management script
+#### Docker Build Failures
+
+Ensure Docker is running and try rebuilding with the `--no-cache` option:
+
+```bash
+docker-compose build --no-cache
 ```
 
-## Contributing
+### Getting Help
 
-1. Fork the repository
-2. Create a feature branch
-3. Commit your changes
-4. Push to the branch
-5. Create a Pull Request
+If you're experiencing issues not covered here:
+
+1. Check the existing GitHub issues to see if it's a known problem
+2. Join our community Discord channel for real-time support
+3. Open a new GitHub issue with detailed information about your problem
 
 ## License
 
-This project is licensed under the MIT License - see the LICENSE file for details. 
\ No newline at end of file
+This project is licensed under the MIT License - see the LICENSE file for details.
+
+## Acknowledgments
+
+- Django
+- Discord.py
+- All contributors
\ No newline at end of file
diff --git a/api/__init__.py b/api/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/api/admin.py b/api/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/api/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/api/apps.py b/api/apps.py
new file mode 100644
index 0000000..7166fe7
--- /dev/null
+++ b/api/apps.py
@@ -0,0 +1,7 @@
+from django.apps import AppConfig
+
+
+class ApiConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "api"
+    verbose_name = "API"
diff --git a/api/migrations/0001_initial.py b/api/migrations/0001_initial.py
new file mode 100644
index 0000000..2a2e272
--- /dev/null
+++ b/api/migrations/0001_initial.py
@@ -0,0 +1,83 @@
+# Generated by Django 5.2 on 2025-04-26 13:42
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="ApiKey",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("key", models.CharField(max_length=64, unique=True)),
+                ("name", models.CharField(max_length=100)),
+                ("is_active", models.BooleanField(default=True)),
+                ("created_at", models.DateTimeField(auto_now_add=True)),
+                ("last_used", models.DateTimeField(blank=True, null=True)),
+                (
+                    "user",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="api_keys",
+                        to=settings.AUTH_USER_MODEL,
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="ApiLog",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("endpoint", models.CharField(max_length=255)),
+                ("method", models.CharField(max_length=10)),
+                ("status_code", models.IntegerField()),
+                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
+                ("timestamp", models.DateTimeField(auto_now_add=True)),
+                (
+                    "api_key",
+                    models.ForeignKey(
+                        blank=True,
+                        null=True,
+                        on_delete=django.db.models.deletion.SET_NULL,
+                        related_name="logs",
+                        to="api.apikey",
+                    ),
+                ),
+                (
+                    "user",
+                    models.ForeignKey(
+                        blank=True,
+                        null=True,
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="api_logs",
+                        to=settings.AUTH_USER_MODEL,
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/api/migrations/__init__.py b/api/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/api/models.py b/api/models.py
new file mode 100644
index 0000000..6343889
--- /dev/null
+++ b/api/models.py
@@ -0,0 +1,28 @@
+from django.db import models
+from django.contrib.auth.models import User
+from bot_management.models import Bot
+
+class ApiKey(models.Model):
+    """Model for API authentication"""
+    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='api_keys')
+    key = models.CharField(max_length=64, unique=True)
+    name = models.CharField(max_length=100)
+    is_active = models.BooleanField(default=True)
+    created_at = models.DateTimeField(auto_now_add=True)
+    last_used = models.DateTimeField(null=True, blank=True)
+    
+    def __str__(self):
+        return f"{self.name} ({self.user.username})"
+
+class ApiLog(models.Model):
+    """Model for logging API requests"""
+    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='api_logs', null=True, blank=True)
+    api_key = models.ForeignKey(ApiKey, on_delete=models.SET_NULL, related_name='logs', null=True, blank=True)
+    endpoint = models.CharField(max_length=255)
+    method = models.CharField(max_length=10)  # GET, POST, PUT, DELETE, etc.
+    status_code = models.IntegerField()
+    ip_address = models.GenericIPAddressField(null=True, blank=True)
+    timestamp = models.DateTimeField(auto_now_add=True)
+    
+    def __str__(self):
+        return f"{self.endpoint} - {self.method} - {self.status_code}"
diff --git a/api/tests.py b/api/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/api/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/api/urls.py b/api/urls.py
new file mode 100644
index 0000000..7e6d9c3
--- /dev/null
+++ b/api/urls.py
@@ -0,0 +1,9 @@
+from django.urls import path
+from . import views
+
+app_name = 'api'
+
+urlpatterns = [
+    # Will be populated with API endpoints
+    path('', views.api_root, name='api-root'),
+]
\ No newline at end of file
diff --git a/api/views.py b/api/views.py
new file mode 100644
index 0000000..08680e3
--- /dev/null
+++ b/api/views.py
@@ -0,0 +1,10 @@
+from django.shortcuts import render
+from django.http import JsonResponse
+
+def api_root(request):
+    """API root endpoint"""
+    return JsonResponse({
+        'status': 'ok',
+        'message': 'Social Cube API',
+        'version': '1.0.0'
+    })
diff --git a/bot_management/__init__.py b/bot_management/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/bot_management/admin.py b/bot_management/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/bot_management/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/bot_management/apps.py b/bot_management/apps.py
new file mode 100644
index 0000000..5de8142
--- /dev/null
+++ b/bot_management/apps.py
@@ -0,0 +1,7 @@
+from django.apps import AppConfig
+
+
+class BotManagementConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "bot_management"
+    verbose_name = "Bot Management"
diff --git a/bot_management/migrations/0001_initial.py b/bot_management/migrations/0001_initial.py
new file mode 100644
index 0000000..3bc3869
--- /dev/null
+++ b/bot_management/migrations/0001_initial.py
@@ -0,0 +1,73 @@
+# Generated by Django 5.2 on 2025-04-26 13:42
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="Bot",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=100)),
+                ("description", models.TextField(blank=True, null=True)),
+                ("token", models.TextField(help_text="Encrypted bot token")),
+                ("client_id", models.CharField(max_length=100, unique=True)),
+                ("bot_user_id", models.CharField(max_length=100, unique=True)),
+                ("avatar_url", models.URLField(blank=True, null=True)),
+                ("is_active", models.BooleanField(default=True)),
+                ("created_at", models.DateTimeField(auto_now_add=True)),
+                ("updated_at", models.DateTimeField(auto_now=True)),
+                (
+                    "owner",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="bots",
+                        to=settings.AUTH_USER_MODEL,
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="BotLog",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("event_type", models.CharField(max_length=50)),
+                ("description", models.TextField()),
+                ("timestamp", models.DateTimeField(auto_now_add=True)),
+                (
+                    "bot",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="logs",
+                        to="bot_management.bot",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/bot_management/migrations/__init__.py b/bot_management/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/bot_management/models.py b/bot_management/models.py
new file mode 100644
index 0000000..996e817
--- /dev/null
+++ b/bot_management/models.py
@@ -0,0 +1,42 @@
+from django.db import models
+from django.contrib.auth.models import User
+from cryptography.fernet import Fernet
+import environ
+import os
+
+# Initialize environment variables
+env = environ.Env()
+
+class Bot(models.Model):
+    """Model representing a Discord bot"""
+    name = models.CharField(max_length=100)
+    description = models.TextField(blank=True, null=True)
+    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='bots')
+    token = models.TextField(help_text='Encrypted bot token')
+    client_id = models.CharField(max_length=100, unique=True)
+    bot_user_id = models.CharField(max_length=100, unique=True)
+    avatar_url = models.URLField(blank=True, null=True)
+    is_active = models.BooleanField(default=True)
+    created_at = models.DateTimeField(auto_now_add=True)
+    updated_at = models.DateTimeField(auto_now=True)
+    
+    def __str__(self):
+        return self.name
+    
+    def save(self, *args, **kwargs):
+        # Encrypt the token if it's not already encrypted
+        if not self.id:  # New bot
+            key = env('BOT_TOKEN_KEY')
+            f = Fernet(key.encode() if isinstance(key, str) else key)
+            self.token = f.encrypt(self.token.encode()).decode()
+        super().save(*args, **kwargs)
+
+class BotLog(models.Model):
+    """Model for logging bot activity"""
+    bot = models.ForeignKey(Bot, on_delete=models.CASCADE, related_name='logs')
+    event_type = models.CharField(max_length=50)
+    description = models.TextField()
+    timestamp = models.DateTimeField(auto_now_add=True)
+    
+    def __str__(self):
+        return f"{self.bot.name} - {self.event_type} - {self.timestamp}"
diff --git a/bot_management/templates/bot_management/index.html b/bot_management/templates/bot_management/index.html
new file mode 100644
index 0000000..7d7b534
--- /dev/null
+++ b/bot_management/templates/bot_management/index.html
@@ -0,0 +1,14 @@
+{% extends 'base.html' %}
+
+{% block title %}{{ title }}{% endblock %}
+
+{% block content %}
+<div class="container py-4">
+    <h1>Bot Management</h1>
+    <p class="lead">Manage your Discord bots easily from this dashboard.</p>
+    <hr>
+    <div class="alert alert-info">
+        <p>This page will contain functionality to manage Discord bots.</p>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/bot_management/tests.py b/bot_management/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/bot_management/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/bot_management/urls.py b/bot_management/urls.py
new file mode 100644
index 0000000..c52350e
--- /dev/null
+++ b/bot_management/urls.py
@@ -0,0 +1,9 @@
+from django.urls import path
+from . import views
+
+app_name = 'bot_management'
+
+urlpatterns = [
+    # Will be populated with bot management URLs
+    path('', views.index, name='index'),
+]
\ No newline at end of file
diff --git a/bot_management/views.py b/bot_management/views.py
new file mode 100644
index 0000000..e9731b9
--- /dev/null
+++ b/bot_management/views.py
@@ -0,0 +1,8 @@
+from django.shortcuts import render
+from django.http import HttpResponse
+
+def index(request):
+    """Bot management index view"""
+    return render(request, 'bot_management/index.html', {
+        'title': 'Bot Management'
+    })
diff --git a/config/__init__.py b/config/__init__.py
new file mode 100644
index 0000000..521e0de
--- /dev/null
+++ b/config/__init__.py
@@ -0,0 +1,3 @@
+"""
+Configuration package for Social_Cube project.
+"""
\ No newline at end of file
diff --git a/config/asgi.py b/config/asgi.py
new file mode 100644
index 0000000..03604b3
--- /dev/null
+++ b/config/asgi.py
@@ -0,0 +1,17 @@
+"""
+ASGI config for Social Cube project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+# Set default Django settings module
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_dev')
+
+application = get_asgi_application()
\ No newline at end of file
diff --git a/config/settings_base.py b/config/settings_base.py
new file mode 100644
index 0000000..8590751
--- /dev/null
+++ b/config/settings_base.py
@@ -0,0 +1,162 @@
+"""
+Base Django settings for Social Cube project.
+Contains settings common to all environments.
+"""
+
+import os
+from pathlib import Path
+import environ
+from cryptography.fernet import Fernet
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+# Initialize environment variables
+env = environ.Env(
+    # Default values
+    DEBUG=(bool, False),
+    ALLOWED_HOSTS=(list, ['localhost', '127.0.0.1']),
+    DATABASE_URL=(str, 'sqlite:///db.sqlite3'),
+)
+# Read environment variables from .env file if it exists
+environ.Env.read_env(os.path.join(BASE_DIR, '.env'))
+
+# Application definition - core Django apps
+DJANGO_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+# Third-party apps
+THIRD_PARTY_APPS = [
+    'crispy_forms',
+    'crispy_bootstrap5',
+    'corsheaders',
+    'rest_framework',
+]
+
+# Project apps
+PROJECT_APPS = [
+    'dashboard.apps.DashboardConfig',
+    'bot_management',
+    'api',
+]
+
+# Combined apps list
+INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS
+
+# Middleware configuration
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'whitenoise.middleware.WhiteNoiseMiddleware',  # For static files in production
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'corsheaders.middleware.CorsMiddleware',  # For CORS support
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+# URL configuration
+ROOT_URLCONF = 'social_cube.urls'
+
+# Template configuration
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [
+        BASE_DIR / 'templates',
+        BASE_DIR / 'dashboard' / 'templates',
+        BASE_DIR / 'bot_management' / 'templates',
+        BASE_DIR / 'api' / 'templates',
+        ],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+# WSGI application
+WSGI_APPLICATION = 'social_cube.wsgi.application'
+
+# Password validation settings
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+# Internationalization
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_TZ = True
+
+# Static files (CSS, JavaScript, Images)
+STATIC_URL = 'static/'
+STATIC_ROOT = BASE_DIR / 'staticfiles'
+STATICFILES_DIRS = [BASE_DIR / 'static']
+
+# Media files
+MEDIA_URL = 'media/'
+MEDIA_ROOT = BASE_DIR / 'media'
+
+# Default primary key field type
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+
+# Crispy Forms
+CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
+CRISPY_TEMPLATE_PACK = "bootstrap5"
+
+# Discord OAuth2 base settings (without credentials)
+DISCORD_REDIRECT_URI = env('DISCORD_REDIRECT_URI', default='http://localhost:8000/oauth2/callback/')
+
+# Authentication settings
+LOGIN_URL = 'dashboard:oauth2_login'
+LOGIN_REDIRECT_URL = 'dashboard:index'
+LOGOUT_REDIRECT_URL = 'dashboard:index'
+
+# Bot settings - base configuration
+BOT_TOKEN_KEY = env('BOT_TOKEN_KEY', default=Fernet.generate_key().decode())  # Auto-generate if not provided
+
+# Django REST Framework settings
+REST_FRAMEWORK = {
+    'DEFAULT_AUTHENTICATION_CLASSES': [
+        'rest_framework.authentication.SessionAuthentication',
+        'rest_framework.authentication.BasicAuthentication',
+    ],
+    'DEFAULT_PERMISSION_CLASSES': [
+        'rest_framework.permissions.IsAuthenticated',
+    ],
+    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
+    'PAGE_SIZE': 10,
+    'DEFAULT_RENDERER_CLASSES': [
+        'rest_framework.renderers.JSONRenderer',
+        'rest_framework.renderers.BrowsableAPIRenderer',
+    ],
+    'DEFAULT_PARSER_CLASSES': [
+        'rest_framework.parsers.JSONParser',
+        'rest_framework.parsers.FormParser',
+        'rest_framework.parsers.MultiPartParser',
+    ],
+}
\ No newline at end of file
diff --git a/config/settings_dev.py b/config/settings_dev.py
new file mode 100644
index 0000000..36c6a92
--- /dev/null
+++ b/config/settings_dev.py
@@ -0,0 +1,76 @@
+"""
+Development environment settings for Social Cube project.
+"""
+
+from .settings_base import *  # noqa
+
+# Set DEBUG to True in development
+DEBUG = True
+
+# Django Secret Key - in dev can use a placeholder if not in env
+SECRET_KEY = env('SECRET_KEY', default='django-insecure-dev-only-key-change-in-production')
+
+# Allowed hosts - less restrictive in development
+ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']
+
+# Database - use SQLite for development by default
+DATABASES = {
+    'default': env.db('DATABASE_URL', default='sqlite:///db.sqlite3'),
+}
+
+# CORS settings - more permissive in development
+CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[
+    'http://localhost:8000',
+    'http://127.0.0.1:8000',
+    'http://localhost:3000',  # For frontend dev server if used
+])
+
+# CSRF settings
+CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[
+    'http://localhost:8000',
+    'http://127.0.0.1:8000',
+])
+
+# Discord OAuth2 settings - get from env or use placeholders
+DISCORD_CLIENT_ID = env('DISCORD_CLIENT_ID', default='your-discord-client-id')
+DISCORD_CLIENT_SECRET = env('DISCORD_CLIENT_SECRET', default='your-discord-client-secret')
+
+# Google OAuth2 settings
+GOOGLE_OAUTH2_CLIENT_SECRETS_FILE = os.path.join(BASE_DIR, 'client_secrets.json')
+GOOGLE_OAUTH2_SCOPES = [
+    'https://www.googleapis.com/auth/youtube.readonly',
+]
+
+# Logging - more verbose in development
+LOGGING = {
+    'version': 1,
+    'disable_existing_loggers': False,
+    'formatters': {
+        'verbose': {
+            'format': '{levelname} {asctime} {module} {message}',
+            'style': '{',
+        },
+    },
+    'handlers': {
+        'console': {
+            'level': 'DEBUG',
+            'class': 'logging.StreamHandler',
+            'formatter': 'verbose',
+        },
+    },
+    'loggers': {
+        'django': {
+            'handlers': ['console'],
+            'level': 'INFO',
+            'propagate': True,
+        },
+        'dashboard': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': True,
+        },
+    },
+}
+
+# Email configuration for development (print to console)
+EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
\ No newline at end of file
diff --git a/config/settings_prod.py b/config/settings_prod.py
new file mode 100644
index 0000000..af9aa58
--- /dev/null
+++ b/config/settings_prod.py
@@ -0,0 +1,94 @@
+"""
+Production environment settings for Social Cube project.
+"""
+
+from .settings_base import *  # noqa
+
+# Debug should be False in production
+DEBUG = False
+
+# Secret key - must be provided in environment
+SECRET_KEY = env('SECRET_KEY')
+
+# Allowed hosts - must be configured properly in production
+ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')
+
+# Production database settings - must be configured
+DATABASES = {
+    'default': env.db('DATABASE_URL'),
+}
+
+# Discord OAuth2 credentials - required in production
+DISCORD_CLIENT_ID = env('DISCORD_CLIENT_ID')
+DISCORD_CLIENT_SECRET = env('DISCORD_CLIENT_SECRET')
+DISCORD_REDIRECT_URI = env('DISCORD_REDIRECT_URI')
+
+# CORS settings - restrictive in production
+CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS')
+CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS')
+
+# Google OAuth2 settings
+GOOGLE_OAUTH2_CLIENT_SECRETS_FILE = os.path.join(BASE_DIR, 'client_secrets.json')
+GOOGLE_OAUTH2_SCOPES = [
+    'https://www.googleapis.com/auth/youtube.readonly',
+]
+
+# Security settings for production
+SECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT', default=True)
+SECURE_HSTS_SECONDS = env.int('SECURE_HSTS_SECONDS', default=2592000)  # 30 days
+SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=True)
+SECURE_HSTS_PRELOAD = env.bool('SECURE_HSTS_PRELOAD', default=True)
+SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
+SECURE_BROWSER_XSS_FILTER = True
+SECURE_CONTENT_TYPE_NOSNIFF = True
+SESSION_COOKIE_SECURE = True
+CSRF_COOKIE_SECURE = True
+
+# Static files
+STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
+
+# Logging - configuration for production environment
+LOGGING = {
+    'version': 1,
+    'disable_existing_loggers': False,
+    'formatters': {
+        'verbose': {
+            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
+            'style': '{',
+        },
+    },
+    'handlers': {
+        'console': {
+            'level': 'ERROR',
+            'class': 'logging.StreamHandler',
+            'formatter': 'verbose',
+        },
+        'file': {
+            'level': 'ERROR',
+            'class': 'logging.FileHandler',
+            'filename': os.path.join(BASE_DIR, 'logs', 'django-errors.log'),
+            'formatter': 'verbose',
+        },
+    },
+    'loggers': {
+        'django': {
+            'handlers': ['console', 'file'],
+            'level': 'ERROR',
+            'propagate': True,
+        },
+        'dashboard': {
+            'handlers': ['console', 'file'],
+            'level': 'ERROR',
+            'propagate': True,
+        },
+    },
+}
+
+# Email configuration (using environment variables)
+EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
+EMAIL_HOST = env('EMAIL_HOST')
+EMAIL_PORT = env.int('EMAIL_PORT', default=587)
+EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
+EMAIL_HOST_USER = env('EMAIL_HOST_USER')
+EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
+DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default=EMAIL_HOST_USER)
\ No newline at end of file
diff --git a/config/settings_test.py b/config/settings_test.py
new file mode 100644
index 0000000..53903dc
--- /dev/null
+++ b/config/settings_test.py
@@ -0,0 +1,62 @@
+"""
+Test environment settings for Social Cube project.
+"""
+
+from .settings_base import *  # noqa
+
+# Debug should be False in tests to match production
+DEBUG = False
+
+# Use a consistent secret key for tests
+SECRET_KEY = 'test-secret-key-not-for-production'
+
+# Allow all hosts in test environment
+ALLOWED_HOSTS = ['*']
+
+# Use in-memory SQLite database for faster tests
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+# Mock Discord OAuth2 values
+DISCORD_CLIENT_ID = 'test-discord-client-id'
+DISCORD_CLIENT_SECRET = 'test-discord-client-secret'
+DISCORD_REDIRECT_URI = 'http://testserver/oauth2/callback/'
+
+# Simplified CORS settings for tests
+CORS_ALLOWED_ORIGINS = ['http://testserver']
+CSRF_TRUSTED_ORIGINS = ['http://testserver']
+
+# Disable password hashing to speed up tests
+PASSWORD_HASHERS = [
+    'django.contrib.auth.hashers.MD5PasswordHasher',
+]
+
+# Disable logging to console during tests
+LOGGING = {
+    'version': 1,
+    'disable_existing_loggers': True,
+    'handlers': {
+        'null': {
+            'class': 'logging.NullHandler',
+        },
+    },
+    'loggers': {
+        'django': {
+            'handlers': ['null'],
+            'propagate': False,
+            'level': 'ERROR',
+        },
+        'dashboard': {
+            'handlers': ['null'],
+            'propagate': False,
+            'level': 'ERROR',
+        },
+    },
+}
+
+# No email sending during tests
+EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'
\ No newline at end of file
diff --git a/config/urls.py b/config/urls.py
new file mode 100644
index 0000000..714fc84
--- /dev/null
+++ b/config/urls.py
@@ -0,0 +1,26 @@
+"""
+URL Configuration for Social Cube project.
+"""
+from django.conf import settings
+from django.contrib import admin
+from django.urls import path, include
+from django.conf.urls.static import static
+from django.views.generic import RedirectView
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('dashboard/', include(('dashboard.urls', 'dashboard'), namespace='dashboard')),
+    path('', RedirectView.as_view(pattern_name='dashboard:index', permanent=False)),
+]
+
+# Add static and media URLs in development
+if settings.DEBUG:
+    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
+    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
+    
+    # Add debug toolbar URLs if available
+    try:
+        import debug_toolbar
+        urlpatterns.append(path('__debug__/', include(debug_toolbar.urls)))
+    except ImportError:
+        pass
\ No newline at end of file
diff --git a/config/wsgi.py b/config/wsgi.py
new file mode 100644
index 0000000..788e80b
--- /dev/null
+++ b/config/wsgi.py
@@ -0,0 +1,20 @@
+"""
+WSGI config for Social Cube project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+# Check if we're running on production environment (using environment variable)
+if os.environ.get('DJANGO_ENV') == 'production':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_prod')
+else:
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_dev')
+
+application = get_wsgi_application()
\ No newline at end of file
diff --git a/conftest.py b/conftest.py
new file mode 100644
index 0000000..9a31922
--- /dev/null
+++ b/conftest.py
@@ -0,0 +1,31 @@
+import pytest
+from django.contrib.auth import get_user_model
+from django.test import Client
+
+User = get_user_model()
+
+@pytest.fixture
+def client():
+    """A Django test client instance."""
+    return Client()
+
+@pytest.fixture
+def authenticated_client(client, django_user_model):
+    """A Django test client instance with an authenticated user."""
+    user = django_user_model.objects.create_user(username='testuser', password='testpass123')
+    client.login(username='testuser', password='testpass123')
+    return client
+
+@pytest.fixture
+def test_user(django_user_model):
+    """Create a test user."""
+    return django_user_model.objects.create_user(username='testuser', password='testpass123')
+
+@pytest.fixture
+def test_superuser(django_user_model):
+    """Create a test superuser."""
+    return django_user_model.objects.create_superuser(
+        username='admin',
+        email='admin@example.com',
+        password='adminpass123'
+    ) 
\ No newline at end of file
diff --git a/dashboard/__init__.py b/dashboard/__init__.py
new file mode 100644
index 0000000..0519ecb
--- /dev/null
+++ b/dashboard/__init__.py
@@ -0,0 +1 @@
+ 
\ No newline at end of file
diff --git a/dashboard/admin.py b/dashboard/admin.py
new file mode 100644
index 0000000..4ef1dd8
--- /dev/null
+++ b/dashboard/admin.py
@@ -0,0 +1,40 @@
+from django.contrib import admin
+from .models import Bot, Command, CommandExecution
+from .taskmaster.models import Task, TaskTag, TaskTagAssignment
+
+# Bot models
+@admin.register(Bot)
+class BotAdmin(admin.ModelAdmin):
+    list_display = ('name', 'owner', 'created_at')
+    search_fields = ('name', 'owner__username')
+    
+@admin.register(Command)
+class CommandAdmin(admin.ModelAdmin):
+    list_display = ('name', 'bot', 'category', 'is_enabled')
+    list_filter = ('category', 'is_enabled', 'bot')
+    search_fields = ('name', 'description')
+
+@admin.register(CommandExecution)
+class CommandExecutionAdmin(admin.ModelAdmin):
+    list_display = ('command', 'user_name', 'server_name', 'executed_at', 'is_success')
+    list_filter = ('is_success', 'executed_at')
+    search_fields = ('user_name', 'server_name', 'command__name')
+    readonly_fields = ('command', 'user_id', 'user_name', 'server_id', 'server_name', 'channel_id', 'parameters', 'executed_at')
+
+# Taskmaster models
+class TaskTagAssignmentInline(admin.TabularInline):
+    model = TaskTagAssignment
+    extra = 1
+
+@admin.register(Task)
+class TaskAdmin(admin.ModelAdmin):
+    list_display = ('title', 'status', 'priority', 'due_date', 'user', 'created_at', 'is_overdue')
+    list_filter = ('status', 'priority', 'created_at', 'user')
+    search_fields = ('title', 'description')
+    date_hierarchy = 'created_at'
+    inlines = [TaskTagAssignmentInline]
+
+@admin.register(TaskTag)
+class TaskTagAdmin(admin.ModelAdmin):
+    list_display = ('name', 'color')
+    search_fields = ('name',)
\ No newline at end of file
diff --git a/dashboard/apps.py b/dashboard/apps.py
new file mode 100644
index 0000000..4897d7f
--- /dev/null
+++ b/dashboard/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class DashboardConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'dashboard' 
\ No newline at end of file
diff --git a/dashboard/auth_urls.py b/dashboard/auth_urls.py
new file mode 100644
index 0000000..7dea25e
--- /dev/null
+++ b/dashboard/auth_urls.py
@@ -0,0 +1,8 @@
+from django.urls import path
+from . import views
+
+urlpatterns = [
+    path('oauth2/login/', views.oauth2_login, name='oauth2_login'),
+    path('oauth2/callback/', views.oauth2_callback, name='oauth2_callback'),
+    path('oauth2/logout/', views.logout_view, name='oauth2_logout'),
+] 
\ No newline at end of file
diff --git a/dashboard/base.html b/dashboard/base.html
new file mode 100644
index 0000000..ed400ee
--- /dev/null
+++ b/dashboard/base.html
@@ -0,0 +1,181 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <meta name="description" content="Social Cube - Your All-in-One Discord Bot Management Dashboard">
+    <meta name="theme-color" content="#4F46E5">
+    <title>{% block title %}Social Cube{% endblock %}</title>
+    <script src="https://cdn.tailwindcss.com"></script>
+    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
+    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
+</head>
+<body class="bg-gray-50 min-h-screen flex flex-col">
+    <!-- CSRF Token for AJAX requests -->
+    {% csrf_token %}
+    
+    <nav class="bg-white shadow-sm border-b border-gray-200">
+        <div class="container mx-auto px-4">
+            <div class="flex justify-between items-center py-4">
+                <!-- Logo and Desktop Navigation -->
+                <div class="flex items-center space-x-8">
+                    <a href="{% url 'dashboard:index' %}" class="flex items-center space-x-2">
+                        <i class="fas fa-cube text-indigo-600 text-2xl"></i>
+                        <span class="text-xl font-bold text-gray-900">Social Cube</span>
+                    </button></form>
+                    {% if user.is_authenticated %}
+                    <nav class="hidden md:flex space-x-6">
+                        <a href="{% url 'dashboard:index' %}" class="text-gray-600 hover:text-indigo-600 {% if request.resolver_match.url_name == 'index' %}text-indigo-600{% endif %}">
+                            <i class="fas fa-home mr-1"></i>Dashboard
+                        </a>
+                        <a href="{% url 'dashboard:servers' %}" class="text-gray-600 hover:text-indigo-600 {% if request.resolver_match.url_name == 'servers' %}text-indigo-600{% endif %}">
+                            <i class="fas fa-server mr-1"></i>Servers
+                        </a>
+                        <a href="{% url 'dashboard:bot:list' %}" class="text-gray-600 hover:text-indigo-600 {% if 'bot' in request.resolver_match.namespaces %}text-indigo-600{% endif %}">
+                            <i class="fas fa-robot mr-1"></i>Bots
+                        </a>
+                        <a href="{% url 'dashboard:analytics:overview' %}" class="text-gray-600 hover:text-indigo-600 {% if 'analytics' in request.resolver_match.namespaces %}text-indigo-600{% endif %}">
+                            <i class="fas fa-chart-line mr-1"></i>Analytics
+                        </a>
+                        <a href="{% url 'dashboard:taskmaster:dashboard' %}" class="text-gray-600 hover:text-indigo-600 {% if 'taskmaster' in request.resolver_match.namespaces %}text-indigo-600{% endif %}">
+                            <i class="fas fa-tasks mr-1"></i>Tasks
+                        </a>
+                    </nav>
+                    {% endif %}
+                </div>
+
+                <!-- User Menu (Desktop) -->
+                {% if user.is_authenticated %}
+                <div class="hidden md:flex items-center space-x-4">
+                    <a href="{% url 'dashboard:bot:add' %}" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors">
+                        <i class="fas fa-plus mr-1"></i>Add Bot
+                    </a>
+                    <div class="relative" x-data="{ open: false }">
+                        <button @click="open = !open" class="flex items-center space-x-2 text-gray-700 hover:text-indigo-600">
+                            <span class="text-sm font-medium">{{ user.username }}</span>
+                            <i class="fas fa-chevron-down text-xs"></i>
+                        </button>
+                        <div x-show="open" @click.away="open = false" class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2">
+                            <a href="{% url 'dashboard:servers' %}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-indigo-50">
+                                <i class="fas fa-user mr-2"></i>Profile
+                                <img src="{% static 'img/default-avatar.png' %}" alt="Profile" class="rounded-full w-8 h-8 ml-2 inline-block">
+                            </a>
+                            <form method="post" action="{% url 'dashboard:logout' %}" class="block">{% csrf_token %}
+                                <button type="submit" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50">
+                                <i class="fas fa-sign-out-alt mr-2"></i>Logout
+                                </button>
+                            </form>
+                        </div>
+                    </div>
+                </div>
+                {% else %}
+                <div class="hidden md:block">
+                    <a href="{% url 'dashboard:oauth2_login' %}" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors">
+                        <i class="fab fa-discord mr-1"></i>Login with Discord
+                    </a>
+                </div>
+                {% endif %}
+
+                <!-- Mobile Menu Button -->
+                <button type="button" onclick="toggleMobileMenu()" class="md:hidden text-gray-600 hover:text-indigo-600">
+                    <i class="fas fa-bars text-xl"></i>
+                </button>
+            </div>
+
+            <!-- Mobile Menu -->
+            <div id="mobileMenu" class="hidden md:hidden">
+                <nav class="py-4">
+                    {% if user.is_authenticated %}
+                    <a href="{% url 'dashboard:index' %}" class="block py-2 px-4 text-gray-600 hover:bg-indigo-50 hover:text-indigo-600 {% if request.resolver_match.url_name == 'index' %}text-indigo-600 bg-indigo-50{% endif %}">
+                        <i class="fas fa-home mr-2"></i>Dashboard
+                    </a>
+                    <a href="{% url 'dashboard:servers' %}" class="block py-2 px-4 text-gray-600 hover:bg-indigo-50 hover:text-indigo-600 {% if request.resolver_match.url_name == 'servers' %}text-indigo-600 bg-indigo-50{% endif %}">
+                        <i class="fas fa-server mr-2"></i>Servers
+                    </a>
+                    <a href="{% url 'dashboard:bot:list' %}" class="block py-2 px-4 text-gray-600 hover:bg-indigo-50 hover:text-indigo-600 {% if 'bot' in request.resolver_match.namespaces %}text-indigo-600 bg-indigo-50{% endif %}">
+                        <i class="fas fa-robot mr-2"></i>Bots
+                    </a>
+                    <a href="{% url 'dashboard:analytics:overview' %}" class="block py-2 px-4 text-gray-600 hover:bg-indigo-50 hover:text-indigo-600 {% if 'analytics' in request.resolver_match.namespaces %}text-indigo-600 bg-indigo-50{% endif %}">
+                        <i class="fas fa-chart-line mr-2"></i>Analytics
+                    </a>
+                    <a href="{% url 'dashboard:taskmaster:dashboard' %}" class="block py-2 px-4 text-gray-600 hover:bg-indigo-50 hover:text-indigo-600 {% if 'taskmaster' in request.resolver_match.namespaces %}text-indigo-600 bg-indigo-50{% endif %}">
+                        <i class="fas fa-tasks mr-2"></i>Tasks
+                    </a>
+                    <a href="{% url 'dashboard:bot:add' %}" class="block py-2 px-4 text-indigo-600 hover:bg-indigo-50 {% if request.resolver_match.url_name == 'add' %}bg-indigo-50{% endif %}">
+                        <i class="fas fa-plus mr-2"></i>Add Bot
+                    </a>
+                    <hr class="my-2 border-gray-200">
+                    <a href="{% url 'dashboard:logout' %}" class="block py-2 px-4 text-red-600 hover:bg-red-50">
+                        <i class="fas fa-sign-out-alt mr-2"></i>Logout
+                    </a>
+                    {% else %}
+                    <a href="{% url 'dashboard:oauth2_login' %}" class="block py-2 px-4 text-indigo-600 hover:bg-indigo-50">
+                        <i class="fab fa-discord mr-2"></i>Login with Discord
+                    </a>
+                    {% endif %}
+                </nav>
+            </div>
+        </div>
+    </nav>
+
+    <main class="flex-grow">
+        {% if messages %}
+        <div class="container mx-auto px-4 mt-4">
+            {% for message in messages %}
+            <div class="p-4 mb-4 rounded-lg {% if message.tags == 'success' %}bg-green-100 text-green-700{% elif message.tags == 'error' %}bg-red-100 text-red-700{% else %}bg-blue-100 text-blue-700{% endif %}">
+                {{ message }}
+            </div>
+            {% endfor %}
+        </div>
+        {% endif %}
+        
+        {% block content %}{% endblock %}
+    </main>
+
+    <footer class="bg-white border-t border-gray-200 mt-8 py-6">
+        <div class="container mx-auto px-4">
+            <div class="flex flex-col md:flex-row justify-between items-center">
+                <div class="flex items-center space-x-2 mb-4 md:mb-0">
+                    <i class="fas fa-cube text-indigo-600"></i>
+                    <span class="text-gray-600">&copy; 2024 Social Cube</span>
+                </div>
+                <div class="flex space-x-6">
+                    <a href="https://github.com" target="_blank" rel="noopener noreferrer" class="text-gray-600 hover:text-indigo-600">
+                        <i class="fab fa-github"></i>
+                    </a>
+                    <a href="https://discord.com" target="_blank" rel="noopener noreferrer" class="text-gray-600 hover:text-indigo-600">
+                        <i class="fab fa-discord"></i>
+                    </a>
+                </div>
+            </div>
+        </div>
+    </footer>
+
+    <script>
+    function toggleMobileMenu() {
+        const menu = document.getElementById('mobileMenu');
+        menu.classList.toggle('hidden');
+    }
+
+    // Add CSRF token to all AJAX requests
+    document.addEventListener('DOMContentLoaded', function() {
+        const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;
+        
+        // Add CSRF token to all fetch requests
+        const originalFetch = window.fetch;
+        window.fetch = function() {
+            let [resource, config] = arguments;
+            if(config === undefined) {
+                config = {};
+            }
+            if(config.headers === undefined) {
+                config.headers = {};
+            }
+            config.headers['X-CSRFToken'] = csrfToken;
+            return originalFetch(resource, config);
+        };
+    });
+    </script>
+</body>
+</html> 
\ No newline at end of file
diff --git a/dashboard/middleware.py b/dashboard/middleware.py
new file mode 100644
index 0000000..0519ecb
--- /dev/null
+++ b/dashboard/middleware.py
@@ -0,0 +1 @@
+ 
\ No newline at end of file
diff --git a/dashboard/migrations/0001_initial.py b/dashboard/migrations/0001_initial.py
new file mode 100644
index 0000000..ba3b3c4
--- /dev/null
+++ b/dashboard/migrations/0001_initial.py
@@ -0,0 +1,123 @@
+# Generated by Django 5.2 on 2025-04-25 14:57
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="Bot",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=100)),
+                ("description", models.TextField(blank=True)),
+                ("token", models.CharField(max_length=100)),
+                (
+                    "avatar",
+                    models.ImageField(blank=True, null=True, upload_to="bot_avatars/"),
+                ),
+                ("prefix", models.CharField(default="!", max_length=10)),
+                ("created_at", models.DateTimeField(auto_now_add=True)),
+                ("updated_at", models.DateTimeField(auto_now=True)),
+                (
+                    "owner",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        to=settings.AUTH_USER_MODEL,
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Command",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=50)),
+                ("description", models.TextField()),
+                (
+                    "category",
+                    models.CharField(
+                        choices=[
+                            ("moderation", "Moderation"),
+                            ("utility", "Utility"),
+                            ("fun", "Fun"),
+                            ("music", "Music"),
+                            ("other", "Other"),
+                        ],
+                        default="utility",
+                        max_length=20,
+                    ),
+                ),
+                ("is_enabled", models.BooleanField(default=True)),
+                ("syntax", models.CharField(blank=True, max_length=255)),
+                ("options", models.TextField(blank=True)),
+                ("created_at", models.DateTimeField(auto_now_add=True)),
+                ("updated_at", models.DateTimeField(auto_now=True)),
+                (
+                    "bot",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="commands",
+                        to="dashboard.bot",
+                    ),
+                ),
+            ],
+            options={
+                "unique_together": {("name", "bot")},
+            },
+        ),
+        migrations.CreateModel(
+            name="CommandExecution",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("user_id", models.CharField(max_length=20)),
+                ("user_name", models.CharField(max_length=100)),
+                ("server_id", models.CharField(max_length=20)),
+                ("server_name", models.CharField(max_length=100)),
+                ("channel_id", models.CharField(max_length=20)),
+                ("parameters", models.TextField(blank=True)),
+                ("is_success", models.BooleanField(default=True)),
+                ("executed_at", models.DateTimeField(auto_now_add=True)),
+                (
+                    "command",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        to="dashboard.command",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/dashboard/migrations/0002_tasktag_task_tasktagassignment.py b/dashboard/migrations/0002_tasktag_task_tasktagassignment.py
new file mode 100644
index 0000000..f20424b
--- /dev/null
+++ b/dashboard/migrations/0002_tasktag_task_tasktagassignment.py
@@ -0,0 +1,118 @@
+# Generated by Django 5.2 on 2025-04-26 06:36
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("dashboard", "0001_initial"),
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="TaskTag",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=50, unique=True)),
+                ("color", models.CharField(default="#1a73e8", max_length=7)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Task",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("title", models.CharField(max_length=200)),
+                ("description", models.TextField(blank=True, null=True)),
+                (
+                    "status",
+                    models.CharField(
+                        choices=[
+                            ("pending", "Pending"),
+                            ("in_progress", "In Progress"),
+                            ("completed", "Completed"),
+                            ("canceled", "Canceled"),
+                        ],
+                        default="pending",
+                        max_length=20,
+                    ),
+                ),
+                (
+                    "priority",
+                    models.CharField(
+                        choices=[
+                            ("low", "Low"),
+                            ("medium", "Medium"),
+                            ("high", "High"),
+                            ("urgent", "Urgent"),
+                        ],
+                        default="medium",
+                        max_length=20,
+                    ),
+                ),
+                ("due_date", models.DateTimeField(blank=True, null=True)),
+                ("created_at", models.DateTimeField(auto_now_add=True)),
+                ("updated_at", models.DateTimeField(auto_now=True)),
+                (
+                    "user",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="tasks",
+                        to=settings.AUTH_USER_MODEL,
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="TaskTagAssignment",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                (
+                    "tag",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="task_assignments",
+                        to="dashboard.tasktag",
+                    ),
+                ),
+                (
+                    "task",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="tag_assignments",
+                        to="dashboard.task",
+                    ),
+                ),
+            ],
+            options={
+                "unique_together": {("task", "tag")},
+            },
+        ),
+    ]
diff --git a/dashboard/migrations/__init__.py b/dashboard/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/dashboard/models.py b/dashboard/models.py
new file mode 100644
index 0000000..bb4e068
--- /dev/null
+++ b/dashboard/models.py
@@ -0,0 +1,57 @@
+from django.db import models
+from django.contrib.auth.models import User
+
+class Bot(models.Model):
+    """Discord bot model."""
+    name = models.CharField(max_length=100)
+    description = models.TextField(blank=True)
+    token = models.CharField(max_length=100)
+    owner = models.ForeignKey(User, on_delete=models.CASCADE)
+    avatar = models.ImageField(upload_to='bot_avatars/', blank=True, null=True)
+    prefix = models.CharField(max_length=10, default='!')
+    created_at = models.DateTimeField(auto_now_add=True)
+    updated_at = models.DateTimeField(auto_now=True)
+    
+    def __str__(self):
+        return self.name
+
+class Command(models.Model):
+    """Discord bot command model."""
+    CATEGORY_CHOICES = [
+        ('moderation', 'Moderation'),
+        ('utility', 'Utility'),
+        ('fun', 'Fun'),
+        ('music', 'Music'),
+        ('other', 'Other'),
+    ]
+    
+    name = models.CharField(max_length=50)
+    description = models.TextField()
+    bot = models.ForeignKey(Bot, on_delete=models.CASCADE, related_name='commands')
+    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, default='utility')
+    is_enabled = models.BooleanField(default=True)
+    syntax = models.CharField(max_length=255, blank=True)
+    options = models.TextField(blank=True)  # JSON field to store command options
+    created_at = models.DateTimeField(auto_now_add=True)
+    updated_at = models.DateTimeField(auto_now=True)
+    
+    class Meta:
+        unique_together = ('name', 'bot')
+    
+    def __str__(self):
+        return f"{self.bot.name} - {self.name}"
+
+class CommandExecution(models.Model):
+    """Record of command execution."""
+    command = models.ForeignKey(Command, on_delete=models.CASCADE)
+    user_id = models.CharField(max_length=20)
+    user_name = models.CharField(max_length=100)
+    server_id = models.CharField(max_length=20)
+    server_name = models.CharField(max_length=100)
+    channel_id = models.CharField(max_length=20)
+    parameters = models.TextField(blank=True)  # JSON field to store parameters
+    is_success = models.BooleanField(default=True)
+    executed_at = models.DateTimeField(auto_now_add=True)
+    
+    def __str__(self):
+        return f"{self.command.name} by {self.user_name} in {self.server_name}"
\ No newline at end of file
diff --git a/dashboard/registration/login.html b/dashboard/registration/login.html
new file mode 100644
index 0000000..864942e
--- /dev/null
+++ b/dashboard/registration/login.html
@@ -0,0 +1,27 @@
+{% extends "base.html" %}
+
+{% block title %}Login - Discord Bot Dashboard{% endblock %}
+
+{% block content %}
+<div class="row justify-content-center">
+    <div class="col-md-6 col-lg-4">
+        <div class="card shadow-sm">
+            <div class="card-header bg-primary text-white">
+                <h4 class="card-title mb-0">
+                    <i class="bx bx-log-in-circle"></i> Login
+                </h4>
+            </div>
+            <div class="card-body">
+                <div class="text-center mb-4">
+                    <a href="{% url 'dashboard:oauth2_login' %}" class="btn btn-primary btn-lg">
+                        <i class="bx bxl-discord-alt"></i> Login with Discord
+                    </a>
+                </div>
+                <div class="text-center text-muted">
+                    <small>By logging in, you agree to our Terms of Service and Privacy Policy.</small>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %} 
\ No newline at end of file
diff --git a/dashboard/static/img/default-avatar.png b/dashboard/static/img/default-avatar.png
new file mode 100644
index 0000000..274675a
--- /dev/null
+++ b/dashboard/static/img/default-avatar.png
@@ -0,0 +1 @@
+iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5AoTCDE3n4vVMQAABMpJREFUeNrtnU1y2zAMhT8nk03OkJ2PkGmesjpDjuSj5AzJpuk0vULWWbloJpaNH4AfCYKUZn4zntgWBYIPAEGAlFKSsIeYh5g7MTeEIGCOx8dTwBilBT6llJIYCFcMRCDEOARinCGcGmtZFmJucyDKIrVFHZJxJsW+7pCVBIiAEJ7vCHEwg9xnvEfMXQZ4AWPN/wPGvfwIyiXGaZLaCdA9qGO8K9i3ewBp8RzQPcKkr2UGpZ9n0Evax7eUUorMPSq+EvMDcHyMz6Cf5zYfD7wIPYW12Ufa4wtwtPgIHDEUw1Cix1jLgHaAMQCGc3Ct0EcLx3Fvv+8EwFhGaPIB9AO4AfcSY7HEhk6jrD55SWY+APcOnCQ+QJuvwA2IfQBu4DGq2zxS0DgIKkYOuXn8AHwUiRgBYCiAUdLmW2E//gTwV7w7qv7KbE4DjACHEHpBjgAxysR477OIoWUfLfLxRfL1Vyd6fLyAdfoAGKMgxtriXuGz+Ew7UDwYg7DQhyEYyyRiOqwU1h/7PU0MryLEAUbORZ2jn+drYShKB+IegLHMEuxDm2oCGFaFtVXqQY/riBXXXUMwHK8MfmyuX2uJcfUSa9e6tKGEVhMO//KaqkGbR8E+gstXiICrcx1ivBd+VmzQpseYwOsYHrpLlBhxNQozdGgxdNTsxCXGWYD4IMRPx/m7WYixlS3WzDPr0Uyr43yq2kqMHrR5NbRZNQ9Rmy9GPgpwFN4/WIkrDzE6o03Vy7VgWY+ldl/CJXEEi0n1A/JuGrXcTI8VQScxoJMYl2vzu9e6KyWGlyIHHUK0h7VbLIpxvt83QTs9a/M2WnkAEEJG1BRQDNOKYRrGpRXGlUFiXAXHLgEIIYR4k7ByNCYIxhkULvGMSAghpB5iTxGH8Yzj34JgzAoMNSL02BuM4l3kLNhgjpXiQnCcQ7gxFCFRYoQQQgghqUlgVS0kqBAnQxCiIEBRbNDn4MaKFFdCXYAgQrxHWYkQIUJqyRVRsW5EhCBCqM1HCCHE2HXk8wGMR4T4izJwB0YOIYSQo4YYP88YREgYnuGaYWWQGFc+YFzpHhQhhBBCSI1VQGQ9hBBCtDGIkCDcA/0ghBAihAghhBBCiE8YhBAiRA+GcGENQoilzlLl1WUSEoyQPJ/KxRoxJ1TMHUVuxLwm5ovI13rnJ00STrAUIcERIoQICVqhE0KIECJESJwNTAghQogQIYQQQghZNyYhX4QQQogQIUSIHxYKF4QQQgghcbgHbmBCSMgIqXGzCTHcwFahT66OlkKECCE6hFAnIYQQId5ghPrECiGECBFCdAghQgghnmBEi7BwHT9sAyd0CLF3i1I11mYJIfVhjBoHihCxuYGTws1MCPHLPSyKEEIIERK0QseGsYgQQggRQoQQUu/uJtYhhBBCCJEmqDqKdQghhBAiJOB9WIQQQgghhBBCCCGEEEIIIYQQQgj5KEmUgx4iXQ8hhBBCiCEiQq5DCCGEkLqKCCGEEEIIIe9Q+z6sSHUnQgghhJAgkq+kE0IIIYSQvUiiHPQQdh1CCCGEEEKIUxFCCCGEEEIIIYQQEklw/yH8Qn1CCCGEkCji1yCEEEIIiSJ+DUIIIYQQQgghhBBCCCEkJP0HVUqV9Dw0XaEAAAAASUVORK5CYII=
\ No newline at end of file
diff --git a/dashboard/taskmaster/__init__.py b/dashboard/taskmaster/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/dashboard/taskmaster/forms.py b/dashboard/taskmaster/forms.py
new file mode 100644
index 0000000..66c723b
--- /dev/null
+++ b/dashboard/taskmaster/forms.py
@@ -0,0 +1,36 @@
+from django import forms
+from .models import Task, TaskTag
+
+
+class TaskForm(forms.ModelForm):
+    tags = forms.ModelMultipleChoiceField(
+        queryset=TaskTag.objects.all(),
+        required=False,
+        widget=forms.CheckboxSelectMultiple
+    )
+    
+    due_date = forms.DateTimeField(
+        required=False,
+        widget=forms.DateTimeInput(
+            attrs={'type': 'datetime-local'},
+            format='%Y-%m-%dT%H:%M'
+        )
+    )
+    
+    class Meta:
+        model = Task
+        fields = ['title', 'description', 'priority', 'status', 'due_date', 'tags']
+        
+    def __init__(self, *args, **kwargs):
+        super(TaskForm, self).__init__(*args, **kwargs)
+        if self.instance.pk:
+            self.fields['tags'].initial = self.instance.tag_assignments.values_list('tag', flat=True)
+
+
+class TaskTagForm(forms.ModelForm):
+    class Meta:
+        model = TaskTag
+        fields = ['name', 'color']
+        widgets = {
+            'color': forms.TextInput(attrs={'type': 'color'}),
+        }
\ No newline at end of file
diff --git a/dashboard/taskmaster/models.py b/dashboard/taskmaster/models.py
new file mode 100644
index 0000000..f4e1027
--- /dev/null
+++ b/dashboard/taskmaster/models.py
@@ -0,0 +1,64 @@
+from django.db import models
+from django.contrib.auth.models import User
+from django.utils import timezone
+
+
+class TaskStatus(models.TextChoices):
+    PENDING = 'pending', 'Pending'
+    IN_PROGRESS = 'in_progress', 'In Progress'
+    COMPLETED = 'completed', 'Completed'
+    CANCELED = 'canceled', 'Canceled'
+
+
+class TaskPriority(models.TextChoices):
+    LOW = 'low', 'Low'
+    MEDIUM = 'medium', 'Medium'
+    HIGH = 'high', 'High'
+    URGENT = 'urgent', 'Urgent'
+
+
+class Task(models.Model):
+    title = models.CharField(max_length=200)
+    description = models.TextField(blank=True, null=True)
+    status = models.CharField(
+        max_length=20,
+        choices=TaskStatus.choices,
+        default=TaskStatus.PENDING
+    )
+    priority = models.CharField(
+        max_length=20,
+        choices=TaskPriority.choices,
+        default=TaskPriority.MEDIUM
+    )
+    due_date = models.DateTimeField(blank=True, null=True)
+    created_at = models.DateTimeField(auto_now_add=True)
+    updated_at = models.DateTimeField(auto_now=True)
+    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='tasks')
+    
+    def __str__(self):
+        return self.title
+    
+    @property
+    def is_overdue(self):
+        if self.due_date and self.status != TaskStatus.COMPLETED:
+            return self.due_date < timezone.now()
+        return False
+
+
+class TaskTag(models.Model):
+    name = models.CharField(max_length=50, unique=True)
+    color = models.CharField(max_length=7, default="#1a73e8")  # Hex color code
+    
+    def __str__(self):
+        return self.name
+
+
+class TaskTagAssignment(models.Model):
+    task = models.ForeignKey(Task, on_delete=models.CASCADE, related_name='tag_assignments')
+    tag = models.ForeignKey(TaskTag, on_delete=models.CASCADE, related_name='task_assignments')
+    
+    class Meta:
+        unique_together = ('task', 'tag')
+    
+    def __str__(self):
+        return f"{self.task.title} - {self.tag.name}"
\ No newline at end of file
diff --git a/dashboard/taskmaster/urls.py b/dashboard/taskmaster/urls.py
new file mode 100644
index 0000000..ae3c308
--- /dev/null
+++ b/dashboard/taskmaster/urls.py
@@ -0,0 +1,21 @@
+from django.urls import path
+from . import views
+
+app_name = 'taskmaster'
+
+urlpatterns = [
+    # Task URLs
+    path('', views.dashboard, name='dashboard'),
+    path('tasks/', views.task_list, name='task_list'),
+    path('tasks/create/', views.task_create, name='task_create'),
+    path('tasks/<int:pk>/', views.task_detail, name='task_detail'),
+    path('tasks/<int:pk>/update/', views.task_update, name='task_update'),
+    path('tasks/<int:pk>/delete/', views.task_delete, name='task_delete'),
+    path('tasks/<int:pk>/toggle-status/', views.task_toggle_status, name='task_toggle_status'),
+    
+    # Tag URLs
+    path('tags/', views.tag_list, name='tag_list'),
+    path('tags/create/', views.tag_create, name='tag_create'),
+    path('tags/<int:pk>/update/', views.tag_update, name='tag_update'),
+    path('tags/<int:pk>/delete/', views.tag_delete, name='tag_delete'),
+]
\ No newline at end of file
diff --git a/dashboard/taskmaster/views.py b/dashboard/taskmaster/views.py
new file mode 100644
index 0000000..9e3f585
--- /dev/null
+++ b/dashboard/taskmaster/views.py
@@ -0,0 +1,212 @@
+from django.shortcuts import render, redirect, get_object_or_404
+from django.contrib.auth.decorators import login_required
+from django.contrib import messages
+from django.utils import timezone
+from django.db.models import Q
+from .models import Task, TaskTag, TaskTagAssignment, TaskStatus
+from .forms import TaskForm, TaskTagForm
+
+
+@login_required
+def task_list(request):
+    tasks = Task.objects.filter(user=request.user).order_by('-created_at')
+    
+    # Filter options
+    status_filter = request.GET.get('status', '')
+    priority_filter = request.GET.get('priority', '')
+    search_query = request.GET.get('search', '')
+    
+    if status_filter:
+        tasks = tasks.filter(status=status_filter)
+    
+    if priority_filter:
+        tasks = tasks.filter(priority=priority_filter)
+    
+    if search_query:
+        tasks = tasks.filter(
+            Q(title__icontains=search_query) | 
+            Q(description__icontains=search_query)
+        )
+    
+    pending_tasks = tasks.filter(status=TaskStatus.PENDING)
+    in_progress_tasks = tasks.filter(status=TaskStatus.IN_PROGRESS)
+    completed_tasks = tasks.filter(status=TaskStatus.COMPLETED)
+    
+    context = {
+        'pending_tasks': pending_tasks,
+        'in_progress_tasks': in_progress_tasks,
+        'completed_tasks': completed_tasks,
+        'status_filter': status_filter,
+        'priority_filter': priority_filter,
+        'search_query': search_query,
+    }
+    
+    return render(request, 'dashboard/taskmaster/task_list.html', context)
+
+
+@login_required
+def task_detail(request, pk):
+    task = get_object_or_404(Task, pk=pk, user=request.user)
+    return render(request, 'dashboard/taskmaster/task_detail.html', {'task': task})
+
+
+@login_required
+def task_create(request):
+    if request.method == 'POST':
+        form = TaskForm(request.POST)
+        if form.is_valid():
+            task = form.save(commit=False)
+            task.user = request.user
+            task.save()
+            
+            # Handle tags
+            tags = form.cleaned_data.get('tags')
+            if tags:
+                for tag in tags:
+                    TaskTagAssignment.objects.create(task=task, tag=tag)
+            
+            messages.success(request, 'Task created successfully.')
+            return redirect('dashboard:taskmaster:task_detail', pk=task.pk)
+    else:
+        form = TaskForm()
+    
+    return render(request, 'dashboard/taskmaster/task_form.html', {'form': form})
+
+
+@login_required
+def task_update(request, pk):
+    task = get_object_or_404(Task, pk=pk, user=request.user)
+    
+    if request.method == 'POST':
+        form = TaskForm(request.POST, instance=task)
+        if form.is_valid():
+            task = form.save()
+            
+            # Handle tags - first remove existing
+            TaskTagAssignment.objects.filter(task=task).delete()
+            
+            # Add new tags
+            tags = form.cleaned_data.get('tags')
+            if tags:
+                for tag in tags:
+                    TaskTagAssignment.objects.create(task=task, tag=tag)
+            
+            messages.success(request, 'Task updated successfully.')
+            return redirect('dashboard:taskmaster:task_detail', pk=task.pk)
+    else:
+        form = TaskForm(instance=task)
+    
+    return render(request, 'dashboard/taskmaster/task_form.html', {'form': form, 'task': task})
+
+
+@login_required
+def task_delete(request, pk):
+    task = get_object_or_404(Task, pk=pk, user=request.user)
+    
+    if request.method == 'POST':
+        task.delete()
+        messages.success(request, 'Task deleted successfully.')
+        return redirect('dashboard:taskmaster:task_list')
+    
+    return render(request, 'dashboard/taskmaster/task_confirm_delete.html', {'task': task})
+
+
+@login_required
+def task_toggle_status(request, pk):
+    task = get_object_or_404(Task, pk=pk, user=request.user)
+    
+    if task.status == TaskStatus.COMPLETED:
+        task.status = TaskStatus.PENDING
+        messages.success(request, 'Task marked as pending.')
+    else:
+        task.status = TaskStatus.COMPLETED
+        messages.success(request, 'Task marked as completed.')
+    
+    task.save()
+    return redirect('dashboard:taskmaster:task_list')
+
+
+@login_required
+def tag_list(request):
+    tags = TaskTag.objects.all().order_by('name')
+    return render(request, 'dashboard/taskmaster/tag_list.html', {'tags': tags})
+
+
+@login_required
+def tag_create(request):
+    if request.method == 'POST':
+        form = TaskTagForm(request.POST)
+        if form.is_valid():
+            form.save()
+            messages.success(request, 'Tag created successfully.')
+            return redirect('dashboard:taskmaster:tag_list')
+    else:
+        form = TaskTagForm()
+    
+    return render(request, 'dashboard/taskmaster/tag_form.html', {'form': form})
+
+
+@login_required
+def tag_update(request, pk):
+    tag = get_object_or_404(TaskTag, pk=pk)
+    
+    if request.method == 'POST':
+        form = TaskTagForm(request.POST, instance=tag)
+        if form.is_valid():
+            form.save()
+            messages.success(request, 'Tag updated successfully.')
+            return redirect('dashboard:taskmaster:tag_list')
+    else:
+        form = TaskTagForm(instance=tag)
+    
+    return render(request, 'dashboard/taskmaster/tag_form.html', {'form': form, 'tag': tag})
+
+
+@login_required
+def tag_delete(request, pk):
+    tag = get_object_or_404(TaskTag, pk=pk)
+    
+    if request.method == 'POST':
+        tag.delete()
+        messages.success(request, 'Tag deleted successfully.')
+        return redirect('dashboard:taskmaster:tag_list')
+    
+    return render(request, 'dashboard/taskmaster/tag_confirm_delete.html', {'tag': tag})
+
+
+@login_required
+def dashboard(request):
+    # Task statistics
+    total_tasks = Task.objects.filter(user=request.user).count()
+    completed_tasks = Task.objects.filter(user=request.user, status=TaskStatus.COMPLETED).count()
+    pending_tasks = Task.objects.filter(user=request.user, status=TaskStatus.PENDING).count()
+    in_progress_tasks = Task.objects.filter(user=request.user, status=TaskStatus.IN_PROGRESS).count()
+    
+    # Overdue tasks
+    overdue_tasks = Task.objects.filter(
+        user=request.user,
+        due_date__lt=timezone.now(),
+        status__in=[TaskStatus.PENDING, TaskStatus.IN_PROGRESS]
+    )
+    
+    # Due soon tasks (within the next 24 hours)
+    due_soon_tasks = Task.objects.filter(
+        user=request.user,
+        due_date__range=[timezone.now(), timezone.now() + timezone.timedelta(days=1)],
+        status__in=[TaskStatus.PENDING, TaskStatus.IN_PROGRESS]
+    )
+    
+    # Recent tasks
+    recent_tasks = Task.objects.filter(user=request.user).order_by('-created_at')[:5]
+    
+    context = {
+        'total_tasks': total_tasks,
+        'completed_tasks': completed_tasks,
+        'pending_tasks': pending_tasks,
+        'in_progress_tasks': in_progress_tasks,
+        'overdue_tasks': overdue_tasks,
+        'due_soon_tasks': due_soon_tasks,
+        'recent_tasks': recent_tasks,
+    }
+    
+    return render(request, 'dashboard/taskmaster/dashboard.html', context)
\ No newline at end of file
diff --git a/dashboard/templates/base.html b/dashboard/templates/base.html
new file mode 100644
index 0000000..27ccba3
--- /dev/null
+++ b/dashboard/templates/base.html
@@ -0,0 +1,189 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>{% block title %}Social Cube{% endblock %}</title>
+    
+    <!-- Bootstrap CSS -->
+    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
+    
+    <!-- Bootstrap Icons -->
+    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
+    
+    <!-- Tailwind CSS -->
+    <script src="https://cdn.tailwindcss.com"></script>
+    <script>
+        tailwind.config = {
+            theme: {
+                extend: {
+                    colors: {
+                        primary: '#5865F2',
+                        secondary: '#23272A',
+                        success: '#57F287',
+                        danger: '#ED4245',
+                        warning: '#FEE75C',
+                        info: '#5865F2',
+                    }
+                }
+            }
+        }
+    </script>
+    
+    <!-- Custom styles -->
+    <style>
+        body {
+            background-color: #f9fafb;
+            color: #111827;
+        }
+        
+        .navbar-social-cube {
+            background: linear-gradient(90deg, #5865F2 0%, #7289DA 100%);
+        }
+        
+        .btn-primary-gradient {
+            background: linear-gradient(to right, #5865F2, #7289DA);
+            border: none;
+            color: white;
+        }
+        
+        .btn-primary-gradient:hover {
+            background: linear-gradient(to right, #4752c4, #5d73c7);
+            color: white;
+        }
+        
+        .card-hover:hover {
+            transform: translateY(-5px);
+            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
+        }
+        
+        /* Animations */
+        .fade-in {
+            animation: fadeIn 0.5s ease-in;
+        }
+        
+        @keyframes fadeIn {
+            from { opacity: 0; }
+            to { opacity: 1; }
+        }
+        
+        .slide-in {
+            animation: slideIn 0.5s ease-out;
+        }
+        
+        @keyframes slideIn {
+            from { transform: translateY(20px); opacity: 0; }
+            to { transform: translateY(0); opacity: 1; }
+        }
+    </style>
+    
+    {% block extra_css %}{% endblock %}
+</head>
+<body>
+    <!-- Navigation -->
+    <nav class="navbar navbar-expand-lg navbar-dark navbar-social-cube">
+        <div class="container">
+            <a class="navbar-brand fw-bold" href="/">
+                <i class="bi bi-boxes me-2"></i>Social Cube
+            </a>
+            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
+                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
+                <span class="navbar-toggler-icon"></span>
+            </button>
+            <div class="collapse navbar-collapse" id="navbarNav">
+                <ul class="navbar-nav me-auto">
+                    <li class="nav-item">
+                        <a class="nav-link" href="{% url 'dashboard:index' %}">Dashboard</a>
+                    </li>
+                    <li class="nav-item">
+                        <a class="nav-link" href="{% url 'dashboard:bot:list' %}">Bots</a>
+                    </li>
+                    <li class="nav-item">
+                        <a class="nav-link" href="{% url 'dashboard:stats' %}">Stats</a>
+                    </li>
+                </ul>
+                <div class="d-flex">
+                    {% if user.is_authenticated %}
+                        <div class="dropdown">
+                            <button class="btn btn-outline-light dropdown-toggle" type="button" id="userDropdown" 
+                                    data-bs-toggle="dropdown" aria-expanded="false">
+                                <i class="bi bi-person-circle me-1"></i>{{ user.username }}
+                            </button>
+                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
+                                <li><a class="dropdown-item" href="#"><i class="bi bi-gear me-2"></i>Settings</a></li>
+                                <li><hr class="dropdown-divider"></li>
+                                <li><a class="dropdown-item" href="{% url 'dashboard:logout' %}"><i class="bi bi-box-arrow-right me-2"></i>Logout</a></li>
+                            </ul>
+                        </div>
+                    {% else %}
+                        <a href="{% url 'login' %}" class="btn btn-outline-light me-2">
+                            <i class="bi bi-box-arrow-in-right me-1"></i>Login
+                        </a>
+                        <a href="#" class="btn btn-light">
+                            <i class="bi bi-person-plus me-1"></i>Register
+                        </a>
+                    {% endif %}
+                </div>
+            </div>
+        </div>
+    </nav>
+
+    <!-- Flash Messages -->
+    {% if messages and not hide_messages %}
+    <div class="container mt-3">
+        {% for message in messages %}
+        <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
+            {{ message }}
+            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
+        </div>
+        {% endfor %}
+    </div>
+    {% endif %}
+
+    <!-- Main Content -->
+    <main class="py-4">
+        {% block content %}{% endblock %}
+    </main>
+
+    <!-- Footer -->
+    <footer class="bg-gray-100 py-4 mt-5">
+        <div class="container">
+            <div class="row">
+                <div class="col-md-6 text-center text-md-start">
+                    <p class="mb-0 text-muted">&copy; {% now "Y" %} Social Cube. All rights reserved.</p>
+                </div>
+                <div class="col-md-6 text-center text-md-end">
+                    <a href="#" class="text-decoration-none text-muted mx-2">Privacy Policy</a>
+                    <a href="#" class="text-decoration-none text-muted mx-2">Terms of Service</a>
+                    <a href="#" class="text-decoration-none text-muted mx-2">Support</a>
+                </div>
+            </div>
+        </div>
+    </footer>
+
+    <!-- Bootstrap Bundle with Popper -->
+    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
+    
+    <!-- Common JavaScript -->
+    <script>
+        // Enable all Bootstrap tooltips
+        document.addEventListener('DOMContentLoaded', function() {
+            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
+            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
+                return new bootstrap.Tooltip(tooltipTriggerEl);
+            });
+            
+            // Auto-close alerts after 5 seconds
+            setTimeout(function() {
+                var alerts = document.querySelectorAll('.alert');
+                alerts.forEach(function(alert) {
+                    var bsAlert = new bootstrap.Alert(alert);
+                    bsAlert.close();
+                });
+            }, 5000);
+        });
+    </script>
+    
+    {% block extra_js %}{% endblock %}
+</body>
+</html>
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/base.html b/dashboard/templates/dashboard/base.html
new file mode 100644
index 0000000..16f9361
--- /dev/null
+++ b/dashboard/templates/dashboard/base.html
@@ -0,0 +1,179 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="zh-TW" data-bs-theme="light">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <meta http-equiv="X-UA-Compatible" content="ie=edge">
+    <title>{% block title %}Social Cube{% endblock %}</title>
+    <meta name="description" content="{% block meta_description %}Social Cube - 您的社群媒體管理平台{% endblock %}">
+    
+    <!-- Favicon -->
+    <link rel="icon" type="image/png" href="{% static 'img/favicon.png' %}">
+    
+    <!-- Bootstrap 5 CSS -->
+    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
+    
+    <!-- Font Awesome -->
+    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
+    
+    <!-- Custom CSS -->
+    <link href="{% static 'css/style.css' %}" rel="stylesheet">
+    
+    {% block extra_css %}{% endblock %}
+</head>
+<body class="bg-light">
+    <!-- Loading Overlay -->
+    <div id="loading-overlay" class="position-fixed w-100 h-100 bg-white d-none" style="z-index: 9999;">
+        <div class="position-absolute top-50 start-50 translate-middle">
+            <div class="spinner-border text-primary" role="status">
+                <span class="visually-hidden">Loading...</span>
+            </div>
+        </div>
+    </div>
+
+    <!-- Navigation -->
+    <nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
+        <div class="container-fluid">
+            <a class="navbar-brand" href="{% url 'dashboard:index' %}">
+                <img src="{% static 'img/logo.png' %}" alt="Social Cube" height="30">
+            </a>
+            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
+                <span class="navbar-toggler-icon"></span>
+            </button>
+            
+            <div class="collapse navbar-collapse" id="navbarNav">
+                <ul class="navbar-nav me-auto">
+                    <li class="nav-item">
+                        <a class="nav-link {% if request.resolver_match.url_name == 'index' %}active{% endif %}" 
+                           href="{% url 'dashboard:index' %}">
+                            <i class="fas fa-chart-line"></i> 儀表板
+                        </a>
+                    </li>
+                    <li class="nav-item">
+                        <a class="nav-link {% if request.resolver_match.url_name == 'bot:list' %}active{% endif %}" 
+                           href="{% url 'dashboard:bot:list' %}">
+                            <i class="fas fa-robot"></i> 機器人
+                        </a>
+                    </li>
+                </ul>
+                
+                <!-- User Menu -->
+                {% if user.is_authenticated %}
+                <div class="dropdown">
+                    <button class="btn btn-link text-dark dropdown-toggle" type="button" id="userMenu" 
+                            data-bs-toggle="dropdown" aria-expanded="false">
+                        <img src="{{ user.profile_image|default:'static/img/default-avatar.png' }}" 
+                             class="rounded-circle" width="32" height="32" alt="{{ user.username }}">
+                        {{ user.username }}
+                    </button>
+                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenu">
+                        <li><a class="dropdown-item" href="{% url 'dashboard:index' %}">
+                            <i class="fas fa-user me-2"></i>個人資料
+                        </a></li>
+                        <li><a class="dropdown-item" href="{% url 'dashboard:index' %}">
+                            <i class="fas fa-cog me-2"></i>設定
+                        </a></li>
+                        <li><hr class="dropdown-divider"></li>
+                        <li><a class="dropdown-item" href="{% url 'dashboard:logout' %}">
+                            <i class="fas fa-sign-out-alt me-2"></i>登出
+                        </a></li>
+                    </ul>
+                </div>
+                {% else %}
+                <div class="d-flex">
+                    <a href="{% url 'dashboard:oauth2_login' %}" class="btn btn-outline-primary me-2">登入</a>
+                    <a href="{% url 'dashboard:oauth2_login' %}" class="btn btn-primary">註冊</a>
+                </div>
+                {% endif %}
+                
+                <!-- Theme Toggle -->
+                <button class="btn btn-link ms-3" id="themeToggle">
+                    <i class="fas fa-moon"></i>
+                </button>
+            </div>
+        </div>
+    </nav>
+
+    <!-- Flash Messages -->
+    {% if messages %}
+    <div class="container mt-3">
+        {% for message in messages %}
+        <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
+            {{ message }}
+            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
+        </div>
+        {% endfor %}
+    </div>
+    {% endif %}
+
+    <!-- Main Content -->
+    <main class="container-fluid py-4">
+        {% block content %}{% endblock %}
+    </main>
+
+    <!-- Footer -->
+    <footer class="footer mt-auto py-3 bg-white border-top">
+        <div class="container">
+            <div class="row">
+                <div class="col-md-6">
+                    <p class="mb-0 text-muted">&copy; {% now "Y" %} Social Cube. All rights reserved.</p>
+                </div>
+                <div class="col-md-6 text-md-end">
+                    <a href="#" class="text-muted text-decoration-none me-3">隱私權政策</a>
+                    <a href="#" class="text-muted text-decoration-none me-3">服務條款</a>
+                    <a href="#" class="text-muted text-decoration-none">聯絡我們</a>
+                </div>
+            </div>
+        </div>
+    </footer>
+
+    <!-- Bootstrap JS Bundle -->
+    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
+    
+    <!-- Custom JS -->
+    <script>
+        // Theme Toggle
+        document.getElementById('themeToggle').addEventListener('click', function() {
+            const html = document.documentElement;
+            const icon = this.querySelector('i');
+            
+            if (html.getAttribute('data-bs-theme') === 'dark') {
+                html.setAttribute('data-bs-theme', 'light');
+                icon.classList.replace('fa-sun', 'fa-moon');
+            } else {
+                html.setAttribute('data-bs-theme', 'dark');
+                icon.classList.replace('fa-moon', 'fa-sun');
+            }
+            
+            localStorage.setItem('theme', html.getAttribute('data-bs-theme'));
+        });
+
+        // Load saved theme
+        document.addEventListener('DOMContentLoaded', function() {
+            const savedTheme = localStorage.getItem('theme') || 'light';
+            document.documentElement.setAttribute('data-bs-theme', savedTheme);
+            const icon = document.querySelector('#themeToggle i');
+            icon.classList.replace('fa-moon', savedTheme === 'dark' ? 'fa-sun' : 'fa-moon');
+        });
+
+        // Loading overlay
+        window.showLoading = function() {
+            document.getElementById('loading-overlay').classList.remove('d-none');
+        };
+        
+        window.hideLoading = function() {
+            document.getElementById('loading-overlay').classList.add('d-none');
+        };
+
+        // Auto-hide alerts after 5 seconds
+        document.querySelectorAll('.alert').forEach(function(alert) {
+            setTimeout(function() {
+                new bootstrap.Alert(alert).close();
+            }, 5000);
+        });
+    </script>
+    
+    {% block extra_js %}{% endblock %}
+</body>
+</html>
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/bot_add.html b/dashboard/templates/dashboard/bot_add.html
new file mode 100644
index 0000000..5a13783
--- /dev/null
+++ b/dashboard/templates/dashboard/bot_add.html
@@ -0,0 +1,298 @@
+{% extends 'dashboard/base.html' %}
+{% load static %}
+
+{% block title %}Add Bot - Social Cube{% endblock %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-8">
+    <div class="max-w-2xl mx-auto">
+        <div class="mb-8">
+            <h1 class="text-3xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent mb-2">Add Discord Bot</h1>
+            <p class="text-gray-600">Configure your Discord bot and start managing it immediately</p>
+        </div>
+
+        <div class="bg-white rounded-xl shadow-md p-8 border border-gray-100">
+            <form method="POST" id="botAddForm">
+                {% csrf_token %}
+                
+                <!-- Bot Token -->
+                <div class="mb-6">
+                    <label for="token" class="block text-sm font-medium text-gray-700 mb-2 flex justify-between items-center">
+                        Bot Token <span class="text-red-500">*</span>
+                        <a href="#" class="text-indigo-500 hover:text-indigo-700 flex items-center" data-bs-toggle="tooltip" 
+                           title="Find this in Discord Developer Portal">
+                            <i class="bi bi-info-circle me-1"></i> Help
+                        </a>
+                    </label>
+                    <div class="mt-1 relative rounded-md shadow-sm">
+                        <input type="password" name="token" id="token" required
+                            class="block w-full pr-10 border-gray-200 rounded-lg py-3 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition-all"
+                            placeholder="Enter your bot token">
+                        <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
+                            <button type="button" id="toggleToken" class="text-gray-400 hover:text-indigo-600 transition-colors">
+                                <i class="bi bi-eye text-lg"></i>
+                            </button>
+                        </div>
+                    </div>
+                </div>
+
+                <!-- Bot Name -->
+                <div class="mb-6">
+                    <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
+                        Bot Name <span class="text-red-500">*</span>
+                    </label>
+                    <input type="text" name="name" id="name" required
+                        class="block w-full border-gray-200 rounded-lg py-3 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition-all"
+                        placeholder="Enter bot name"
+                        maxlength="32"
+                        oninput="updatePreview('name', this.value)">
+                    <p class="mt-1 text-sm text-gray-500">This will be displayed in your dashboard</p>
+                </div>
+
+                <!-- Bot Description -->
+                <div class="mb-6">
+                    <label for="description" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
+                    <textarea name="description" id="description" rows="3"
+                        class="block w-full border-gray-200 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition-all"
+                        placeholder="Enter a brief description of your bot"
+                        oninput="updatePreview('description', this.value)"></textarea>
+                </div>
+
+                <!-- Application Commands -->
+                <div class="mb-6">
+                    <label class="block text-sm font-medium text-gray-700 mb-2 flex justify-between items-center">
+                        Application Commands <span class="text-red-500">*</span>
+                        <a href="https://discord.com/developers/docs/interactions/application-commands" target="_blank" class="text-indigo-500 hover:text-indigo-700 flex items-center" data-bs-toggle="tooltip" 
+                           title="Discord's modern way to interact with bots using slash commands">
+                            <i class="bi bi-info-circle me-1"></i> Help
+                        </a>
+                    </label>
+                    <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
+                        <div class="flex items-center mb-3">
+                            <input type="checkbox" name="use_slash_commands" id="use_slash_commands" checked
+                                class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
+                            <label for="use_slash_commands" class="ml-2 block text-sm text-gray-700">
+                                <span class="font-medium">Slash Commands</span> <span class="text-xs text-gray-500">(e.g., /help, /status)</span>
+                            </label>
+                        </div>
+                        <div class="flex items-center mb-3">
+                            <input type="checkbox" name="use_user_commands" id="use_user_commands"
+                                class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
+                            <label for="use_user_commands" class="ml-2 block text-sm text-gray-700">
+                                <span class="font-medium">User Commands</span> <span class="text-xs text-gray-500">(right-click on users)</span>
+                            </label>
+                        </div>
+                        <div class="flex items-center">
+                            <input type="checkbox" name="use_message_commands" id="use_message_commands"
+                                class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
+                            <label for="use_message_commands" class="ml-2 block text-sm text-gray-700">
+                                <span class="font-medium">Message Commands</span> <span class="text-xs text-gray-500">(right-click on messages)</span>
+                            </label>
+                        </div>
+                    </div>
+                    <p class="mt-1 text-sm text-gray-500">Modern Discord bots use Application Commands instead of prefixes</p>
+                </div>
+
+                <!-- Preview Card -->
+                <div class="mb-8 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 border border-gray-200">
+                    <h5 class="text-sm uppercase text-gray-500 mb-3 tracking-wider">Preview</h5>
+                    <div class="flex items-center mb-4">
+                        <div class="w-14 h-14 rounded-full mr-4 bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center text-white overflow-hidden">
+                            <img src="https://cdn.discordapp.com/embed/avatars/0.png" 
+                                alt="Bot Avatar" 
+                                class="w-full h-full object-cover">
+                        </div>
+                        <div>
+                            <h6 class="font-medium text-gray-900 text-lg mb-0" id="previewName">Your Bot Name</h6>
+                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">Application Commands</span>
+                        </div>
+                    </div>
+                    <p class="text-sm text-gray-600 mb-0" id="previewDescription">Your bot description will appear here</p>
+                </div>
+
+                <!-- Submit Button -->
+                <div class="pt-2">
+                    <button type="submit"
+                        class="w-full flex justify-center py-3 px-4 rounded-lg text-sm font-medium text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md transition-all">
+                        <i class="bi bi-plus-circle me-2"></i>Add Bot
+                    </button>
+                </div>
+            </form>
+        </div>
+
+        <!-- Help Section -->
+        <div class="mt-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-7 border border-blue-100 shadow-sm">
+            <div class="flex items-center mb-4">
+                <div class="rounded-full bg-blue-100 p-2 mr-3">
+                    <i class="bi bi-lightbulb text-blue-600 text-lg"></i>
+                </div>
+                <h2 class="text-lg font-semibold text-gray-800">How to Add Your Bot</h2>
+            </div>
+            
+            <ol class="ml-8 space-y-4 text-gray-700">
+                <li class="flex items-start">
+                    <span class="inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-200 text-blue-800 text-sm font-medium mr-3 mt-0.5">1</span>
+                    <span>Go to the <a href="https://discord.com/developers/applications" target="_blank" rel="noopener noreferrer" class="text-indigo-600 hover:text-indigo-800 font-medium">Discord Developer Portal</a></span>
+                </li>
+                <li class="flex items-start">
+                    <span class="inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-200 text-blue-800 text-sm font-medium mr-3 mt-0.5">2</span>
+                    <span>Create a new application or select an existing one</span>
+                </li>
+                <li class="flex items-start">
+                    <span class="inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-200 text-blue-800 text-sm font-medium mr-3 mt-0.5">3</span>
+                    <span>Go to the "Bot" section and click "Add Bot" if you haven't already</span>
+                </li>
+                <li class="flex items-start">
+                    <span class="inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-200 text-blue-800 text-sm font-medium mr-3 mt-0.5">4</span>
+                    <span>Click "Reset Token" to reveal your bot token</span>
+                </li>
+                <li class="flex items-start">
+                    <span class="inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-200 text-blue-800 text-sm font-medium mr-3 mt-0.5">5</span>
+                    <span>Copy the token and paste it in the form above</span>
+                </li>
+                <li class="flex items-start">
+                    <span class="inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-200 text-blue-800 text-sm font-medium mr-3 mt-0.5">6</span>
+                    <span>In the "Bot" section, ensure "MESSAGE CONTENT INTENT" is enabled if your bot needs to read message content</span>
+                </li>
+                <li class="flex items-start">
+                    <span class="inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-200 text-blue-800 text-sm font-medium mr-3 mt-0.5">7</span>
+                    <span>In the "OAuth2" section, add the <code>applications.commands</code> scope when creating invite links</span>
+                </li>
+            </ol>
+        </div>
+    </div>
+</div>
+
+<!-- Messages -->
+{% if messages %}
+<div class="fixed bottom-5 right-5 p-4 z-50">
+    {% for message in messages %}
+    <div class="bg-white rounded-lg shadow-lg mb-4 overflow-hidden max-w-md animate-slide-up transform transition-all">
+        <div class="px-4 py-3 {% if message.tags == 'success' %}bg-gradient-to-r from-green-500 to-green-600{% elif message.tags == 'error' %}bg-gradient-to-r from-red-500 to-red-600{% else %}bg-gradient-to-r from-gray-500 to-gray-600{% endif %} text-white flex justify-between items-center">
+            <strong>{{ message.tags|title }}</strong>
+            <button type="button" class="text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">
+                <i class="bi bi-x-lg"></i>
+            </button>
+        </div>
+        <div class="px-4 py-3">
+            {{ message }}
+        </div>
+    </div>
+    {% endfor %}
+</div>
+{% endif %}
+{% endblock %}
+
+{% block extra_js %}
+<script>
+document.addEventListener('DOMContentLoaded', function() {
+    // Initialize tooltips
+    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
+    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
+        return new bootstrap.Tooltip(tooltipTriggerEl);
+    });
+
+    // Toggle token visibility
+    const toggleToken = document.getElementById('toggleToken');
+    const tokenInput = document.getElementById('token');
+
+    toggleToken.addEventListener('click', function() {
+        const type = tokenInput.getAttribute('type') === 'password' ? 'text' : 'password';
+        tokenInput.setAttribute('type', type);
+        this.innerHTML = `<i class="bi bi-eye${type === 'password' ? '' : '-slash'} text-lg"></i>`;
+    });
+
+    // Auto-hide messages after 5 seconds
+    setTimeout(function() {
+        document.querySelectorAll('.animate-slide-up').forEach(function(el) {
+            el.style.transition = 'all 0.5s ease-in-out';
+            el.style.transform = 'translateY(100%)';
+            el.style.opacity = '0';
+            setTimeout(() => el.remove(), 500);
+        });
+    }, 5000);
+});
+
+// Preview updates
+function updatePreview(field, value) {
+    switch(field) {
+        case 'name':
+            document.getElementById('previewName').textContent = value || 'Your Bot Name';
+            break;
+        case 'description':
+            document.getElementById('previewDescription').textContent = value || 'Your bot description will appear here';
+            break;
+    }
+}
+
+// Form validation with enhanced error messages
+document.getElementById('botAddForm').addEventListener('submit', function(e) {
+    const token = document.getElementById('token').value;
+    const name = document.getElementById('name').value;
+
+    if (!token || !name) {
+        e.preventDefault();
+        
+        const messagesContainer = document.querySelector('.fixed.bottom-5.right-5');
+        if (!messagesContainer) {
+            const container = document.createElement('div');
+            container.className = 'fixed bottom-5 right-5 p-4 z-50';
+            document.body.appendChild(container);
+        }
+        
+        const message = document.createElement('div');
+        message.className = 'bg-white rounded-lg shadow-lg mb-4 overflow-hidden max-w-md animate-slide-up transform transition-all';
+        message.innerHTML = `
+            <div class="px-4 py-3 bg-gradient-to-r from-red-500 to-red-600 text-white flex justify-between items-center">
+                <strong>Error</strong>
+                <button type="button" class="text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">
+                    <i class="bi bi-x-lg"></i>
+                </button>
+            </div>
+            <div class="px-4 py-3">
+                ${!token ? 'Bot token is required.' : ''} 
+                ${!name ? 'Bot name is required.' : ''}
+                ${!token && !name ? 'Please fill in all required fields.' : ''}
+            </div>
+        `;
+        
+        const container = document.querySelector('.fixed.bottom-5.right-5') || messagesContainer;
+        container.appendChild(message);
+        
+        setTimeout(() => {
+            message.style.transition = 'all 0.5s ease-in-out';
+            message.style.transform = 'translateY(100%)';
+            message.style.opacity = '0';
+            setTimeout(() => message.remove(), 500);
+        }, 5000);
+    }
+});
+</script>
+
+<style>
+.animate-slide-up {
+    animation: slideUp 0.4s cubic-bezier(0.16, 1, 0.3, 1);
+}
+
+@keyframes slideUp {
+    from {
+        transform: translateY(20px);
+        opacity: 0;
+    }
+    to {
+        transform: translateY(0);
+        opacity: 1;
+    }
+}
+
+/* Input field focus effect */
+input:focus, textarea:focus {
+    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.15);
+}
+
+/* Smooth hover transitions */
+a, button {
+    transition: all 0.2s ease;
+}
+</style>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/bot_detail.html b/dashboard/templates/dashboard/bot_detail.html
new file mode 100644
index 0000000..8d2f777
--- /dev/null
+++ b/dashboard/templates/dashboard/bot_detail.html
@@ -0,0 +1,131 @@
+{% extends 'dashboard/base.html' %}
+
+{% block title %}{{ bot.name }} - Discord Bot Dashboard{% endblock %}
+
+{% block content %}
+<div class="row mb-4">
+    <div class="col">
+        <h1 class="h3">
+            <i class="bx bxs-bot"></i> {{ bot.name }}
+            <span class="badge {% if bot.status %}bg-success{% else %}bg-danger{% endif %}">
+                {{ bot.status|yesno:"Online,Offline" }}
+            </span>
+        </h1>
+        <p class="text-muted">{{ bot.description }}</p>
+    </div>
+    <div class="col-auto">
+        <div class="btn-group">
+            <button type="button" class="btn btn-primary">
+                <i class="bx bx-cog"></i> Settings
+            </button>
+            <button type="button" class="btn btn-danger">
+                <i class="bx bx-trash"></i> Delete
+            </button>
+        </div>
+    </div>
+</div>
+
+<div class="row g-4">
+    <!-- Servers Section -->
+    <div class="col-md-6">
+        <div class="card h-100">
+            <div class="card-header">
+                <h5 class="card-title mb-0">
+                    <i class="bx bxs-server"></i> Connected Servers
+                </h5>
+            </div>
+            <div class="card-body">
+                <div class="list-group">
+                    {% for server in servers %}
+                    <a href="#" class="list-group-item list-group-item-action">
+                        <div class="d-flex w-100 justify-content-between">
+                            <h6 class="mb-1">{{ server.name }}</h6>
+                            <small>{{ server.member_count }} members</small>
+                        </div>
+                    </a>
+                    {% empty %}
+                    <div class="text-center text-muted py-3">
+                        <i class="bx bx-server bx-lg"></i>
+                        <p class="mt-2">No servers connected yet</p>
+                    </div>
+                    {% endfor %}
+                </div>
+            </div>
+        </div>
+    </div>
+
+    <!-- Commands Section -->
+    <div class="col-md-6">
+        <div class="card h-100">
+            <div class="card-header">
+                <h5 class="card-title mb-0">
+                    <i class="bx bx-command"></i> Available Commands
+                </h5>
+            </div>
+            <div class="card-body">
+                <div class="list-group">
+                    {% for command in commands %}
+                    <div class="list-group-item">
+                        <div class="d-flex w-100 justify-content-between">
+                            <h6 class="mb-1">{{ command.name }}</h6>
+                            <small class="text-muted">{{ command.created_at|date }}</small>
+                        </div>
+                        <p class="mb-1">{{ command.description }}</p>
+                    </div>
+                    {% empty %}
+                    <div class="text-center text-muted py-3">
+                        <i class="bx bx-command bx-lg"></i>
+                        <p class="mt-2">No commands configured</p>
+                    </div>
+                    {% endfor %}
+                </div>
+            </div>
+        </div>
+    </div>
+
+    <!-- Logs Section -->
+    <div class="col-12">
+        <div class="card">
+            <div class="card-header">
+                <h5 class="card-title mb-0">
+                    <i class="bx bx-history"></i> Recent Activity
+                </h5>
+            </div>
+            <div class="card-body">
+                <div class="table-responsive">
+                    <table class="table table-hover">
+                        <thead>
+                            <tr>
+                                <th>Time</th>
+                                <th>Type</th>
+                                <th>Server</th>
+                                <th>Message</th>
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {% for log in logs %}
+                            <tr>
+                                <td>{{ log.created_at|date:"Y-m-d H:i:s" }}</td>
+                                <td>
+                                    <span class="badge {% if log.type == 'ERROR' %}bg-danger{% else %}bg-info{% endif %}">
+                                        {{ log.type }}
+                                    </span>
+                                </td>
+                                <td>{{ log.server.name }}</td>
+                                <td>{{ log.content }}</td>
+                            </tr>
+                            {% empty %}
+                            <tr>
+                                <td colspan="4" class="text-center text-muted py-3">
+                                    No activity logs available
+                                </td>
+                            </tr>
+                            {% endfor %}
+                        </tbody>
+                    </table>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %} 
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/bots.html b/dashboard/templates/dashboard/bots.html
new file mode 100644
index 0000000..bf51b74
--- /dev/null
+++ b/dashboard/templates/dashboard/bots.html
@@ -0,0 +1,114 @@
+{% extends 'dashboard/base.html' %}
+{% load static %}
+
+{% block title %}Manage Bots - Social Cube{% endblock %}
+
+{% block extra_css %}
+<style>
+.loading-overlay {
+    @apply absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center;
+    z-index: 1000;
+}
+</style>
+{% endblock %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-8">
+    <!-- Header Section -->
+    <div class="flex justify-between items-center mb-8">
+        <div>
+            <h1 class="text-3xl font-bold text-gray-900">Your Discord Bots</h1>
+            <p class="mt-1 text-gray-600">Manage and monitor your Discord bots</p>
+        </div>
+        <a href="{% url 'dashboard:bot:add' %}" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
+            <i class="fas fa-plus mr-2"></i>
+            Add New Bot
+        </a>
+    </div>
+
+    {% if messages %}
+    <div class="mb-8">
+        {% for message in messages %}
+        <div class="rounded-md p-4 {% if message.tags == 'success' %}bg-green-50 text-green-800{% elif message.tags == 'error' %}bg-red-50 text-red-800{% else %}bg-blue-50 text-blue-800{% endif %}">
+            {{ message }}
+        </div>
+        {% endfor %}
+    </div>
+    {% endif %}
+
+    {% if bots %}
+    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
+        {% for bot in bots %}
+        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-200 relative">
+            <div class="loading-overlay hidden">
+                <i class="fas fa-circle-notch fa-spin text-indigo-600 text-3xl"></i>
+            </div>
+            <div class="p-6">
+                <div class="flex justify-between items-start">
+                    <div>
+                        <h3 class="text-lg font-semibold text-gray-900">{{ bot.name }}</h3>
+                        <p class="mt-1 text-sm text-gray-500">{{ bot.description|default:"No description provided"|truncatechars:100 }}</p>
+                    </div>
+                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {% if bot.is_active %}bg-green-100 text-green-800{% else %}bg-red-100 text-red-800{% endif %}">
+                        {{ bot.is_active|yesno:"Active,Inactive" }}
+                    </span>
+                </div>
+
+                <div class="mt-4 grid grid-cols-2 gap-4">
+                    <div class="bg-gray-50 rounded p-3 text-center" data-tooltip="Total servers this bot has joined">
+                        <p class="text-sm font-medium text-gray-500">Servers</p>
+                        <p class="mt-1 text-lg font-semibold text-gray-900">{{ bot.servers.count }}</p>
+                    </div>
+                    <div class="bg-gray-50 rounded p-3 text-center" data-tooltip="Total commands available">
+                        <p class="text-sm font-medium text-gray-500">Commands</p>
+                        <p class="mt-1 text-lg font-semibold text-gray-900">{{ bot.commands.count }}</p>
+                    </div>
+                </div>
+
+                <div class="mt-6 flex space-x-3">
+                    <a href="{% url 'dashboard:bot:detail' bot.id %}" class="flex-1 inline-flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" data-tooltip="View detailed statistics and settings">
+                        <i class="fas fa-chart-line mr-2"></i>
+                        Details
+                    </a>
+                    <button 
+                        data-bot-id="{{ bot.id }}"
+                        onclick="toggleBotStatus({{ bot.id }}, {{ bot.is_active|yesno:'true,false' }})" 
+                        class="flex-1 inline-flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md {% if bot.is_active %}text-red-700 hover:bg-red-50{% else %}text-green-700 hover:bg-green-50{% endif %} bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
+                        data-tooltip="{% if bot.is_active %}Stop the bot{% else %}Start the bot{% endif %}">
+                        <i class="fas {% if bot.is_active %}fa-stop{% else %}fa-play{% endif %} mr-2"></i>
+                        {{ bot.is_active|yesno:"Stop,Start" }}
+                    </button>
+                </div>
+            </div>
+
+            <div class="bg-gray-50 px-6 py-3 flex justify-between items-center border-t border-gray-200">
+                <div class="text-sm text-gray-500" data-tooltip="Time since last activity">
+                    <i class="fas fa-clock mr-1"></i>
+                    Last active: {{ bot.last_active|timesince }} ago
+                </div>
+                <div class="text-sm text-gray-500" data-tooltip="Command prefix for this bot">
+                    <i class="fas fa-terminal mr-1"></i>
+                    Prefix: {{ bot.prefix }}
+                </div>
+            </div>
+        </div>
+        {% endfor %}
+    </div>
+    {% else %}
+    <div class="text-center py-12 bg-white rounded-lg shadow-sm border border-gray-200">
+        <i class="fas fa-robot text-6xl text-gray-400 mb-4"></i>
+        <h3 class="text-lg font-medium text-gray-900 mb-2">No Bots Added Yet</h3>
+        <p class="text-gray-500 mb-6">Get started by adding your first Discord bot</p>
+        <a href="{% url 'dashboard:bot:add' %}" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
+            <i class="fas fa-plus mr-2"></i>
+            Add Your First Bot
+        </a>
+    </div>
+    {% endif %}
+</div>
+
+{% endblock %}
+
+{% block extra_js %}
+<script src="{% static 'js/bot-management.js' %}"></script>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/commands.html b/dashboard/templates/dashboard/commands.html
new file mode 100644
index 0000000..f7566d0
--- /dev/null
+++ b/dashboard/templates/dashboard/commands.html
@@ -0,0 +1,539 @@
+{% extends 'base.html' %}
+
+{% block title %}Commands | Discord Bot Dashboard{% endblock %}
+
+{% block breadcrumb %}
+<nav aria-label="breadcrumb">
+  <ol class="breadcrumb">
+    <li class="breadcrumb-item"><a href="{% url 'dashboard:index' %}">Dashboard</a></li>
+    <li class="breadcrumb-item active" aria-current="page">Commands</li>
+  </ol>
+</nav>
+{% endblock %}
+
+{% block content %}
+<div class="container-fluid px-4">
+  <h1 class="mt-4">Command Management</h1>
+  
+  <!-- Search and filters -->
+  <div class="card mb-4">
+    <div class="card-body">
+      <div class="row align-items-center">
+        <div class="col-md-6">
+          <div class="input-group">
+            <input type="text" class="form-control" placeholder="Search commands..." id="searchCommands">
+            <button class="btn btn-primary" type="button"><i class="fas fa-search"></i></button>
+          </div>
+        </div>
+        <div class="col-md-6">
+          <div class="d-flex justify-content-md-end mt-3 mt-md-0">
+            <select class="form-select me-2" style="max-width: 200px;" id="botFilter">
+              <option value="">All Bots</option>
+              {% for bot in bots %}
+                <option value="{{ bot.id }}">{{ bot.name }}</option>
+              {% endfor %}
+            </select>
+            <select class="form-select" style="max-width: 200px;" id="categoryFilter">
+              <option value="">All Categories</option>
+              <option value="moderation">Moderation</option>
+              <option value="utility">Utility</option>
+              <option value="fun">Fun</option>
+              <option value="music">Music</option>
+            </select>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+
+  <!-- Command List -->
+  <div class="card mb-4">
+    <div class="card-header d-flex justify-content-between align-items-center">
+      <div>
+        <i class="fas fa-code me-1"></i>
+        Commands
+      </div>
+      <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addCommandModal">
+        <i class="fas fa-plus"></i> Add Command
+      </button>
+    </div>
+    <div class="card-body">
+      <div class="table-responsive">
+        <table class="table table-striped table-hover" id="commandsTable">
+          <thead>
+            <tr>
+              <th>Name</th>
+              <th>Description</th>
+              <th>Bot</th>
+              <th>Category</th>
+              <th>Usage Count</th>
+              <th>Status</th>
+              <th>Actions</th>
+            </tr>
+          </thead>
+          <tbody>
+            {% for command in commands %}
+            <tr>
+              <td><code>/{{ command.name }}</code></td>
+              <td>{{ command.description }}</td>
+              <td>{{ command.bot.name }}</td>
+              <td><span class="badge bg-{{ command.category_color }}">{{ command.category }}</span></td>
+              <td>{{ command.usage_count }}</td>
+              <td>
+                {% if command.is_enabled %}
+                <span class="badge bg-success">Enabled</span>
+                {% else %}
+                <span class="badge bg-danger">Disabled</span>
+                {% endif %}
+              </td>
+              <td>
+                <div class="btn-group btn-group-sm" role="group">
+                  <button type="button" class="btn btn-outline-primary edit-command" data-id="{{ command.id }}" data-bs-toggle="modal" data-bs-target="#editCommandModal">
+                    <i class="fas fa-edit"></i>
+                  </button>
+                  <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#commandStatsModal" data-id="{{ command.id }}">
+                    <i class="fas fa-chart-bar"></i>
+                  </button>
+                  <button type="button" class="btn btn-outline-danger delete-command" data-id="{{ command.id }}">
+                    <i class="fas fa-trash"></i>
+                  </button>
+                </div>
+              </td>
+            </tr>
+            {% empty %}
+            <tr>
+              <td colspan="7" class="text-center py-4">
+                <div class="empty-state">
+                  <i class="fas fa-code fa-3x text-secondary mb-3"></i>
+                  <h5>No commands found</h5>
+                  <p class="text-muted">Add commands to your bots to get started</p>
+                  <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCommandModal">
+                    <i class="fas fa-plus"></i> Add Your First Command
+                  </button>
+                </div>
+              </td>
+            </tr>
+            {% endfor %}
+          </tbody>
+        </table>
+      </div>
+
+      <!-- Pagination -->
+      {% if commands.has_other_pages %}
+      <nav aria-label="Commands pagination">
+        <ul class="pagination justify-content-center mt-4">
+          {% if commands.has_previous %}
+          <li class="page-item">
+            <a class="page-link" href="?page={{ commands.previous_page_number }}" aria-label="Previous">
+              <span aria-hidden="true">&laquo;</span>
+            </a>
+          </li>
+          {% else %}
+          <li class="page-item disabled">
+            <span class="page-link">&laquo;</span>
+          </li>
+          {% endif %}
+          
+          {% for i in commands.paginator.page_range %}
+            {% if commands.number == i %}
+              <li class="page-item active"><span class="page-link">{{ i }}</span></li>
+            {% else %}
+              <li class="page-item"><a class="page-link" href="?page={{ i }}">{{ i }}</a></li>
+            {% endif %}
+          {% endfor %}
+          
+          {% if commands.has_next %}
+          <li class="page-item">
+            <a class="page-link" href="?page={{ commands.next_page_number }}" aria-label="Next">
+              <span aria-hidden="true">&raquo;</span>
+            </a>
+          </li>
+          {% else %}
+          <li class="page-item disabled">
+            <span class="page-link">&raquo;</span>
+          </li>
+          {% endif %}
+        </ul>
+      </nav>
+      {% endif %}
+    </div>
+  </div>
+</div>
+
+<!-- Add Command Modal -->
+<div class="modal fade" id="addCommandModal" tabindex="-1" aria-labelledby="addCommandModalLabel" aria-hidden="true">
+  <div class="modal-dialog modal-lg">
+    <div class="modal-content">
+      <div class="modal-header">
+        <h5 class="modal-title" id="addCommandModalLabel">Add New Command</h5>
+        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
+      </div>
+      <div class="modal-body">
+        <form id="addCommandForm">
+          <div class="row mb-3">
+            <div class="col-md-6">
+              <label for="commandName" class="form-label">Command Name</label>
+              <div class="input-group">
+                <span class="input-group-text">/</span>
+                <input type="text" class="form-control" id="commandName" name="name" required>
+              </div>
+            </div>
+            <div class="col-md-6">
+              <label for="commandBot" class="form-label">Bot</label>
+              <select class="form-select" id="commandBot" name="bot_id" required>
+                <option value="">Select a bot</option>
+                {% for bot in bots %}
+                  <option value="{{ bot.id }}">{{ bot.name }}</option>
+                {% endfor %}
+              </select>
+            </div>
+          </div>
+          
+          <div class="mb-3">
+            <label for="commandDescription" class="form-label">Description</label>
+            <textarea class="form-control" id="commandDescription" name="description" rows="2" required></textarea>
+          </div>
+          
+          <div class="row mb-3">
+            <div class="col-md-6">
+              <label for="commandCategory" class="form-label">Category</label>
+              <select class="form-select" id="commandCategory" name="category">
+                <option value="utility">Utility</option>
+                <option value="moderation">Moderation</option>
+                <option value="fun">Fun</option>
+                <option value="music">Music</option>
+                <option value="other">Other</option>
+              </select>
+            </div>
+            <div class="col-md-6">
+              <label for="commandStatus" class="form-label">Status</label>
+              <select class="form-select" id="commandStatus" name="is_enabled">
+                <option value="true">Enabled</option>
+                <option value="false">Disabled</option>
+              </select>
+            </div>
+          </div>
+          
+          <div class="mb-3">
+            <label for="commandSyntax" class="form-label">Syntax</label>
+            <input type="text" class="form-control" id="commandSyntax" name="syntax" placeholder="e.g. /command [arg1] [arg2]">
+          </div>
+          
+          <div class="mb-3">
+            <label for="commandOptions" class="form-label">Command Options</label>
+            <div id="optionsContainer">
+              <div class="option-row row mb-2">
+                <div class="col-md-4">
+                  <input type="text" class="form-control" name="option_name[]" placeholder="Option name">
+                </div>
+                <div class="col-md-3">
+                  <select class="form-control" name="option_type[]">
+                    <option value="string">String</option>
+                    <option value="integer">Integer</option>
+                    <option value="boolean">Boolean</option>
+                    <option value="user">User</option>
+                    <option value="channel">Channel</option>
+                    <option value="role">Role</option>
+                  </select>
+                </div>
+                <div class="col-md-4">
+                  <input type="text" class="form-control" name="option_description[]" placeholder="Description">
+                </div>
+                <div class="col-md-1">
+                  <button type="button" class="btn btn-sm btn-outline-danger remove-option">
+                    <i class="fas fa-times"></i>
+                  </button>
+                </div>
+              </div>
+            </div>
+            <button type="button" class="btn btn-sm btn-outline-primary mt-2" id="addOption">
+              <i class="fas fa-plus"></i> Add Option
+            </button>
+          </div>
+        </form>
+      </div>
+      <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
+        <button type="button" class="btn btn-primary" id="saveCommand">Save Command</button>
+      </div>
+    </div>
+  </div>
+</div>
+
+<!-- Edit Command Modal -->
+<div class="modal fade" id="editCommandModal" tabindex="-1" aria-labelledby="editCommandModalLabel" aria-hidden="true">
+  <div class="modal-dialog modal-lg">
+    <div class="modal-content">
+      <div class="modal-header">
+        <h5 class="modal-title" id="editCommandModalLabel">Edit Command</h5>
+        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
+      </div>
+      <div class="modal-body">
+        <!-- Similar form as add command, pre-populated with command data -->
+        <form id="editCommandForm">
+          <input type="hidden" id="editCommandId" name="id">
+          <!-- Rest of form fields similar to add command -->
+        </form>
+      </div>
+      <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
+        <button type="button" class="btn btn-primary" id="updateCommand">Update Command</button>
+      </div>
+    </div>
+  </div>
+</div>
+
+<!-- Command Stats Modal -->
+<div class="modal fade" id="commandStatsModal" tabindex="-1" aria-labelledby="commandStatsModalLabel" aria-hidden="true">
+  <div class="modal-dialog modal-lg">
+    <div class="modal-content">
+      <div class="modal-header">
+        <h5 class="modal-title" id="commandStatsModalLabel">Command Statistics</h5>
+        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
+      </div>
+      <div class="modal-body">
+        <div class="row">
+          <div class="col-md-6">
+            <div class="card mb-4">
+              <div class="card-header">
+                <i class="fas fa-chart-line me-1"></i>
+                Usage Over Time
+              </div>
+              <div class="card-body">
+                <canvas id="commandUsageChart" width="100%" height="50"></canvas>
+              </div>
+            </div>
+          </div>
+          <div class="col-md-6">
+            <div class="card mb-4">
+              <div class="card-header">
+                <i class="fas fa-server me-1"></i>
+                Top Servers
+              </div>
+              <div class="card-body">
+                <canvas id="serverUsageChart" width="100%" height="50"></canvas>
+              </div>
+            </div>
+          </div>
+        </div>
+        <div class="card mb-0">
+          <div class="card-header">
+            <i class="fas fa-history me-1"></i>
+            Recent Invocations
+          </div>
+          <div class="card-body p-0">
+            <div class="table-responsive">
+              <table class="table mb-0">
+                <thead>
+                  <tr>
+                    <th>Date</th>
+                    <th>User</th>
+                    <th>Server</th>
+                    <th>Parameters</th>
+                    <th>Status</th>
+                  </tr>
+                </thead>
+                <tbody id="recentInvocations">
+                  <!-- Will be populated with AJAX -->
+                </tbody>
+              </table>
+            </div>
+          </div>
+        </div>
+      </div>
+      <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
+      </div>
+    </div>
+  </div>
+</div>
+{% endblock %}
+
+{% block scripts %}
+<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
+<script>
+  document.addEventListener('DOMContentLoaded', function() {
+    // Add command option
+    document.getElementById('addOption').addEventListener('click', function() {
+      const optionRow = document.querySelector('.option-row').cloneNode(true);
+      const inputs = optionRow.querySelectorAll('input');
+      inputs.forEach(input => input.value = '');
+      
+      optionRow.querySelector('.remove-option').addEventListener('click', function() {
+        this.closest('.option-row').remove();
+      });
+      
+      document.getElementById('optionsContainer').appendChild(optionRow);
+    });
+    
+    // Initialize remove option buttons
+    document.querySelectorAll('.remove-option').forEach(button => {
+      button.addEventListener('click', function() {
+        this.closest('.option-row').remove();
+      });
+    });
+    
+    // Command search
+    document.getElementById('searchCommands').addEventListener('keyup', function() {
+      const searchTerm = this.value.toLowerCase();
+      const rows = document.querySelectorAll('#commandsTable tbody tr');
+      
+      rows.forEach(row => {
+        const text = row.textContent.toLowerCase();
+        row.style.display = text.includes(searchTerm) ? '' : 'none';
+      });
+    });
+    
+    // Bot filter
+    document.getElementById('botFilter').addEventListener('change', function() {
+      const botId = this.value;
+      const rows = document.querySelectorAll('#commandsTable tbody tr');
+      
+      if (!botId) {
+        rows.forEach(row => row.style.display = '');
+        return;
+      }
+      
+      rows.forEach(row => {
+        const botCell = row.querySelector('td:nth-child(3)');
+        if (botCell) {
+          const botName = botCell.textContent.trim();
+          // This is simplified - in real implementation, you'd compare IDs
+          row.style.display = botName.includes(botId) ? '' : 'none';
+        }
+      });
+    });
+    
+    // Category filter
+    document.getElementById('categoryFilter').addEventListener('change', function() {
+      const category = this.value.toLowerCase();
+      const rows = document.querySelectorAll('#commandsTable tbody tr');
+      
+      if (!category) {
+        rows.forEach(row => row.style.display = '');
+        return;
+      }
+      
+      rows.forEach(row => {
+        const categoryCell = row.querySelector('td:nth-child(4)');
+        if (categoryCell) {
+          const categoryText = categoryCell.textContent.toLowerCase();
+          row.style.display = categoryText.includes(category) ? '' : 'none';
+        }
+      });
+    });
+    
+    // Command stats modal
+    document.querySelectorAll('[data-bs-target="#commandStatsModal"]').forEach(button => {
+      button.addEventListener('click', function() {
+        const commandId = this.getAttribute('data-id');
+        loadCommandStats(commandId);
+      });
+    });
+    
+    // Delete command confirmation
+    document.querySelectorAll('.delete-command').forEach(button => {
+      button.addEventListener('click', function() {
+        const commandId = this.getAttribute('data-id');
+        const commandName = this.closest('tr').querySelector('td:first-child').textContent;
+        
+        if (confirm(`Are you sure you want to delete the command ${commandName}?`)) {
+          // Send delete request to backend
+          console.log(`Deleting command with ID: ${commandId}`);
+          // After successful deletion, remove row or refresh
+        }
+      });
+    });
+    
+    // Function to load command stats
+    function loadCommandStats(commandId) {
+      console.log(`Loading stats for command ID: ${commandId}`);
+      // In a real implementation, you would fetch data via AJAX
+      
+      // Example data for charts
+      const usageData = {
+        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
+        datasets: [{
+          label: 'Command Usage',
+          data: [65, 59, 80, 81, 56, 55],
+          backgroundColor: 'rgba(54, 162, 235, 0.2)',
+          borderColor: 'rgba(54, 162, 235, 1)',
+          borderWidth: 1
+        }]
+      };
+      
+      const serverData = {
+        labels: ['Server 1', 'Server 2', 'Server 3', 'Server 4', 'Server 5'],
+        datasets: [{
+          label: 'Usage by Server',
+          data: [12, 19, 3, 5, 2],
+          backgroundColor: [
+            'rgba(255, 99, 132, 0.2)',
+            'rgba(54, 162, 235, 0.2)',
+            'rgba(255, 206, 86, 0.2)',
+            'rgba(75, 192, 192, 0.2)',
+            'rgba(153, 102, 255, 0.2)'
+          ],
+          borderColor: [
+            'rgba(255, 99, 132, 1)',
+            'rgba(54, 162, 235, 1)',
+            'rgba(255, 206, 86, 1)',
+            'rgba(75, 192, 192, 1)',
+            'rgba(153, 102, 255, 1)'
+          ],
+          borderWidth: 1
+        }]
+      };
+      
+      // Create charts
+      const usageCtx = document.getElementById('commandUsageChart').getContext('2d');
+      const usageChart = new Chart(usageCtx, {
+        type: 'line',
+        data: usageData,
+        options: {
+          scales: {
+            y: {
+              beginAtZero: true
+            }
+          }
+        }
+      });
+      
+      const serverCtx = document.getElementById('serverUsageChart').getContext('2d');
+      const serverChart = new Chart(serverCtx, {
+        type: 'bar',
+        data: serverData,
+        options: {
+          scales: {
+            y: {
+              beginAtZero: true
+            }
+          }
+        }
+      });
+      
+      // Populate recent invocations
+      const recentInvocations = [
+        { date: '2023-06-01 14:32', user: 'User#1234', server: 'Gaming Server', params: '/help music', status: 'Success' },
+        { date: '2023-06-01 13:15', user: 'User#5678', server: 'Community', params: '/help', status: 'Success' },
+        { date: '2023-05-31 22:40', user: 'User#9012', server: 'Study Group', params: '/help mod', status: 'Failed' }
+      ];
+      
+      const tbody = document.getElementById('recentInvocations');
+      tbody.innerHTML = '';
+      
+      recentInvocations.forEach(inv => {
+        const tr = document.createElement('tr');
+        tr.innerHTML = `
+          <td>${inv.date}</td>
+          <td>${inv.user}</td>
+          <td>${inv.server}</td>
+          <td><code>${inv.params}</code></td>
+          <td><span class="badge bg-${inv.status === 'Success' ? 'success' : 'danger'}">${inv.status}</span></td>
+        `;
+        tbody.appendChild(tr);
+      });
+    }
+  });
+</script>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/error.html b/dashboard/templates/dashboard/error.html
new file mode 100644
index 0000000..4c59135
--- /dev/null
+++ b/dashboard/templates/dashboard/error.html
@@ -0,0 +1,37 @@
+{% extends 'dashboard/base.html' %}
+
+{% block title %}Error - Social Cube{% endblock %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-8">
+    <div class="max-w-2xl mx-auto">
+        <div class="bg-white rounded-lg shadow-sm p-6 border border-red-200">
+            <div class="flex items-center justify-center mb-4">
+                <i class="fas fa-exclamation-circle text-4xl text-red-500"></i>
+            </div>
+            <h1 class="text-2xl font-bold text-center text-gray-900 mb-4">{{ error_title }}</h1>
+            <p class="text-gray-600 text-center mb-6">{{ error_message }}</p>
+            
+            {% if debug_info %}
+            <div class="mt-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
+                <h2 class="text-sm font-semibold text-gray-700 mb-2">Debug Information:</h2>
+                <pre class="text-xs text-gray-600 overflow-x-auto">{{ debug_info }}</pre>
+                
+                {% if redirect_uri %}
+                <div class="mt-4">
+                    <h3 class="text-sm font-semibold text-gray-700 mb-2">Redirect URI:</h3>
+                    <pre class="text-xs text-gray-600 overflow-x-auto">{{ redirect_uri }}</pre>
+                </div>
+                {% endif %}
+            </div>
+            {% endif %}
+            
+            <div class="mt-6 text-center">
+                <a href="{% url 'dashboard:index' %}" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
+                    <i class="fas fa-home mr-2"></i>Return to Dashboard
+                </a>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %} 
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/index.html b/dashboard/templates/dashboard/index.html
new file mode 100644
index 0000000..70a711c
--- /dev/null
+++ b/dashboard/templates/dashboard/index.html
@@ -0,0 +1,27 @@
+{% extends 'dashboard/base.html' %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-8">
+    <div class="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-8">
+        {% if user.is_authenticated %}
+            <div class="text-center">
+                <h1 class="text-3xl font-bold mb-4">Welcome, {{ user.username }}!</h1>
+                <p class="text-gray-600 mb-6">Manage your Discord bot with ease.</p>
+                <a href="{% url 'logout' %}" 
+                   class="inline-block bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors">
+                    Logout
+                </a>
+            </div>
+        {% else %}
+            <div class="text-center">
+                <h1 class="text-3xl font-bold mb-4">Discord Bot Dashboard</h1>
+                <p class="text-gray-600 mb-6">Login to manage your Discord bot settings and configurations.</p>
+                <a href="{% url 'dashboard:oauth2_login' %}" 
+                   class="inline-block bg-indigo-500 text-white px-6 py-2 rounded-lg hover:bg-indigo-600 transition-colors">
+                    Login with Discord
+                </a>
+            </div>
+        {% endif %}
+    </div>
+</div>
+{% endblock %} 
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/new_base.html b/dashboard/templates/dashboard/new_base.html
new file mode 100644
index 0000000..1773608
--- /dev/null
+++ b/dashboard/templates/dashboard/new_base.html
@@ -0,0 +1,278 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="en" x-data="{ darkMode: localStorage.getItem('darkMode') === 'true' }" x-bind:class="{ 'dark': darkMode }">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <meta name="description" content="Social Cube - Your All-in-One Discord Bot Management Dashboard">
+    <meta name="theme-color" content="#4F46E5">
+    <title>{% block title %}Social Cube{% endblock %}</title>
+    <script src="https://cdn.tailwindcss.com"></script>
+    <script>
+        tailwind.config = {
+            darkMode: 'class',
+            theme: {
+                extend: {
+                    colors: {
+                        primary: {
+                            50: '#eef2ff',
+                            100: '#e0e7ff',
+                            200: '#c7d2fe',
+                            300: '#a5b4fc',
+                            400: '#818cf8',
+                            500: '#6366f1',
+                            600: '#4f46e5',
+                            700: '#4338ca',
+                            800: '#3730a3',
+                            900: '#312e81',
+                        }
+                    }
+                }
+            }
+        }
+    </script>
+    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
+    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
+    <style>
+        /* Transition for dark mode */
+        .dark-transition {
+            transition: background-color 0.3s ease, color 0.3s ease;
+        }
+        
+        /* Path tracker styles */
+        .breadcrumb-item + .breadcrumb-item::before {
+            content: "/";
+            @apply text-gray-400 dark:text-gray-500 mx-2;
+        }
+    </style>
+</head>
+<body class="min-h-screen flex flex-col dark-transition bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
+    <!-- CSRF Token for AJAX requests -->
+    {% csrf_token %}
+    
+    <!-- Path tracking system -->
+    <div x-data="pathTracker" x-init="trackCurrentPath" class="path-tracker"></div>
+    
+    <nav class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
+        <div class="container mx-auto px-4">
+            <div class="flex justify-between items-center py-4">
+                <!-- Logo and Desktop Navigation -->
+                <div class="flex items-center space-x-8">
+                    <a href="{% url 'dashboard:index' %}" class="flex items-center space-x-2">
+                        <i class="fas fa-cube text-primary-600 dark:text-primary-400 text-2xl"></i>
+                        <span class="text-xl font-bold text-gray-900 dark:text-white">Social Cube</span>
+                    </a>
+                    {% if user.is_authenticated %}
+                    <nav class="hidden md:flex space-x-6">
+                        <a href="{% url 'dashboard:index' %}" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'index' %}text-primary-600 dark:text-primary-400{% endif %}">
+                            <i class="fas fa-tachometer-alt mr-1"></i>儀表板
+                        </a>
+                        <a href="{% url 'dashboard:bot:list' %}" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 {% if 'bot' in request.resolver_match.namespaces %}text-primary-600 dark:text-primary-400{% endif %}">
+                            <i class="fas fa-robot mr-1"></i>機器人
+                        </a>
+                        <a href="{% url 'dashboard:servers' %}" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'servers' %}text-primary-600 dark:text-primary-400{% endif %}">
+                            <i class="fas fa-server mr-1"></i>伺服器
+                        </a>
+                        <a href="{% url 'dashboard:stats' %}" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'stats' %}text-primary-600 dark:text-primary-400{% endif %}">
+                            <i class="fas fa-chart-line mr-1"></i>統計
+                        </a>
+                    </nav>
+                    {% endif %}
+                </div>
+
+                <!-- User Menu & Theme Toggle (Desktop) -->
+                <div class="hidden md:flex items-center space-x-4">
+                    <!-- Dark Mode Toggle -->
+                    <button @click="darkMode = !darkMode; localStorage.setItem('darkMode', darkMode)" 
+                            class="p-2 rounded-full text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700" 
+                            title="切換深淺色模式">
+                        <i class="fas fa-sun text-yellow-500 dark:hidden"></i>
+                        <i class="fas fa-moon text-blue-300 hidden dark:block"></i>
+                    </button>
+
+                    {% if user.is_authenticated %}
+                    <a href="{% url 'dashboard:bot:add' %}" class="bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors">
+                        <i class="fas fa-plus mr-1"></i>添加機器人
+                    </a>
+                    <div class="relative" x-data="{ open: false }">
+                        <button @click="open = !open" class="flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400">
+                            <span class="text-sm font-medium">{{ user.username }}</span>
+                            <i class="fas fa-chevron-down text-xs"></i>
+                        </button>
+                        <div x-show="open" @click.away="open = false" class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg py-2 border border-gray-200 dark:border-gray-700">
+                            <a href="{% url 'dashboard:servers' %}" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
+                                <i class="fas fa-user mr-2"></i>個人資料
+                            </a>
+                            <a href="{% url 'dashboard:logout' %}" class="block px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20">
+                                <i class="fas fa-sign-out-alt mr-2"></i>登出
+                            </a>
+                        </div>
+                    </div>
+                    {% else %}
+                    <a href="{% url 'dashboard:oauth2_login' %}" class="bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors">
+                        <i class="fab fa-discord mr-1"></i>Discord 登入
+                    </a>
+                    {% endif %}
+                </div>
+
+                <!-- Mobile Menu Button -->
+                <div class="md:hidden flex items-center space-x-2">
+                    <!-- Dark Mode Toggle (Mobile) -->
+                    <button @click="darkMode = !darkMode; localStorage.setItem('darkMode', darkMode)" 
+                            class="p-2 rounded-full text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700" 
+                            title="切換深淺色模式">
+                        <i class="fas fa-sun text-yellow-500 dark:hidden"></i>
+                        <i class="fas fa-moon text-blue-300 hidden dark:block"></i>
+                    </button>
+                    
+                    <!-- Menu Toggle -->
+                    <button type="button" onclick="toggleMobileMenu()" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400">
+                        <i class="fas fa-bars text-xl"></i>
+                    </button>
+                </div>
+            </div>
+
+            <!-- Mobile Menu -->
+            <div id="mobileMenu" class="hidden md:hidden">
+                <nav class="py-4">
+                    {% if user.is_authenticated %}
+                    <a href="{% url 'dashboard:index' %}" class="block py-2 px-4 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'index' %}text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-700{% endif %}">
+                        <i class="fas fa-tachometer-alt mr-2"></i>儀表板
+                    </a>
+                    <a href="{% url 'dashboard:bot:list' %}" class="block py-2 px-4 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-primary-600 dark:hover:text-primary-400 {% if 'bot' in request.resolver_match.namespaces %}text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-700{% endif %}">
+                        <i class="fas fa-robot mr-2"></i>機器人
+                    </a>
+                    <a href="{% url 'dashboard:servers' %}" class="block py-2 px-4 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'servers' %}text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-700{% endif %}">
+                        <i class="fas fa-server mr-2"></i>伺服器
+                    </a>
+                    <a href="{% url 'dashboard:stats' %}" class="block py-2 px-4 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'stats' %}text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-700{% endif %}">
+                        <i class="fas fa-chart-line mr-2"></i>統計
+                    </a>
+                    <a href="{% url 'dashboard:bot:add' %}" class="block py-2 px-4 text-primary-600 dark:text-primary-400 hover:bg-primary-50 dark:hover:bg-primary-900/20">
+                        <i class="fas fa-plus mr-2"></i>添加機器人
+                    </a>
+                    <hr class="my-2 border-gray-200 dark:border-gray-700">
+                    <a href="{% url 'dashboard:logout' %}" class="block py-2 px-4 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20">
+                        <i class="fas fa-sign-out-alt mr-2"></i>登出
+                    </a>
+                    {% else %}
+                    <a href="{% url 'dashboard:oauth2_login' %}" class="block py-2 px-4 text-primary-600 dark:text-primary-400 hover:bg-primary-50 dark:hover:bg-primary-900/20">
+                        <i class="fab fa-discord mr-2"></i>Discord 登入
+                    </a>
+                    {% endif %}
+                </nav>
+            </div>
+        </div>
+    </nav>
+
+    <!-- Breadcrumb navigation -->
+    <div class="bg-gray-100 dark:bg-gray-800 py-2 px-4 border-b border-gray-200 dark:border-gray-700 mb-4">
+        <div class="container mx-auto">
+            <ol class="flex flex-wrap text-sm text-gray-600 dark:text-gray-400">
+                <li class="breadcrumb-item">
+                    <a href="{% url 'dashboard:index' %}" class="hover:text-primary-600 dark:hover:text-primary-400">
+                        <i class="fas fa-home"></i>
+                    </a>
+                </li>
+                {% block breadcrumb %}
+                {% endblock %}
+            </ol>
+        </div>
+    </div>
+
+    <main class="flex-grow">
+        {% if messages %}
+        <div class="container mx-auto px-4 mt-4">
+            {% for message in messages %}
+            <div class="p-4 mb-4 rounded-lg {% if message.tags == 'success' %}bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400{% elif message.tags == 'error' %}bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400{% else %}bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400{% endif %}">
+                {{ message }}
+            </div>
+            {% endfor %}
+        </div>
+        {% endif %}
+        
+        {% block content %}{% endblock %}
+    </main>
+
+    <footer class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-8 py-6">
+        <div class="container mx-auto px-4">
+            <div class="flex flex-col md:flex-row justify-between items-center">
+                <div class="flex items-center space-x-2 mb-4 md:mb-0">
+                    <i class="fas fa-cube text-primary-600 dark:text-primary-400"></i>
+                    <span class="text-gray-600 dark:text-gray-400">&copy; 2025 Social Cube</span>
+                </div>
+                <div class="flex space-x-6">
+                    <a href="https://github.com" target="_blank" rel="noopener noreferrer" class="text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">
+                        <i class="fab fa-github"></i>
+                    </a>
+                    <a href="https://discord.com" target="_blank" rel="noopener noreferrer" class="text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">
+                        <i class="fab fa-discord"></i>
+                    </a>
+                </div>
+            </div>
+        </div>
+    </footer>
+
+    <script>
+    function toggleMobileMenu() {
+        const menu = document.getElementById('mobileMenu');
+        menu.classList.toggle('hidden');
+    }
+
+    // Path tracker
+    document.addEventListener('alpine:init', () => {
+        Alpine.data('pathTracker', () => ({
+            paths: [],
+            currentPath: '',
+            
+            trackCurrentPath() {
+                this.currentPath = window.location.pathname;
+                let storedPaths = JSON.parse(sessionStorage.getItem('pathHistory') || '[]');
+                
+                // Only add the current path if it's different from the last one
+                if (storedPaths.length === 0 || storedPaths[storedPaths.length - 1] !== this.currentPath) {
+                    storedPaths.push(this.currentPath);
+                    // Keep last 10 paths
+                    if (storedPaths.length > 10) {
+                        storedPaths.shift();
+                    }
+                    sessionStorage.setItem('pathHistory', JSON.stringify(storedPaths));
+                }
+                
+                this.paths = storedPaths;
+            },
+            
+            goBack() {
+                window.history.back();
+            }
+        }));
+    });
+
+    // Add CSRF token to all AJAX requests
+    document.addEventListener('DOMContentLoaded', function() {
+        const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;
+        
+        // Add CSRF token to all fetch requests
+        const originalFetch = window.fetch;
+        window.fetch = function() {
+            let [resource, config] = arguments;
+            if(config === undefined) {
+                config = {};
+            }
+            if(config.headers === undefined) {
+                config.headers = {};
+            }
+            config.headers['X-CSRFToken'] = csrfToken;
+            return originalFetch(resource, config);
+        };
+        
+        // Check for system dark mode preference on first visit
+        if (localStorage.getItem('darkMode') === null) {
+            const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
+            localStorage.setItem('darkMode', prefersDarkMode);
+            document.documentElement.__x.$data.darkMode = prefersDarkMode;
+        }
+    });
+    </script>
+</body>
+</html>
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/new_bot_add.html b/dashboard/templates/dashboard/new_bot_add.html
new file mode 100644
index 0000000..39d0a54
--- /dev/null
+++ b/dashboard/templates/dashboard/new_bot_add.html
@@ -0,0 +1,121 @@
+{% extends 'dashboard/new_base.html' %}
+
+{% block title %}新增機器人 - Discord機器人管理{% endblock %}
+
+{% block breadcrumb %}
+<li class="breadcrumb-item">
+    <a href="{% url 'dashboard:index' %}" class="text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">儀表板</a>
+</li>
+<li class="breadcrumb-item">
+    <a href="{% url 'dashboard:bot:list' %}" class="text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">機器人管理</a>
+</li>
+<li class="breadcrumb-item">
+    <span class="text-gray-800 dark:text-gray-200">新增機器人</span>
+</li>
+{% endblock %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-6">
+    <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">新增機器人</h1>
+    
+    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-6">
+        <form method="POST" enctype="multipart/form-data" class="space-y-6">
+            {% csrf_token %}
+            
+            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
+                <div class="space-y-4">
+                    <div>
+                        <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">機器人名稱 <span class="text-red-500">*</span></label>
+                        <input type="text" name="name" id="name" required class="bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5" placeholder="輸入機器人名稱">
+                    </div>
+                    
+                    <div>
+                        <label for="prefix" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">命令前綴</label>
+                        <input type="text" name="prefix" id="prefix" maxlength="5" class="bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5" placeholder="!" value="!">
+                        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">如果您使用斜線命令，此處可以留空</p>
+                    </div>
+                    
+                    <div>
+                        <label for="token" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">機器人令牌 <span class="text-red-500">*</span></label>
+                        <div class="relative">
+                            <input type="password" name="token" id="token" required class="bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5" placeholder="Discord Bot Token">
+                            <button type="button" id="toggleToken" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500 dark:text-gray-400">
+                                <i class="fas fa-eye"></i>
+                            </button>
+                        </div>
+                        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">從 <a href="https://discord.com/developers/applications" target="_blank" class="text-primary-600 dark:text-primary-400 hover:underline">Discord 開發者頁面</a> 獲取</p>
+                    </div>
+                </div>
+                
+                <div class="space-y-4">
+                    <div>
+                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">機器人頭像</label>
+                        <div class="flex items-center space-x-4">
+                            <div class="w-24 h-24 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center overflow-hidden" id="avatarPreview">
+                                <i class="fas fa-robot text-3xl text-gray-400 dark:text-gray-500"></i>
+                            </div>
+                            <div class="flex-1">
+                                <label for="avatar" class="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-700 dark:bg-gray-800 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500">
+                                    <div class="flex flex-col items-center justify-center pt-5 pb-6">
+                                        <i class="fas fa-cloud-upload-alt text-gray-500 dark:text-gray-400 text-2xl mb-2"></i>
+                                        <p class="mb-2 text-sm text-gray-500 dark:text-gray-400"><span class="font-semibold">點擊上傳</span> 或拖放</p>
+                                        <p class="text-xs text-gray-500 dark:text-gray-400">PNG, JPG (最大 2MB)</p>
+                                    </div>
+                                    <input id="avatar" name="avatar" type="file" class="hidden" accept="image/png, image/jpeg" />
+                                </label>
+                            </div>
+                        </div>
+                    </div>
+                    
+                    <div>
+                        <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">機器人描述</label>
+                        <textarea name="description" id="description" rows="4" class="bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5" placeholder="描述您的機器人功能與用途..."></textarea>
+                    </div>
+                </div>
+            </div>
+            
+            <div class="pt-4 border-t border-gray-200 dark:border-gray-700">
+                <div class="flex justify-end space-x-3">
+                    <a href="{% url 'dashboard:bot:list' %}" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
+                        取消
+                    </a>
+                    <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-primary-600 dark:bg-primary-500 rounded-lg hover:bg-primary-700 dark:hover:bg-primary-600 transition-colors">
+                        建立機器人
+                    </button>
+                </div>
+            </div>
+        </form>
+    </div>
+</div>
+{% endblock %}
+
+{% block scripts %}
+<script>
+    document.addEventListener('DOMContentLoaded', function() {
+        // Toggle token visibility
+        const tokenInput = document.getElementById('token');
+        const toggleButton = document.getElementById('toggleToken');
+        
+        toggleButton.addEventListener('click', function() {
+            const type = tokenInput.getAttribute('type') === 'password' ? 'text' : 'password';
+            tokenInput.setAttribute('type', type);
+            this.innerHTML = type === 'password' ? '<i class="fas fa-eye"></i>' : '<i class="fas fa-eye-slash"></i>';
+        });
+        
+        // Avatar preview
+        const avatarInput = document.getElementById('avatar');
+        const avatarPreview = document.getElementById('avatarPreview');
+        
+        avatarInput.addEventListener('change', function() {
+            const file = this.files[0];
+            if (file) {
+                const reader = new FileReader();
+                reader.onload = function(e) {
+                    avatarPreview.innerHTML = `<img src="${e.target.result}" alt="Avatar Preview" class="w-full h-full object-cover">`;
+                }
+                reader.readAsDataURL(file);
+            }
+        });
+    });
+</script>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/new_bots.html b/dashboard/templates/dashboard/new_bots.html
new file mode 100644
index 0000000..e35c969
--- /dev/null
+++ b/dashboard/templates/dashboard/new_bots.html
@@ -0,0 +1,274 @@
+{% extends 'dashboard/base.html' %}
+{% load static %}
+
+{% block title %}我的機器人 - Discord機器人管理{% endblock %}
+
+{% block content %}
+<div class="container py-4">
+    <!-- Breadcrumb -->
+    <nav aria-label="breadcrumb" class="mb-4">
+        <ol class="breadcrumb">
+            <li class="breadcrumb-item"><a href="{% url 'dashboard' %}">儀表板</a></li>
+            <li class="breadcrumb-item active">機器人管理</li>
+        </ol>
+    </nav>
+
+    <!-- Header -->
+    <div class="d-flex justify-content-between align-items-center mb-4">
+        <h1 class="h3 mb-0">機器人管理</h1>
+        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBotModal">
+            <i class="fas fa-plus me-2"></i>新增機器人
+        </button>
+    </div>
+
+    <!-- Search and Filters -->
+    <div class="card mb-4">
+        <div class="card-body">
+            <div class="row g-3">
+                <div class="col-md-6">
+                    <div class="input-group">
+                        <span class="input-group-text"><i class="fas fa-search"></i></span>
+                        <input type="text" class="form-control" id="searchBot" placeholder="搜尋機器人...">
+                    </div>
+                </div>
+                <div class="col-md-3">
+                    <select class="form-select" id="statusFilter">
+                        <option value="all">所有狀態</option>
+                        <option value="active">運行中</option>
+                        <option value="inactive">已停用</option>
+                    </select>
+                </div>
+                <div class="col-md-3">
+                    <select class="form-select" id="sortFilter">
+                        <option value="newest">最新添加</option>
+                        <option value="oldest">最早添加</option>
+                        <option value="name">名稱排序</option>
+                    </select>
+                </div>
+            </div>
+        </div>
+    </div>
+
+    <!-- Bots List -->
+    <div class="row" id="botsList">
+        {% if bots %}
+            {% for bot in bots %}
+            <div class="col-md-6 col-lg-4 mb-4">
+                <div class="card h-100">
+                    <div class="card-body">
+                        <div class="d-flex align-items-center mb-3">
+                            <img src="{{ bot.avatar_url }}" alt="{{ bot.name }}" class="rounded-circle me-3" width="48" height="48">
+                            <div>
+                                <h5 class="card-title mb-0">{{ bot.name }}</h5>
+                                <small class="text-muted">ID: {{ bot.id }}</small>
+                            </div>
+                            <div class="ms-auto">
+                                <span class="badge {% if bot.is_active %}bg-success{% else %}bg-danger{% endif %}">
+                                    {{ bot.is_active|yesno:"運行中,已停用" }}
+                                </span>
+                            </div>
+                        </div>
+                        
+                        <div class="mb-3">
+                            <small class="text-muted d-block">前綴：{{ bot.prefix }}</small>
+                            <small class="text-muted d-block">伺服器數：{{ bot.server_count }}</small>
+                            <small class="text-muted d-block">指令使用：{{ bot.command_usage }}</small>
+                            <small class="text-muted d-block">最後活動：{{ bot.last_active|timesince }}</small>
+                        </div>
+
+                        <div class="d-flex justify-content-between">
+                            <div class="btn-group">
+                                <button class="btn btn-sm btn-outline-primary" onclick="location.href='{% url 'bot_settings' bot.id %}'">
+                                    <i class="fas fa-cog me-1"></i>管理
+                                </button>
+                                <button class="btn btn-sm btn-outline-{% if bot.is_active %}danger{% else %}success{% endif %} toggle-bot" 
+                                        data-bot-id="{{ bot.id }}" data-action="{% if bot.is_active %}deactivate{% else %}activate{% endif %}">
+                                    <i class="fas fa-power-off me-1"></i>
+                                    {% if bot.is_active %}停用{% else %}啟用{% endif %}
+                                </button>
+                            </div>
+                        </div>
+                    </div>
+                </div>
+            </div>
+            {% endfor %}
+        {% else %}
+            <div class="col-12 text-center py-5">
+                <div class="mb-4">
+                    <i class="fas fa-robot fa-4x text-muted"></i>
+                </div>
+                <h4>還沒有機器人</h4>
+                <p class="text-muted">點擊上方的「新增機器人」按鈕開始添加您的第一個機器人。</p>
+                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBotModal">
+                    <i class="fas fa-plus me-2"></i>新增機器人
+                </button>
+            </div>
+        {% endif %}
+    </div>
+
+    <!-- Pagination -->
+    {% if bots.has_other_pages %}
+    <nav aria-label="Page navigation" class="mt-4">
+        <ul class="pagination justify-content-center">
+            {% if bots.has_previous %}
+            <li class="page-item">
+                <a class="page-link" href="?page={{ bots.previous_page_number }}">上一頁</a>
+            </li>
+            {% endif %}
+            
+            {% for num in bots.paginator.page_range %}
+                {% if bots.number == num %}
+                <li class="page-item active">
+                    <span class="page-link">{{ num }}</span>
+                </li>
+                {% else %}
+                <li class="page-item">
+                    <a class="page-link" href="?page={{ num }}">{{ num }}</a>
+                </li>
+                {% endif %}
+            {% endfor %}
+            
+            {% if bots.has_next %}
+            <li class="page-item">
+                <a class="page-link" href="?page={{ bots.next_page_number }}">下一頁</a>
+            </li>
+            {% endif %}
+        </ul>
+    </nav>
+    {% endif %}
+</div>
+
+<!-- Add Bot Modal -->
+<div class="modal fade" id="addBotModal" tabindex="-1">
+    <div class="modal-dialog">
+        <div class="modal-content">
+            <div class="modal-header">
+                <h5 class="modal-title">新增機器人</h5>
+                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
+            </div>
+            <div class="modal-body">
+                <form id="addBotForm">
+                    <div class="mb-3">
+                        <label class="form-label">機器人Token</label>
+                        <input type="text" class="form-control" name="token" required>
+                        <div class="form-text">在Discord Developer Portal中獲取您的機器人Token</div>
+                    </div>
+                    <div class="mb-3">
+                        <label class="form-label">指令前綴</label>
+                        <input type="text" class="form-control" name="prefix" required>
+                        <div class="form-text">用於觸發機器人指令的符號，例如：!</div>
+                    </div>
+                </form>
+            </div>
+            <div class="modal-footer">
+                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
+                <button type="submit" form="addBotForm" class="btn btn-primary">新增</button>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
+
+{% block extra_js %}
+<script>
+document.addEventListener('DOMContentLoaded', function() {
+    // Search functionality
+    const searchInput = document.getElementById('searchBot');
+    const statusFilter = document.getElementById('statusFilter');
+    const sortFilter = document.getElementById('sortFilter');
+    
+    function filterBots() {
+        const searchTerm = searchInput.value.toLowerCase();
+        const status = statusFilter.value;
+        const sort = sortFilter.value;
+        
+        showLoading();
+        
+        fetch(`/api/bots/filter?search=${searchTerm}&status=${status}&sort=${sort}`)
+            .then(response => response.json())
+            .then(data => {
+                const botsList = document.getElementById('botsList');
+                // Update bots list with filtered data
+                // Implementation depends on your API response structure
+            })
+            .catch(error => console.error('Error:', error))
+            .finally(() => hideLoading());
+    }
+    
+    searchInput.addEventListener('input', filterBots);
+    statusFilter.addEventListener('change', filterBots);
+    sortFilter.addEventListener('change', filterBots);
+    
+    // Bot activation toggle
+    document.querySelectorAll('.toggle-bot').forEach(button => {
+        button.addEventListener('click', function() {
+            const botId = this.dataset.botId;
+            const action = this.dataset.action;
+            
+            showLoading();
+            
+            fetch(`/api/bots/${botId}/${action}`, {
+                method: 'POST',
+                headers: {
+                    'X-CSRFToken': getCookie('csrftoken'),
+                    'Content-Type': 'application/json'
+                }
+            })
+            .then(response => response.json())
+            .then(data => {
+                if (data.success) {
+                    location.reload();
+                } else {
+                    alert('操作失敗：' + data.error);
+                }
+            })
+            .catch(error => console.error('Error:', error))
+            .finally(() => hideLoading());
+        });
+    });
+    
+    // Add bot form submission
+    document.getElementById('addBotForm').addEventListener('submit', function(e) {
+        e.preventDefault();
+        
+        const formData = new FormData(this);
+        showLoading();
+        
+        fetch('/api/bots/add', {
+            method: 'POST',
+            headers: {
+                'X-CSRFToken': getCookie('csrftoken'),
+                'Content-Type': 'application/json'
+            },
+            body: JSON.stringify(Object.fromEntries(formData))
+        })
+        .then(response => response.json())
+        .then(data => {
+            if (data.success) {
+                location.reload();
+            } else {
+                alert('新增失敗：' + data.error);
+            }
+        })
+        .catch(error => console.error('Error:', error))
+        .finally(() => hideLoading());
+    });
+    
+    // CSRF token helper
+    function getCookie(name) {
+        let cookieValue = null;
+        if (document.cookie && document.cookie !== '') {
+            const cookies = document.cookie.split(';');
+            for (let i = 0; i < cookies.length; i++) {
+                const cookie = cookies[i].trim();
+                if (cookie.substring(0, name.length + 1) === (name + '=')) {
+                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
+                    break;
+                }
+            }
+        }
+        return cookieValue;
+    }
+});
+</script>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/new_index.html b/dashboard/templates/dashboard/new_index.html
new file mode 100644
index 0000000..af67c2d
--- /dev/null
+++ b/dashboard/templates/dashboard/new_index.html
@@ -0,0 +1,351 @@
+{% extends 'dashboard/new_base.html' %}
+
+{% block title %}儀表板 - Discord機器人管理{% endblock %}
+
+{% block breadcrumb %}
+<li class="breadcrumb-item">
+    <span class="text-gray-800 dark:text-gray-200">儀表板</span>
+</li>
+{% endblock %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-6">
+    {% if user.is_authenticated %}
+        <!-- 統計摘要 -->
+        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
+            <!-- 機器人統計 -->
+            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700 transition-all hover:shadow-lg">
+                <div class="flex items-center justify-between mb-4">
+                    <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">機器人</h3>
+                    <span class="p-2 bg-purple-100 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400 rounded-full">
+                        <i class="fas fa-robot"></i>
+                    </span>
+                </div>
+                <div class="flex items-baseline">
+                    <span class="text-3xl font-bold text-gray-900 dark:text-white">{{ bots_count|default:"0" }}</span>
+                    <span class="ml-2 text-sm text-gray-500 dark:text-gray-400">總數</span>
+                </div>
+                <div class="mt-1">
+                    <span class="text-sm text-gray-500 dark:text-gray-400">{{ active_bots|default:"0" }} 個活躍中</span>
+                </div>
+                <div class="mt-4">
+                    <a href="{% url 'dashboard:bot:list' %}" class="text-primary-600 dark:text-primary-400 hover:underline text-sm flex items-center">
+                        <span>查看所有機器人</span>
+                        <i class="fas fa-arrow-right ml-1 text-xs"></i>
+                    </a>
+                </div>
+            </div>
+
+            <!-- 伺服器統計 -->
+            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700 transition-all hover:shadow-lg">
+                <div class="flex items-center justify-between mb-4">
+                    <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">伺服器</h3>
+                    <span class="p-2 bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded-full">
+                        <i class="fas fa-server"></i>
+                    </span>
+                </div>
+                <div class="flex items-baseline">
+                    <span class="text-3xl font-bold text-gray-900 dark:text-white">{{ servers_count|default:"0" }}</span>
+                    <span class="ml-2 text-sm text-gray-500 dark:text-gray-400">總數</span>
+                </div>
+                <div class="mt-1">
+                    <span class="text-sm text-gray-500 dark:text-gray-400">{{ total_members|default:"0" }} 位成員</span>
+                </div>
+                <div class="mt-4">
+                    <a href="{% url 'dashboard:servers' %}" class="text-primary-600 dark:text-primary-400 hover:underline text-sm flex items-center">
+                        <span>查看所有伺服器</span>
+                        <i class="fas fa-arrow-right ml-1 text-xs"></i>
+                    </a>
+                </div>
+            </div>
+
+            <!-- 命令統計 -->
+            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700 transition-all hover:shadow-lg">
+                <div class="flex items-center justify-between mb-4">
+                    <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">命令使用</h3>
+                    <span class="p-2 bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400 rounded-full">
+                        <i class="fas fa-terminal"></i>
+                    </span>
+                </div>
+                <div class="flex items-baseline">
+                    <span class="text-3xl font-bold text-gray-900 dark:text-white">{{ total_commands|default:"0" }}</span>
+                    <span class="ml-2 text-sm text-gray-500 dark:text-gray-400">總使用次數</span>
+                </div>
+                <div class="mt-1">
+                    <span class="text-sm text-gray-500 dark:text-gray-400">{{ commands_today|default:"0" }} 今日使用</span>
+                </div>
+                <div class="mt-4">
+                    <a href="{% url 'dashboard:stats' %}" class="text-primary-600 dark:text-primary-400 hover:underline text-sm flex items-center">
+                        <span>查看詳細統計</span>
+                        <i class="fas fa-arrow-right ml-1 text-xs"></i>
+                    </a>
+                </div>
+            </div>
+
+            <!-- 系統狀態 -->
+            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700 transition-all hover:shadow-lg">
+                <div class="flex items-center justify-between mb-4">
+                    <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">系統狀態</h3>
+                    <span class="p-2 bg-yellow-100 dark:bg-yellow-900/30 text-yellow-600 dark:text-yellow-400 rounded-full">
+                        <i class="fas fa-heartbeat"></i>
+                    </span>
+                </div>
+                <div class="flex items-baseline">
+                    <span class="text-lg font-bold text-green-500 dark:text-green-400">
+                        <i class="fas fa-check-circle"></i> 正常運行中
+                    </span>
+                </div>
+                <div class="mt-1">
+                    <span class="text-sm text-gray-500 dark:text-gray-400">上次更新: {{ last_updated|default:"剛剛" }}</span>
+                </div>
+                <div class="mt-4">
+                    <a href="#" class="text-primary-600 dark:text-primary-400 hover:underline text-sm flex items-center">
+                        <span>查看系統日誌</span>
+                        <i class="fas fa-arrow-right ml-1 text-xs"></i>
+                    </a>
+                </div>
+            </div>
+        </div>
+
+        <!-- 兩欄式佈局 -->
+        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
+            <!-- 左側 (2/3寬度) -->
+            <div class="lg:col-span-2 space-y-8">
+                <!-- 快速操作區 -->
+                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700">
+                    <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">快速操作</h3>
+                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
+                        <a href="{% url 'dashboard:bot:add' %}" class="flex flex-col items-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg hover:bg-primary-50 dark:hover:bg-primary-900/20 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
+                            <i class="fas fa-plus-circle text-2xl mb-2"></i>
+                            <span class="text-sm text-center">添加機器人</span>
+                        </a>
+                        <a href="{% url 'dashboard:servers' %}" class="flex flex-col items-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg hover:bg-primary-50 dark:hover:bg-primary-900/20 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
+                            <i class="fas fa-server text-2xl mb-2"></i>
+                            <span class="text-sm text-center">管理伺服器</span>
+                        </a>
+                        <a href="{% url 'dashboard:stats' %}" class="flex flex-col items-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg hover:bg-primary-50 dark:hover:bg-primary-900/20 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
+                            <i class="fas fa-chart-bar text-2xl mb-2"></i>
+                            <span class="text-sm text-center">查看統計</span>
+                        </a>
+                        <a href="#" class="flex flex-col items-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg hover:bg-primary-50 dark:hover:bg-primary-900/20 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
+                            <i class="fas fa-cog text-2xl mb-2"></i>
+                            <span class="text-sm text-center">系統設置</span>
+                        </a>
+                        <a href="#" class="flex flex-col items-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg hover:bg-primary-50 dark:hover:bg-primary-900/20 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
+                            <i class="fas fa-code text-2xl mb-2"></i>
+                            <span class="text-sm text-center">API文檔</span>
+                        </a>
+                        <a href="#" class="flex flex-col items-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg hover:bg-primary-50 dark:hover:bg-primary-900/20 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
+                            <i class="fas fa-question-circle text-2xl mb-2"></i>
+                            <span class="text-sm text-center">使用幫助</span>
+                        </a>
+                    </div>
+                </div>
+
+                <!-- 最近活動 -->
+                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700">
+                    <div class="flex justify-between items-center mb-4">
+                        <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">最近活動</h3>
+                        <a href="#" class="text-primary-600 dark:text-primary-400 hover:underline text-sm">查看全部</a>
+                    </div>
+                    {% if recent_logs %}
+                        <div class="space-y-4">
+                            {% for log in recent_logs %}
+                                <div class="flex items-start p-3 rounded-lg {% if forloop.counter|divisibleby:2 %}bg-gray-50 dark:bg-gray-700/50{% endif %}">
+                                    <div class="flex-shrink-0 mr-3">
+                                        <span class="inline-flex items-center justify-center h-10 w-10 rounded-full bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400">
+                                            <i class="fas fa-history"></i>
+                                        </span>
+                                    </div>
+                                    <div class="flex-1 min-w-0">
+                                        <p class="text-sm font-medium text-gray-800 dark:text-gray-200 truncate">
+                                            {{ log.action }}
+                                        </p>
+                                        <p class="text-sm text-gray-500 dark:text-gray-400 truncate">
+                                            {{ log.bot.name }} / {{ log.server.name }}
+                                        </p>
+                                        <p class="text-xs text-gray-400 dark:text-gray-500 mt-1">
+                                            {{ log.timestamp|date:"Y-m-d H:i" }}
+                                        </p>
+                                    </div>
+                                </div>
+                            {% endfor %}
+                        </div>
+                    {% else %}
+                        <div class="py-6 text-center">
+                            <p class="text-gray-500 dark:text-gray-400">暫無活動記錄</p>
+                        </div>
+                    {% endif %}
+                </div>
+            </div>
+
+            <!-- 右側 (1/3寬度) -->
+            <div class="space-y-8">
+                <!-- 我的機器人 -->
+                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
+                    <div class="p-6 border-b border-gray-200 dark:border-gray-700">
+                        <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">我的機器人</h3>
+                    </div>
+                    <div class="p-0">
+                        {% if user_bots %}
+                            <ul class="divide-y divide-gray-200 dark:divide-gray-700">
+                                {% for bot in user_bots %}
+                                    <li class="flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
+                                        <div class="flex items-center">
+                                            <div class="w-10 h-10 rounded-full bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center mr-3">
+                                                <i class="fas fa-robot text-primary-600 dark:text-primary-400"></i>
+                                            </div>
+                                            <div>
+                                                <h4 class="text-sm font-medium text-gray-800 dark:text-gray-200">{{ bot.name }}</h4>
+                                                <p class="text-xs text-gray-500 dark:text-gray-400">
+                                                    {% if bot.is_active %}
+                                                        <span class="text-green-500 dark:text-green-400">
+                                                            <i class="fas fa-circle text-xs"></i> 運行中
+                                                        </span>
+                                                    {% else %}
+                                                        <span class="text-gray-400 dark:text-gray-500">
+                                                            <i class="fas fa-circle text-xs"></i> 已停止
+                                                        </span>
+                                                    {% endif %}
+                                                </p>
+                                            </div>
+                                        </div>
+                                        <a href="{% url 'dashboard:bot:detail' bot.id %}" class="text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300">
+                                            <i class="fas fa-chevron-right"></i>
+                                        </a>
+                                    </li>
+                                {% endfor %}
+                            </ul>
+                        {% else %}
+                            <div class="p-6 text-center">
+                                <p class="text-gray-500 dark:text-gray-400 mb-4">你還沒有添加任何機器人</p>
+                                <a href="{% url 'dashboard:bot:add' %}" class="inline-flex items-center px-4 py-2 bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white rounded-lg transition-colors">
+                                    <i class="fas fa-plus mr-2"></i>
+                                    <span>添加機器人</span>
+                                </a>
+                            </div>
+                        {% endif %}
+                    </div>
+                </div>
+
+                <!-- 常用命令 -->
+                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
+                    <div class="p-6 border-b border-gray-200 dark:border-gray-700">
+                        <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">熱門命令</h3>
+                    </div>
+                    <div class="p-6">
+                        {% if popular_commands %}
+                            <ul class="space-y-3">
+                                {% for command in popular_commands %}
+                                    <li class="flex items-center justify-between">
+                                        <div class="flex items-center">
+                                            <span class="w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 mr-3">
+                                                <i class="fas fa-terminal text-xs"></i>
+                                            </span>
+                                            <span class="text-sm text-gray-800 dark:text-gray-200">{{ command.name }}</span>
+                                        </div>
+                                        <span class="text-xs font-medium py-1 px-2 rounded-full bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400">
+                                            {{ command.uses }}次
+                                        </span>
+                                    </li>
+                                {% endfor %}
+                            </ul>
+                        {% else %}
+                            <p class="text-center text-gray-500 dark:text-gray-400">暫無命令使用記錄</p>
+                        {% endif %}
+                    </div>
+                </div>
+
+                <!-- 資源使用量 -->
+                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700">
+                    <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">資源使用量</h3>
+                    
+                    <!-- CPU 使用率 -->
+                    <div class="mb-4">
+                        <div class="flex justify-between items-center mb-1">
+                            <span class="text-sm text-gray-600 dark:text-gray-400">CPU</span>
+                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">28%</span>
+                        </div>
+                        <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
+                            <div class="bg-blue-600 dark:bg-blue-500 h-2 rounded-full" style="width: 28%"></div>
+                        </div>
+                    </div>
+                    
+                    <!-- 記憶體使用率 -->
+                    <div class="mb-4">
+                        <div class="flex justify-between items-center mb-1">
+                            <span class="text-sm text-gray-600 dark:text-gray-400">記憶體</span>
+                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">45%</span>
+                        </div>
+                        <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
+                            <div class="bg-purple-600 dark:bg-purple-500 h-2 rounded-full" style="width: 45%"></div>
+                        </div>
+                    </div>
+                    
+                    <!-- 存儲空間 -->
+                    <div>
+                        <div class="flex justify-between items-center mb-1">
+                            <span class="text-sm text-gray-600 dark:text-gray-400">磁碟空間</span>
+                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">15%</span>
+                        </div>
+                        <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
+                            <div class="bg-green-600 dark:bg-green-500 h-2 rounded-full" style="width: 15%"></div>
+                        </div>
+                    </div>
+                </div>
+            </div>
+        </div>
+    {% else %}
+    <!-- 未登入使用者內容 -->
+    <div class="max-w-4xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
+        <div class="md:flex">
+            <div class="md:flex-shrink-0 bg-primary-600 dark:bg-primary-700 md:w-48 flex items-center justify-center p-8">
+                <i class="fab fa-discord text-white text-6xl"></i>
+            </div>
+            <div class="p-8">
+                <div class="uppercase tracking-wide text-sm text-primary-600 dark:text-primary-400 font-semibold">Discord 機器人管理</div>
+                <h1 class="mt-2 text-3xl leading-tight font-bold text-gray-900 dark:text-white">歡迎使用 Social Cube</h1>
+                <p class="mt-4 text-gray-600 dark:text-gray-300">
+                    管理您的 Discord 機器人變得前所未有的簡單。輕鬆設定、監控和配置您的機器人，無需任何編程知識。
+                </p>
+                <div class="mt-6 space-y-4">
+                    <div class="flex items-start">
+                        <div class="flex-shrink-0">
+                            <i class="fas fa-check-circle text-green-500 dark:text-green-400 mt-1"></i>
+                        </div>
+                        <div class="ml-3">
+                            <h3 class="text-base font-medium text-gray-800 dark:text-gray-200">簡單易用</h3>
+                            <p class="text-sm text-gray-500 dark:text-gray-400">直觀的界面讓任何人都能快速上手</p>
+                        </div>
+                    </div>
+                    <div class="flex items-start">
+                        <div class="flex-shrink-0">
+                            <i class="fas fa-check-circle text-green-500 dark:text-green-400 mt-1"></i>
+                        </div>
+                        <div class="ml-3">
+                            <h3 class="text-base font-medium text-gray-800 dark:text-gray-200">多機器人支持</h3>
+                            <p class="text-sm text-gray-500 dark:text-gray-400">在一個儀表板中管理多個機器人</p>
+                        </div>
+                    </div>
+                    <div class="flex items-start">
+                        <div class="flex-shrink-0">
+                            <i class="fas fa-check-circle text-green-500 dark:text-green-400 mt-1"></i>
+                        </div>
+                        <div class="ml-3">
+                            <h3 class="text-base font-medium text-gray-800 dark:text-gray-200">詳細統計</h3>
+                            <p class="text-sm text-gray-500 dark:text-gray-400">獲取命令使用情況和使用者互動的深入洞察</p>
+                        </div>
+                    </div>
+                </div>
+                <div class="mt-8">
+                    <a href="{% url 'dashboard:oauth2_login' %}" class="bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white py-3 px-6 rounded-lg font-medium transition-colors inline-flex items-center">
+                        <i class="fab fa-discord mr-2"></i>
+                        <span>使用 Discord 登入</span>
+                    </a>
+                </div>
+            </div>
+        </div>
+    </div>
+    {% endif %}
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/new_servers.html b/dashboard/templates/dashboard/new_servers.html
new file mode 100644
index 0000000..e653c91
--- /dev/null
+++ b/dashboard/templates/dashboard/new_servers.html
@@ -0,0 +1,294 @@
+{% extends 'dashboard/new_base.html' %}
+
+{% block title %}伺服器管理 - Discord機器人管理{% endblock %}
+
+{% block breadcrumb %}
+<li class="breadcrumb-item">
+    <a href="{% url 'dashboard:index' %}" class="text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">儀表板</a>
+</li>
+<li class="breadcrumb-item">
+    <span class="text-gray-800 dark:text-gray-200">伺服器管理</span>
+</li>
+{% endblock %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-6">
+    <div class="flex justify-between items-center mb-6">
+        <h1 class="text-2xl font-bold text-gray-900 dark:text-white">伺服器管理</h1>
+        <button type="button" data-modal-target="serverInviteModal" data-modal-toggle="serverInviteModal" class="bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition-colors flex items-center">
+            <i class="fas fa-link mr-2"></i>
+            <span>邀請機器人</span>
+        </button>
+    </div>
+
+    <!-- 篩選和搜尋 -->
+    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6 border border-gray-200 dark:border-gray-700">
+        <div class="flex flex-col md:flex-row md:items-center space-y-3 md:space-y-0 md:space-x-4">
+            <div class="flex-1">
+                <div class="relative">
+                    <span class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-500 dark:text-gray-400">
+                        <i class="fas fa-search"></i>
+                    </span>
+                    <input type="text" id="server-search" class="bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-gray-100 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full pl-10 p-2.5" placeholder="搜尋伺服器...">
+                </div>
+            </div>
+            <div class="flex space-x-2">
+                <select id="bot-filter" class="bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-gray-100 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 p-2.5">
+                    <option value="all">所有機器人</option>
+                    {% for bot in user_bots %}
+                        <option value="{{ bot.id }}">{{ bot.name }}</option>
+                    {% endfor %}
+                </select>
+                <select id="sort-order" class="bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-gray-100 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 p-2.5">
+                    <option value="name">名稱排序</option>
+                    <option value="member_count">成員數量</option>
+                    <option value="recent_activity">最近活動</option>
+                </select>
+            </div>
+        </div>
+    </div>
+
+    {% if servers %}
+        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
+            {% for server in servers %}
+                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-lg transition-all">
+                    <div class="p-6">
+                        <div class="flex items-center justify-between mb-4">
+                            <div class="flex items-center">
+                                {% if server.icon_url %}
+                                    <img src="{{ server.icon_url }}" alt="{{ server.name }}" class="w-12 h-12 rounded-lg mr-4">
+                                {% else %}
+                                    <div class="w-12 h-12 rounded-lg bg-gray-100 dark:bg-gray-700 flex items-center justify-center mr-4">
+                                        <i class="fas fa-server text-xl text-gray-500 dark:text-gray-400"></i>
+                                    </div>
+                                {% endif %}
+                                <div>
+                                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white truncate max-w-[180px]">{{ server.name }}</h3>
+                                    <p class="text-sm text-gray-500 dark:text-gray-400">ID: {{ server.server_id }}</p>
+                                </div>
+                            </div>
+                            <div class="flex flex-col items-end text-xs text-gray-500 dark:text-gray-400">
+                                <span class="whitespace-nowrap">{{ server.member_count }} 成員</span>
+                            </div>
+                        </div>
+                        
+                        <div class="space-y-4 mb-4">
+                            <div class="space-y-2">
+                                <div class="flex justify-between text-sm">
+                                    <span class="text-gray-600 dark:text-gray-400">活躍機器人</span>
+                                    <div class="flex -space-x-2">
+                                        {% for bot in server.bots %}
+                                            <img src="{{ bot.avatar_url|default:'#' }}" alt="{{ bot.name }}" title="{{ bot.name }}" class="w-6 h-6 rounded-full border-2 border-white dark:border-gray-800">
+                                        {% endfor %}
+                                    </div>
+                                </div>
+                                
+                                <div class="flex justify-between text-sm">
+                                    <span class="text-gray-600 dark:text-gray-400">命令使用量</span>
+                                    <span class="text-gray-900 dark:text-white font-medium">{{ server.command_count }}</span>
+                                </div>
+                                
+                                <div class="flex justify-between text-sm">
+                                    <span class="text-gray-600 dark:text-gray-400">上次活動</span>
+                                    <span class="text-gray-900 dark:text-white font-medium">{{ server.last_activity|default:"N/A" }}</span>
+                                </div>
+                            </div>
+                            
+                            <!-- 熱門命令 -->
+                            {% if server.popular_commands %}
+                                <div class="pt-2">
+                                    <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">熱門命令</p>
+                                    <div class="flex flex-wrap gap-2">
+                                        {% for command in server.popular_commands %}
+                                            <span class="inline-flex items-center px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300 rounded">
+                                                {{ command.name }}
+                                            </span>
+                                        {% endfor %}
+                                    </div>
+                                </div>
+                            {% endif %}
+                        </div>
+                        
+                        <div class="mt-4 flex space-x-2">
+                            <a href="{% url 'dashboard:server:detail' server.id %}" class="flex-1 bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white py-2 px-3 rounded text-sm text-center transition-colors">
+                                管理
+                            </a>
+                            <button type="button" data-server-id="{{ server.id }}" class="server-settings-btn flex items-center justify-center w-10 h-10 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-300 rounded transition-colors">
+                                <i class="fas fa-cog"></i>
+                            </button>
+                        </div>
+                    </div>
+                </div>
+            {% endfor %}
+        </div>
+    {% else %}
+        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 text-center border border-gray-200 dark:border-gray-700">
+            <div class="inline-flex items-center justify-center w-16 h-16 mb-4 rounded-full bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400">
+                <i class="fas fa-server text-3xl"></i>
+            </div>
+            <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">還沒有伺服器</h3>
+            <p class="text-gray-600 dark:text-gray-400 mb-6">將機器人邀請到Discord伺服器來管理它們</p>
+            <button type="button" data-modal-target="serverInviteModal" data-modal-toggle="serverInviteModal" class="bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white py-2 px-6 rounded-lg transition-colors inline-flex items-center">
+                <i class="fas fa-link mr-2"></i>
+                <span>邀請機器人到伺服器</span>
+            </button>
+        </div>
+    {% endif %}
+
+    {% if servers.has_other_pages %}
+        <div class="flex justify-center mt-8">
+            <nav class="flex items-center">
+                <ul class="flex space-x-1">
+                    {% if servers.has_previous %}
+                        <li>
+                            <a href="?page={{ servers.previous_page_number }}" class="px-3 py-2 text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 bg-gray-100 dark:bg-gray-700 rounded">
+                                <i class="fas fa-chevron-left"></i>
+                            </a>
+                        </li>
+                    {% endif %}
+                    
+                    {% for num in servers.paginator.page_range %}
+                        {% if servers.number == num %}
+                            <li>
+                                <span class="px-3 py-2 bg-primary-600 text-white rounded">{{ num }}</span>
+                            </li>
+                        {% elif num > servers.number|add:'-3' and num < servers.number|add:'3' %}
+                            <li>
+                                <a href="?page={{ num }}" class="px-3 py-2 text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 bg-gray-100 dark:bg-gray-700 rounded">
+                                    {{ num }}
+                                </a>
+                            </li>
+                        {% endif %}
+                    {% endfor %}
+                    
+                    {% if servers.has_next %}
+                        <li>
+                            <a href="?page={{ servers.next_page_number }}" class="px-3 py-2 text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 bg-gray-100 dark:bg-gray-700 rounded">
+                                <i class="fas fa-chevron-right"></i>
+                            </a>
+                        </li>
+                    {% endif %}
+                </ul>
+            </nav>
+        </div>
+    {% endif %}
+</div>
+
+<!-- 邀請機器人對話框 -->
+<div id="serverInviteModal" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
+    <div class="relative w-full max-w-md max-h-full">
+        <div class="relative bg-white rounded-lg shadow dark:bg-gray-800">
+            <button type="button" class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-700 dark:hover:text-white" data-modal-hide="serverInviteModal">
+                <i class="fas fa-times w-5 h-5"></i>
+                <span class="sr-only">關閉</span>
+            </button>
+            <div class="p-6">
+                <h3 class="mb-4 text-xl font-semibold text-gray-900 dark:text-white">邀請機器人到伺服器</h3>
+                <form id="inviteForm">
+                    <div class="mb-4">
+                        <label for="bot-select" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">選擇機器人</label>
+                        <select id="bot-select" name="bot_id" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
+                            {% for bot in user_bots %}
+                                <option value="{{ bot.id }}">{{ bot.name }}</option>
+                            {% endfor %}
+                        </select>
+                    </div>
+                    <button type="submit" class="w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white py-2.5 px-5 rounded-lg transition-colors flex items-center justify-center">
+                        <i class="fas fa-external-link-alt mr-2"></i>
+                        <span>生成邀請連結</span>
+                    </button>
+                </form>
+                
+                <div id="inviteResult" class="mt-4 hidden">
+                    <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
+                        <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">複製下方連結邀請機器人:</p>
+                        <div class="flex">
+                            <input id="invite-link" type="text" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-l-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-white" readonly>
+                            <button id="copy-link" type="button" class="bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white px-3 rounded-r-lg transition-colors">
+                                <i class="fas fa-copy"></i>
+                            </button>
+                        </div>
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+
+<script>
+    document.addEventListener('DOMContentLoaded', function() {
+        // 搜尋和篩選功能
+        const searchInput = document.getElementById('server-search');
+        const botFilter = document.getElementById('bot-filter');
+        const sortOrder = document.getElementById('sort-order');
+        
+        // 邀請機器人表單處理
+        const inviteForm = document.getElementById('inviteForm');
+        const inviteResult = document.getElementById('inviteResult');
+        const inviteLink = document.getElementById('invite-link');
+        const copyLink = document.getElementById('copy-link');
+        
+        inviteForm?.addEventListener('submit', function(e) {
+            e.preventDefault();
+            const botId = document.getElementById('bot-select').value;
+            
+            // 這裡應該發送AJAX請求到後端獲取邀請鏈接
+            fetch(`/dashboard/bot/${botId}/invite-link/`, {
+                method: 'GET',
+                headers: {
+                    'X-CSRFToken': getCookie('csrftoken')
+                }
+            })
+            .then(response => response.json())
+            .then(data => {
+                if (data.invite_link) {
+                    inviteLink.value = data.invite_link;
+                    inviteResult.classList.remove('hidden');
+                } else {
+                    alert('無法生成邀請連結：' + data.error);
+                }
+            })
+            .catch(error => {
+                console.error('Error:', error);
+                alert('發生錯誤，請稍後重試');
+            });
+        });
+        
+        // 複製邀請連結
+        copyLink?.addEventListener('click', function() {
+            inviteLink.select();
+            document.execCommand('copy');
+            this.innerHTML = '<i class="fas fa-check"></i>';
+            setTimeout(() => {
+                this.innerHTML = '<i class="fas fa-copy"></i>';
+            }, 2000);
+        });
+        
+        // 伺服器設定按鈕
+        const serverSettingsButtons = document.querySelectorAll('.server-settings-btn');
+        serverSettingsButtons.forEach(button => {
+            button.addEventListener('click', function() {
+                const serverId = this.getAttribute('data-server-id');
+                // 這裡可以處理設定選單或導航到設定頁面
+                window.location.href = `/dashboard/server/${serverId}/settings/`;
+            });
+        });
+        
+        // 獲取CSRF Token的輔助函數
+        function getCookie(name) {
+            let cookieValue = null;
+            if (document.cookie && document.cookie !== '') {
+                const cookies = document.cookie.split(';');
+                for (let i = 0; i < cookies.length; i++) {
+                    const cookie = cookies[i].trim();
+                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
+                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
+                        break;
+                    }
+                }
+            }
+            return cookieValue;
+        }
+    });
+</script>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/stats.html b/dashboard/templates/dashboard/stats.html
new file mode 100644
index 0000000..224b61f
--- /dev/null
+++ b/dashboard/templates/dashboard/stats.html
@@ -0,0 +1,109 @@
+{% extends 'dashboard/base.html' %}
+
+{% block title %}Bot Statistics - Social Cube{% endblock %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-8">
+    <div class="mb-8">
+        <h1 class="text-3xl font-bold text-gray-900 mb-2">Bot Statistics</h1>
+        <p class="text-gray-600">Monitor your Discord bot's performance and usage metrics</p>
+    </div>
+
+    {% if bot_stats %}
+    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
+        <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
+            <div class="flex items-center justify-between mb-4">
+                <h3 class="text-lg font-semibold text-gray-700">Servers</h3>
+                <i class="fas fa-server text-indigo-600"></i>
+            </div>
+            <p class="text-3xl font-bold text-gray-900">{{ bot_stats.server_count|default:"0" }}</p>
+            <div class="mt-2 text-sm text-gray-600">Total servers joined</div>
+        </div>
+
+        <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
+            <div class="flex items-center justify-between mb-4">
+                <h3 class="text-lg font-semibold text-gray-700">Commands Used</h3>
+                <i class="fas fa-terminal text-indigo-600"></i>
+            </div>
+            <p class="text-3xl font-bold text-gray-900">{{ bot_stats.command_count|default:"0" }}</p>
+            <div class="mt-2 text-sm text-gray-600">Total commands executed</div>
+        </div>
+
+        <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
+            <div class="flex items-center justify-between mb-4">
+                <h3 class="text-lg font-semibold text-gray-700">Active Users</h3>
+                <i class="fas fa-users text-indigo-600"></i>
+            </div>
+            <p class="text-3xl font-bold text-gray-900">{{ bot_stats.user_count|default:"0" }}</p>
+            <div class="mt-2 text-sm text-gray-600">Unique users interacting</div>
+        </div>
+    </div>
+
+    <!-- Recent Activity -->
+    <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mb-8">
+        <div class="p-6">
+            <h2 class="text-xl font-bold text-gray-900 mb-4">Recent Activity</h2>
+            {% if bot_stats.recent_logs %}
+            <div class="overflow-x-auto">
+                <table class="min-w-full divide-y divide-gray-200">
+                    <thead>
+                        <tr>
+                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
+                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Server</th>
+                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
+                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
+                        </tr>
+                    </thead>
+                    <tbody class="bg-white divide-y divide-gray-200">
+                        {% for log in bot_stats.recent_logs %}
+                        <tr>
+                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ log.timestamp|date:"Y-m-d H:i" }}</td>
+                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ log.server_name }}</td>
+                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ log.action }}</td>
+                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ log.user_name }}</td>
+                        </tr>
+                        {% endfor %}
+                    </tbody>
+                </table>
+            </div>
+            {% else %}
+            <p class="text-gray-600 text-center py-4">No recent activity to display</p>
+            {% endif %}
+        </div>
+    </div>
+
+    <!-- Popular Commands -->
+    <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
+        <div class="p-6">
+            <h2 class="text-xl font-bold text-gray-900 mb-4">Popular Commands</h2>
+            {% if bot_stats.popular_commands %}
+            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
+                {% for command in bot_stats.popular_commands %}
+                <div class="p-4 border border-gray-200 rounded-lg">
+                    <div class="flex items-center justify-between mb-2">
+                        <span class="font-medium text-gray-900">{{ command.name }}</span>
+                        <span class="text-sm text-gray-600">{{ command.uses }} uses</span>
+                    </div>
+                    <p class="text-sm text-gray-600">{{ command.description|truncatechars:100 }}</p>
+                </div>
+                {% endfor %}
+            </div>
+            {% else %}
+            <p class="text-gray-600 text-center py-4">No command usage data available</p>
+            {% endif %}
+        </div>
+    </div>
+    {% else %}
+    <div class="bg-white rounded-lg shadow-sm p-8 border border-gray-200 text-center">
+        <div class="mb-4">
+            <i class="fas fa-robot text-4xl text-gray-400"></i>
+        </div>
+        <h2 class="text-xl font-semibold text-gray-900 mb-2">No Bot Data Available</h2>
+        <p class="text-gray-600 mb-6">Add your Discord bot to start monitoring its performance</p>
+        <a href="{% url 'dashboard:bot:add' %}" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
+            <i class="fas fa-plus mr-2"></i>Add Bot
+        </a>
+    </div>
+    {% endif %}
+</div>
+{% endblock %} 
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/taskmaster/dashboard.html b/dashboard/templates/dashboard/taskmaster/dashboard.html
new file mode 100644
index 0000000..c51c1f5
--- /dev/null
+++ b/dashboard/templates/dashboard/taskmaster/dashboard.html
@@ -0,0 +1,202 @@
+{% extends 'dashboard/base.html' %}
+
+{% block title %}Task Dashboard | Taskmaster{% endblock %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-6">
+    <h1 class="mb-4">Task Dashboard</h1>
+    
+    <!-- Task Stats Cards -->
+    <div class="row mb-4">
+        <div class="col-md-3">
+            <div class="card text-white bg-primary mb-3">
+                <div class="card-body">
+                    <h5 class="card-title">Total Tasks</h5>
+                    <p class="card-text display-4">{{ total_tasks }}</p>
+                </div>
+            </div>
+        </div>
+        <div class="col-md-3">
+            <div class="card text-white bg-success mb-3">
+                <div class="card-body">
+                    <h5 class="card-title">Completed</h5>
+                    <p class="card-text display-4">{{ completed_tasks }}</p>
+                </div>
+            </div>
+        </div>
+        <div class="col-md-3">
+            <div class="card text-dark bg-warning mb-3">
+                <div class="card-body">
+                    <h5 class="card-title">Pending</h5>
+                    <p class="card-text display-4">{{ pending_tasks }}</p>
+                </div>
+            </div>
+        </div>
+        <div class="col-md-3">
+            <div class="card text-white bg-info mb-3">
+                <div class="card-body">
+                    <h5 class="card-title">In Progress</h5>
+                    <p class="card-text display-4">{{ in_progress_tasks }}</p>
+                </div>
+            </div>
+        </div>
+    </div>
+    
+    <div class="row">
+        <!-- Overdue Tasks -->
+        <div class="col-md-6">
+            <div class="card border-danger mb-4">
+                <div class="card-header bg-danger text-white">
+                    <h5 class="mb-0">Overdue Tasks ({{ overdue_tasks.count }})</h5>
+                </div>
+                <div class="card-body p-0">
+                    <div class="list-group list-group-flush">
+                        {% for task in overdue_tasks %}
+                        <a href="{% url 'dashboard:taskmaster:task_detail' task.id %}" class="list-group-item list-group-item-action">
+                            <div class="d-flex w-100 justify-content-between">
+                                <h5 class="mb-1">{{ task.title }}</h5>
+                                <small>Due: {{ task.due_date|date:"M d, Y" }}</small>
+                            </div>
+                            <p class="mb-1">
+                                <span class="badge {% if task.priority == 'urgent' %}bg-danger{% elif task.priority == 'high' %}bg-warning text-dark{% else %}bg-info text-dark{% endif %}">
+                                    {{ task.get_priority_display }}
+                                </span>
+                                <span class="badge bg-secondary">{{ task.get_status_display }}</span>
+                            </p>
+                        </a>
+                        {% empty %}
+                        <div class="list-group-item text-center text-success">
+                            <i class="fas fa-check-circle fa-2x mb-2"></i>
+                            <p>No overdue tasks! Great job!</p>
+                        </div>
+                        {% endfor %}
+                    </div>
+                </div>
+                {% if overdue_tasks.count > 0 %}
+                <div class="card-footer">
+                    <a href="{% url 'dashboard:taskmaster:task_list' %}?status=pending" class="btn btn-sm btn-outline-danger">View All Pending Tasks</a>
+                </div>
+                {% endif %}
+            </div>
+        </div>
+        
+        <!-- Due Soon Tasks -->
+        <div class="col-md-6">
+            <div class="card border-warning mb-4">
+                <div class="card-header bg-warning text-dark">
+                    <h5 class="mb-0">Due Soon (Next 24 Hours) ({{ due_soon_tasks.count }})</h5>
+                </div>
+                <div class="card-body p-0">
+                    <div class="list-group list-group-flush">
+                        {% for task in due_soon_tasks %}
+                        <a href="{% url 'dashboard:taskmaster:task_detail' task.id %}" class="list-group-item list-group-item-action">
+                            <div class="d-flex w-100 justify-content-between">
+                                <h5 class="mb-1">{{ task.title }}</h5>
+                                <small>Due: {{ task.due_date|date:"M d, Y" }}</small>
+                            </div>
+                            <p class="mb-1">
+                                <span class="badge {% if task.priority == 'urgent' %}bg-danger{% elif task.priority == 'high' %}bg-warning text-dark{% else %}bg-info text-dark{% endif %}">
+                                    {{ task.get_priority_display }}
+                                </span>
+                                <span class="badge bg-secondary">{{ task.get_status_display }}</span>
+                            </p>
+                        </a>
+                        {% empty %}
+                        <div class="list-group-item text-center">
+                            <p class="text-muted">No tasks due in the next 24 hours</p>
+                        </div>
+                        {% endfor %}
+                    </div>
+                </div>
+                {% if due_soon_tasks.count > 0 %}
+                <div class="card-footer">
+                    <a href="{% url 'dashboard:taskmaster:task_list' %}" class="btn btn-sm btn-outline-warning">View All Tasks</a>
+                </div>
+                {% endif %}
+            </div>
+        </div>
+    </div>
+    
+    <!-- Recent Tasks -->
+    <div class="card mb-4">
+        <div class="card-header bg-primary text-white">
+            <h5 class="mb-0">Recent Tasks</h5>
+        </div>
+        <div class="card-body p-0">
+            <div class="table-responsive">
+                <table class="table table-hover mb-0">
+                    <thead>
+                        <tr>
+                            <th>Title</th>
+                            <th>Status</th>
+                            <th>Priority</th>
+                            <th>Due Date</th>
+                            <th>Created</th>
+                            <th>Actions</th>
+                        </tr>
+                    </thead>
+                    <tbody>
+                        {% for task in recent_tasks %}
+                        <tr>
+                            <td>{{ task.title }}</td>
+                            <td>
+                                <span class="badge {% if task.status == 'pending' %}bg-warning text-dark{% elif task.status == 'in_progress' %}bg-info text-dark{% elif task.status == 'completed' %}bg-success{% else %}bg-secondary{% endif %}">
+                                    {{ task.get_status_display }}
+                                </span>
+                            </td>
+                            <td>
+                                <span class="badge {% if task.priority == 'urgent' %}bg-danger{% elif task.priority == 'high' %}bg-warning text-dark{% elif task.priority == 'medium' %}bg-info text-dark{% else %}bg-success{% endif %}">
+                                    {{ task.get_priority_display }}
+                                </span>
+                            </td>
+                            <td>
+                                {% if task.due_date %}
+                                {{ task.due_date|date:"M d, Y" }}
+                                {% if task.is_overdue %}
+                                <span class="badge bg-danger">Overdue</span>
+                                {% endif %}
+                                {% else %}
+                                <span class="text-muted">No due date</span>
+                                {% endif %}
+                            </td>
+                            <td>{{ task.created_at|date:"M d, Y" }}</td>
+                            <td>
+                                <a href="{% url 'dashboard:taskmaster:task_detail' task.id %}" class="btn btn-sm btn-outline-primary">
+                                    <i class="fas fa-eye"></i>
+                                </a>
+                                <a href="{% url 'dashboard:taskmaster:task_update' task.id %}" class="btn btn-sm btn-outline-secondary">
+                                    <i class="fas fa-edit"></i>
+                                </a>
+                                <a href="{% url 'dashboard:taskmaster:task_toggle_status' task.id %}" class="btn btn-sm btn-outline-success">
+                                    {% if task.status == 'completed' %}
+                                    <i class="fas fa-undo"></i>
+                                    {% else %}
+                                    <i class="fas fa-check"></i>
+                                    {% endif %}
+                                </a>
+                            </td>
+                        </tr>
+                        {% empty %}
+                        <tr>
+                            <td colspan="6" class="text-center py-4">
+                                <p class="text-muted mb-0">No tasks found</p>
+                            </td>
+                        </tr>
+                        {% endfor %}
+                    </tbody>
+                </table>
+            </div>
+        </div>
+        <div class="card-footer">
+            <div class="d-flex justify-content-between align-items-center">
+                <a href="{% url 'dashboard:taskmaster:task_list' %}" class="btn btn-primary">
+                    <i class="fas fa-list"></i> View All Tasks
+                </a>
+                <a href="{% url 'dashboard:taskmaster:task_create' %}" class="btn btn-success">
+                    <i class="fas fa-plus"></i> Create New Task
+                </a>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/taskmaster/tag_confirm_delete.html b/dashboard/templates/dashboard/taskmaster/tag_confirm_delete.html
new file mode 100644
index 0000000..5d5c41a
--- /dev/null
+++ b/dashboard/templates/dashboard/taskmaster/tag_confirm_delete.html
@@ -0,0 +1,38 @@
+{% extends 'dashboard/base.html' %}
+
+{% block title %}Delete Tag: {{ tag.name }} | Taskmaster{% endblock %}
+
+{% block content %}
+<div class="container mt-4">
+    <div class="row">
+        <div class="col-lg-6 mx-auto">
+            <div class="card border-danger">
+                <div class="card-header bg-danger text-white">
+                    <h1 class="h3 mb-0">Delete Tag</h1>
+                </div>
+                <div class="card-body">
+                    <h2 class="card-title">Are you sure?</h2>
+                    <p class="card-text">
+                        You are about to delete the tag <strong>"{{ tag.name }}"</strong>. This action cannot be undone.
+                    </p>
+                    <p class="card-text text-danger">
+                        <strong>Warning:</strong> This tag will be removed from all associated tasks.
+                    </p>
+                    
+                    <form method="post">
+                        {% csrf_token %}
+                        <div class="d-flex justify-content-between mt-4">
+                            <a href="{% url 'dashboard:taskmaster:tag_list' %}" class="btn btn-secondary">
+                                <i class="fas fa-arrow-left"></i> Cancel
+                            </a>
+                            <button type="submit" class="btn btn-danger">
+                                <i class="fas fa-trash"></i> Delete
+                            </button>
+                        </div>
+                    </form>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/taskmaster/tag_form.html b/dashboard/templates/dashboard/taskmaster/tag_form.html
new file mode 100644
index 0000000..6755561
--- /dev/null
+++ b/dashboard/templates/dashboard/taskmaster/tag_form.html
@@ -0,0 +1,39 @@
+{% extends 'dashboard/base.html' %}
+{% load crispy_forms_tags %}
+
+{% block title %}
+{% if tag %}Edit Tag: {{ tag.name }}{% else %}Create New Tag{% endif %} | Taskmaster
+{% endblock %}
+
+{% block content %}
+<div class="container mt-4">
+    <div class="row">
+        <div class="col-lg-6 mx-auto">
+            <div class="card">
+                <div class="card-header">
+                    <h1 class="h3 mb-0">
+                        {% if tag %}Edit Tag: {{ tag.name }}{% else %}Create New Tag{% endif %}
+                    </h1>
+                </div>
+                <div class="card-body">
+                    <form method="post">
+                        {% csrf_token %}
+                        
+                        {{ form.name|as_crispy_field }}
+                        {{ form.color|as_crispy_field }}
+                        
+                        <div class="d-flex justify-content-between mt-4">
+                            <a href="{% url 'dashboard:taskmaster:tag_list' %}" class="btn btn-secondary">
+                                <i class="fas fa-times"></i> Cancel
+                            </a>
+                            <button type="submit" class="btn btn-primary">
+                                <i class="fas fa-save"></i> Save
+                            </button>
+                        </div>
+                    </form>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/taskmaster/tag_list.html b/dashboard/templates/dashboard/taskmaster/tag_list.html
new file mode 100644
index 0000000..4a12457
--- /dev/null
+++ b/dashboard/templates/dashboard/taskmaster/tag_list.html
@@ -0,0 +1,65 @@
+{% extends 'dashboard/base.html' %}
+
+{% block title %}Tags | Taskmaster{% endblock %}
+
+{% block content %}
+<div class="container mt-4">
+    <div class="d-flex justify-content-between align-items-center mb-4">
+        <h1>Tags</h1>
+        <a href="{% url 'dashboard:taskmaster:tag_create' %}" class="btn btn-primary">
+            <i class="fas fa-plus"></i> New Tag
+        </a>
+    </div>
+    
+    <div class="card">
+        <div class="card-body">
+            {% if tags %}
+            <div class="table-responsive">
+                <table class="table table-hover">
+                    <thead>
+                        <tr>
+                            <th>Name</th>
+                            <th>Color</th>
+                            <th>Actions</th>
+                        </tr>
+                    </thead>
+                    <tbody>
+                        {% for tag in tags %}
+                        <tr>
+                            <td>{{ tag.name }}</td>
+                            <td>
+                                <span class="badge rounded-pill px-3 py-2" style="background-color: {{ tag.color }}">
+                                    {{ tag.color }}
+                                </span>
+                            </td>
+                            <td>
+                                <a href="{% url 'dashboard:taskmaster:tag_update' tag.id %}" class="btn btn-sm btn-outline-primary">
+                                    <i class="fas fa-edit"></i> Edit
+                                </a>
+                                <a href="{% url 'dashboard:taskmaster:tag_delete' tag.id %}" class="btn btn-sm btn-outline-danger">
+                                    <i class="fas fa-trash"></i> Delete
+                                </a>
+                            </td>
+                        </tr>
+                        {% endfor %}
+                    </tbody>
+                </table>
+            </div>
+            {% else %}
+            <div class="text-center py-4">
+                <p class="text-muted">No tags found</p>
+                <a href="{% url 'dashboard:taskmaster:tag_create' %}" class="btn btn-primary">
+                    <i class="fas fa-plus"></i> Create Tag
+                </a>
+            </div>
+            {% endif %}
+        </div>
+    </div>
+    
+    <div class="mt-3">
+        <a href="{% url 'dashboard:taskmaster:dashboard' %}" class="btn btn-secondary">
+            <i class="fas fa-arrow-left"></i> Back to Dashboard
+        </a>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/taskmaster/task_confirm_delete.html b/dashboard/templates/dashboard/taskmaster/task_confirm_delete.html
new file mode 100644
index 0000000..8b96df2
--- /dev/null
+++ b/dashboard/templates/dashboard/taskmaster/task_confirm_delete.html
@@ -0,0 +1,35 @@
+{% extends 'dashboard/base.html' %}
+
+{% block title %}Delete Task: {{ task.title }} | Taskmaster{% endblock %}
+
+{% block content %}
+<div class="container mt-4">
+    <div class="row">
+        <div class="col-lg-6 mx-auto">
+            <div class="card border-danger">
+                <div class="card-header bg-danger text-white">
+                    <h1 class="h3 mb-0">Delete Task</h1>
+                </div>
+                <div class="card-body">
+                    <h2 class="card-title">Are you sure?</h2>
+                    <p class="card-text">
+                        You are about to delete the task <strong>"{{ task.title }}"</strong>. This action cannot be undone.
+                    </p>
+                    
+                    <form method="post">
+                        {% csrf_token %}
+                        <div class="d-flex justify-content-between mt-4">
+                            <a href="{% url 'dashboard:taskmaster:task_detail' task.id %}" class="btn btn-secondary">
+                                <i class="fas fa-arrow-left"></i> Cancel
+                            </a>
+                            <button type="submit" class="btn btn-danger">
+                                <i class="fas fa-trash"></i> Delete
+                            </button>
+                        </div>
+                    </form>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/taskmaster/task_detail.html b/dashboard/templates/dashboard/taskmaster/task_detail.html
new file mode 100644
index 0000000..3653d9d
--- /dev/null
+++ b/dashboard/templates/dashboard/taskmaster/task_detail.html
@@ -0,0 +1,91 @@
+{% extends 'dashboard/base.html' %}
+
+{% block title %}{{ task.title }} | Taskmaster{% endblock %}
+
+{% block content %}
+<div class="container mt-4">
+    <div class="row">
+        <div class="col-lg-8 mx-auto">
+            <div class="card">
+                <div class="card-header d-flex justify-content-between align-items-center">
+                    <h1 class="h3 mb-0">Task Details</h1>
+                    <div>
+                        <a href="{% url 'dashboard:taskmaster:task_update' task.id %}" class="btn btn-primary">
+                            <i class="fas fa-edit"></i> Edit
+                        </a>
+                        <a href="{% url 'dashboard:taskmaster:task_delete' task.id %}" class="btn btn-danger">
+                            <i class="fas fa-trash"></i> Delete
+                        </a>
+                    </div>
+                </div>
+                <div class="card-body">
+                    <h2 class="card-title">{{ task.title }}</h2>
+                    
+                    <div class="mb-3">
+                        <span class="badge {% if task.priority == 'urgent' %}bg-danger{% elif task.priority == 'high' %}bg-warning text-dark{% elif task.priority == 'medium' %}bg-info text-dark{% else %}bg-success{% endif %}">
+                            {{ task.get_priority_display }}
+                        </span>
+                        <span class="badge {% if task.status == 'pending' %}bg-warning text-dark{% elif task.status == 'in_progress' %}bg-info text-dark{% elif task.status == 'completed' %}bg-success{% else %}bg-secondary{% endif %}">
+                            {{ task.get_status_display }}
+                        </span>
+                        {% if task.is_overdue %}
+                        <span class="badge bg-danger">Overdue</span>
+                        {% endif %}
+                    </div>
+                    
+                    {% if task.tag_assignments.exists %}
+                    <div class="mb-3">
+                        <strong>Tags:</strong>
+                        {% for assignment in task.tag_assignments.all %}
+                        <span class="badge rounded-pill" style="background-color: {{ assignment.tag.color }}">
+                            {{ assignment.tag.name }}
+                        </span>
+                        {% endfor %}
+                    </div>
+                    {% endif %}
+                    
+                    {% if task.due_date %}
+                    <div class="mb-3">
+                        <strong>Due Date:</strong> {{ task.due_date|date:"F j, Y, g:i a" }}
+                    </div>
+                    {% endif %}
+                    
+                    <div class="mb-3">
+                        <strong>Created:</strong> {{ task.created_at|date:"F j, Y, g:i a" }}
+                    </div>
+                    
+                    <div class="mb-3">
+                        <strong>Last Updated:</strong> {{ task.updated_at|date:"F j, Y, g:i a" }}
+                    </div>
+                    
+                    <div class="mb-3">
+                        <strong>Description:</strong>
+                        <div class="card bg-light mt-2">
+                            <div class="card-body">
+                                {% if task.description %}
+                                <p class="card-text">{{ task.description|linebreaks }}</p>
+                                {% else %}
+                                <p class="card-text text-muted">No description provided.</p>
+                                {% endif %}
+                            </div>
+                        </div>
+                    </div>
+                    
+                    <div class="mt-4">
+                        <a href="{% url 'dashboard:taskmaster:task_toggle_status' task.id %}" class="btn btn-primary">
+                            {% if task.status == 'completed' %}
+                            <i class="fas fa-undo"></i> Mark as Pending
+                            {% else %}
+                            <i class="fas fa-check"></i> Mark as Completed
+                            {% endif %}
+                        </a>
+                        <a href="{% url 'dashboard:taskmaster:task_list' %}" class="btn btn-secondary">
+                            <i class="fas fa-arrow-left"></i> Back to List
+                        </a>
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/taskmaster/task_form.html b/dashboard/templates/dashboard/taskmaster/task_form.html
new file mode 100644
index 0000000..782e680
--- /dev/null
+++ b/dashboard/templates/dashboard/taskmaster/task_form.html
@@ -0,0 +1,70 @@
+{% extends 'dashboard/base.html' %}
+{% load crispy_forms_tags %}
+
+{% block title %}
+{% if task %}Edit Task: {{ task.title }}{% else %}Create New Task{% endif %} | Taskmaster
+{% endblock %}
+
+{% block content %}
+<div class="container mt-4">
+    <div class="row">
+        <div class="col-lg-8 mx-auto">
+            <div class="card">
+                <div class="card-header">
+                    <h1 class="h3 mb-0">
+                        {% if task %}Edit Task: {{ task.title }}{% else %}Create New Task{% endif %}
+                    </h1>
+                </div>
+                <div class="card-body">
+                    <form method="post">
+                        {% csrf_token %}
+                        
+                        <div class="row">
+                            <div class="col-md-8">
+                                {{ form.title|as_crispy_field }}
+                            </div>
+                            <div class="col-md-4">
+                                {{ form.due_date|as_crispy_field }}
+                            </div>
+                        </div>
+                        
+                        <div class="row">
+                            <div class="col-md-6">
+                                {{ form.status|as_crispy_field }}
+                            </div>
+                            <div class="col-md-6">
+                                {{ form.priority|as_crispy_field }}
+                            </div>
+                        </div>
+                        
+                        {{ form.description|as_crispy_field }}
+                        
+                        <div class="card mb-3">
+                            <div class="card-header">
+                                <h5 class="mb-0">Tags</h5>
+                            </div>
+                            <div class="card-body">
+                                {{ form.tags|as_crispy_field }}
+                                <div class="text-end">
+                                    <a href="{% url 'dashboard:taskmaster:tag_create' %}" class="btn btn-sm btn-outline-primary" target="_blank">
+                                        <i class="fas fa-plus"></i> Create New Tag
+                                    </a>
+                                </div>
+                            </div>
+                        </div>
+                        
+                        <div class="d-flex justify-content-between">
+                            <a href="{% if task %}{% url 'dashboard:taskmaster:task_detail' task.id %}{% else %}{% url 'dashboard:taskmaster:task_list' %}{% endif %}" class="btn btn-secondary">
+                                <i class="fas fa-times"></i> Cancel
+                            </a>
+                            <button type="submit" class="btn btn-primary">
+                                <i class="fas fa-save"></i> Save
+                            </button>
+                        </div>
+                    </form>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/taskmaster/task_list.html b/dashboard/templates/dashboard/taskmaster/task_list.html
new file mode 100644
index 0000000..1b37749
--- /dev/null
+++ b/dashboard/templates/dashboard/taskmaster/task_list.html
@@ -0,0 +1,185 @@
+{% extends 'dashboard/base.html' %}
+
+{% block title %}Tasks | Taskmaster{% endblock %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-6">
+    <div class="d-flex justify-content-between align-items-center mb-4">
+        <h1>Tasks</h1>
+        <a href="{% url 'dashboard:taskmaster:task_create' %}" class="btn btn-primary">
+            <i class="fas fa-plus"></i> New Task
+        </a>
+    </div>
+    
+    <!-- Filters -->
+    <div class="card mb-4">
+        <div class="card-body">
+            <form method="get" class="row g-3">
+                <div class="col-md-4">
+                    <label for="status" class="form-label">Status</label>
+                    <select name="status" id="status" class="form-select">
+                        <option value="">All</option>
+                        <option value="pending" {% if status_filter == 'pending' %}selected{% endif %}>Pending</option>
+                        <option value="in_progress" {% if status_filter == 'in_progress' %}selected{% endif %}>In Progress</option>
+                        <option value="completed" {% if status_filter == 'completed' %}selected{% endif %}>Completed</option>
+                        <option value="canceled" {% if status_filter == 'canceled' %}selected{% endif %}>Canceled</option>
+                    </select>
+                </div>
+                <div class="col-md-4">
+                    <label for="priority" class="form-label">Priority</label>
+                    <select name="priority" id="priority" class="form-select">
+                        <option value="">All</option>
+                        <option value="low" {% if priority_filter == 'low' %}selected{% endif %}>Low</option>
+                        <option value="medium" {% if priority_filter == 'medium' %}selected{% endif %}>Medium</option>
+                        <option value="high" {% if priority_filter == 'high' %}selected{% endif %}>High</option>
+                        <option value="urgent" {% if priority_filter == 'urgent' %}selected{% endif %}>Urgent</option>
+                    </select>
+                </div>
+                <div class="col-md-4">
+                    <label for="search" class="form-label">Search</label>
+                    <input type="text" name="search" id="search" class="form-control" value="{{ search_query }}">
+                </div>
+                <div class="col-12">
+                    <button type="submit" class="btn btn-primary">Apply Filters</button>
+                    <a href="{% url 'dashboard:taskmaster:task_list' %}" class="btn btn-secondary">Clear Filters</a>
+                </div>
+            </form>
+        </div>
+    </div>
+    
+    <!-- Kanban Board -->
+    <div class="row">
+        <!-- Pending Tasks -->
+        <div class="col-md-4">
+            <div class="card bg-light mb-4">
+                <div class="card-header bg-warning text-dark">
+                    <h5 class="mb-0">Pending ({{ pending_tasks.count }})</h5>
+                </div>
+                <div class="card-body p-2">
+                    {% for task in pending_tasks %}
+                    <div class="card mb-2">
+                        <div class="card-body">
+                            <h5 class="card-title">{{ task.title }}</h5>
+                            {% if task.due_date %}
+                            <p class="card-text text-muted">
+                                <i class="far fa-calendar-alt"></i> 
+                                {{ task.due_date|date:"M d, Y" }}
+                                {% if task.is_overdue %}
+                                <span class="badge bg-danger">Overdue</span>
+                                {% endif %}
+                            </p>
+                            {% endif %}
+                            
+                            <div class="mt-2 d-flex justify-content-between align-items-center">
+                                <span class="badge {% if task.priority == 'urgent' %}bg-danger{% elif task.priority == 'high' %}bg-warning text-dark{% elif task.priority == 'medium' %}bg-info text-dark{% else %}bg-success{% endif %}">
+                                    {{ task.get_priority_display }}
+                                </span>
+                                <div>
+                                    <a href="{% url 'dashboard:taskmaster:task_detail' task.id %}" class="btn btn-sm btn-outline-primary">
+                                        <i class="fas fa-eye"></i>
+                                    </a>
+                                    <a href="{% url 'dashboard:taskmaster:task_toggle_status' task.id %}" class="btn btn-sm btn-outline-success">
+                                        <i class="fas fa-check"></i>
+                                    </a>
+                                </div>
+                            </div>
+                        </div>
+                    </div>
+                    {% empty %}
+                    <div class="text-center py-4">
+                        <p class="text-muted">No pending tasks</p>
+                    </div>
+                    {% endfor %}
+                </div>
+            </div>
+        </div>
+        
+        <!-- In Progress Tasks -->
+        <div class="col-md-4">
+            <div class="card bg-light mb-4">
+                <div class="card-header bg-info text-dark">
+                    <h5 class="mb-0">In Progress ({{ in_progress_tasks.count }})</h5>
+                </div>
+                <div class="card-body p-2">
+                    {% for task in in_progress_tasks %}
+                    <div class="card mb-2">
+                        <div class="card-body">
+                            <h5 class="card-title">{{ task.title }}</h5>
+                            {% if task.due_date %}
+                            <p class="card-text text-muted">
+                                <i class="far fa-calendar-alt"></i> 
+                                {{ task.due_date|date:"M d, Y" }}
+                                {% if task.is_overdue %}
+                                <span class="badge bg-danger">Overdue</span>
+                                {% endif %}
+                            </p>
+                            {% endif %}
+                            
+                            <div class="mt-2 d-flex justify-content-between align-items-center">
+                                <span class="badge {% if task.priority == 'urgent' %}bg-danger{% elif task.priority == 'high' %}bg-warning text-dark{% elif task.priority == 'medium' %}bg-info text-dark{% else %}bg-success{% endif %}">
+                                    {{ task.get_priority_display }}
+                                </span>
+                                <div>
+                                    <a href="{% url 'dashboard:taskmaster:task_detail' task.id %}" class="btn btn-sm btn-outline-primary">
+                                        <i class="fas fa-eye"></i>
+                                    </a>
+                                    <a href="{% url 'dashboard:taskmaster:task_toggle_status' task.id %}" class="btn btn-sm btn-outline-success">
+                                        <i class="fas fa-check"></i>
+                                    </a>
+                                </div>
+                            </div>
+                        </div>
+                    </div>
+                    {% empty %}
+                    <div class="text-center py-4">
+                        <p class="text-muted">No in-progress tasks</p>
+                    </div>
+                    {% endfor %}
+                </div>
+            </div>
+        </div>
+        
+        <!-- Completed Tasks -->
+        <div class="col-md-4">
+            <div class="card bg-light mb-4">
+                <div class="card-header bg-success text-white">
+                    <h5 class="mb-0">Completed ({{ completed_tasks.count }})</h5>
+                </div>
+                <div class="card-body p-2">
+                    {% for task in completed_tasks %}
+                    <div class="card mb-2">
+                        <div class="card-body">
+                            <h5 class="card-title">{{ task.title }}</h5>
+                            {% if task.due_date %}
+                            <p class="card-text text-muted">
+                                <i class="far fa-calendar-alt"></i> 
+                                {{ task.due_date|date:"M d, Y" }}
+                            </p>
+                            {% endif %}
+                            
+                            <div class="mt-2 d-flex justify-content-between align-items-center">
+                                <span class="badge {% if task.priority == 'urgent' %}bg-danger{% elif task.priority == 'high' %}bg-warning text-dark{% elif task.priority == 'medium' %}bg-info text-dark{% else %}bg-success{% endif %}">
+                                    {{ task.get_priority_display }}
+                                </span>
+                                <div>
+                                    <a href="{% url 'dashboard:taskmaster:task_detail' task.id %}" class="btn btn-sm btn-outline-primary">
+                                        <i class="fas fa-eye"></i>
+                                    </a>
+                                    <a href="{% url 'dashboard:taskmaster:task_toggle_status' task.id %}" class="btn btn-sm btn-outline-warning">
+                                        <i class="fas fa-undo"></i>
+                                    </a>
+                                </div>
+                            </div>
+                        </div>
+                    </div>
+                    {% empty %}
+                    <div class="text-center py-4">
+                        <p class="text-muted">No completed tasks</p>
+                    </div>
+                    {% endfor %}
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templatetags/dashboard_extras.py b/dashboard/templatetags/dashboard_extras.py
new file mode 100644
index 0000000..bc73ae0
--- /dev/null
+++ b/dashboard/templatetags/dashboard_extras.py
@@ -0,0 +1,16 @@
+from django import template
+import pprint
+
+register = template.Library()
+
+@register.filter
+def get_item(dictionary, key):
+    """Get a specific key from a dictionary."""
+    if not dictionary:
+        return None
+    return dictionary.get(key)
+
+@register.filter
+def pprint(obj):
+    """Pretty print an object."""
+    return pprint.pformat(obj, indent=2) 
\ No newline at end of file
diff --git a/dashboard/tests.py b/dashboard/tests.py
new file mode 100644
index 0000000..38dace7
--- /dev/null
+++ b/dashboard/tests.py
@@ -0,0 +1,107 @@
+from django.test import TestCase, Client
+from django.urls import reverse
+from django.contrib.auth.models import User
+from .models import Bot, Server, Command
+from django.db.models import Sum
+
+class DashboardViewTests(TestCase):
+    def setUp(self):
+        # 創建測試用戶
+        self.user = User.objects.create_user(
+            username='testuser',
+            password='testpass123'
+        )
+        self.client = Client()
+        
+        # 創建測試機器人
+        self.bot = Bot.objects.create(
+            owner=self.user,
+            name='Test Bot',
+            token='test-token',
+            prefix='!',
+            is_active=True
+        )
+        
+        # 創建測試伺服器
+        self.server = Server.objects.create(
+            bot=self.bot,
+            server_id='123456789',
+            name='Test Server',
+            is_active=True
+        )
+        
+        # 創建測試命令
+        self.command = Command.objects.create(
+            bot=self.bot,
+            name='test',
+            uses=10
+        )
+
+    def test_index_view(self):
+        """測試首頁視圖"""
+        # 測試未登入時的回應
+        response = self.client.get(reverse('dashboard:index'))
+        self.assertEqual(response.status_code, 200)
+        
+        # 測試登入後的回應
+        self.client.login(username='testuser', password='testpass123')
+        response = self.client.get(reverse('dashboard:index'))
+        self.assertEqual(response.status_code, 200)
+        self.assertTrue('bots_count' in response.context)
+        self.assertTrue('servers_count' in response.context)
+
+    def test_home_view(self):
+        """測試儀表板主頁視圖"""
+        self.client.login(username='testuser', password='testpass123')
+        response = self.client.get(reverse('dashboard:servers'))
+        self.assertEqual(response.status_code, 200)
+        self.assertTrue('admin_servers' in response.context)
+        self.assertTrue('active_bots' in response.context)
+        self.assertTrue('total_commands' in response.context)
+
+    def test_bot_list_view(self):
+        """測試機器人列表視圖"""
+        self.client.login(username='testuser', password='testpass123')
+        response = self.client.get(reverse('dashboard:bot:list'))
+        self.assertEqual(response.status_code, 200)
+        self.assertTrue('bots' in response.context)
+
+    def test_analytics_view(self):
+        """測試分析頁面視圖"""
+        self.client.login(username='testuser', password='testpass123')
+        response = self.client.get(reverse('dashboard:analytics:overview'))
+        self.assertEqual(response.status_code, 200)
+        self.assertTrue('total_bots' in response.context)
+        self.assertTrue('active_bots' in response.context)
+        self.assertTrue('total_servers' in response.context)
+        self.assertTrue('total_commands' in response.context)
+
+    def test_url_patterns(self):
+        """測試所有 URL 模式是否正確配置"""
+        # 測試主要 URL
+        self.assertEqual(reverse('dashboard:index'), '/dashboard/')
+        self.assertEqual(reverse('dashboard:servers'), '/dashboard/servers/')
+        
+        # 測試機器人相關 URL
+        self.assertEqual(reverse('dashboard:bot:list'), '/dashboard/bots/')
+        self.assertEqual(reverse('dashboard:bot:add'), '/dashboard/bots/add/')
+        self.assertEqual(
+            reverse('dashboard:bot:detail', kwargs={'bot_id': 1}),
+            '/dashboard/bots/1/'
+        )
+        
+        # 測試分析相關 URL
+        self.assertEqual(
+            reverse('dashboard:analytics:overview'),
+            '/dashboard/analytics/'
+        )
+        
+        # 測試認證相關 URL
+        self.assertEqual(
+            reverse('dashboard:oauth2_login'),
+            '/dashboard/oauth2/login/'
+        )
+        self.assertEqual(
+            reverse('dashboard:logout'),
+            '/dashboard/logout/'
+        ) 
\ No newline at end of file
diff --git a/dashboard/urls.py b/dashboard/urls.py
new file mode 100644
index 0000000..c7e6883
--- /dev/null
+++ b/dashboard/urls.py
@@ -0,0 +1,39 @@
+from django.urls import path, include
+from . import views
+
+app_name = 'dashboard'
+
+# Bot management URLs
+bot_patterns = [
+    path('', views.bot_list, name='list'),
+    path('add/', views.bot_add, name='add'),
+    path('<int:bot_id>/', views.bot_detail, name='detail'),
+    path('<int:bot_id>/toggle/', views.bot_toggle, name='toggle'),
+]
+
+# Analytics URLs
+analytics_patterns = [
+    path('', views.stats, name='overview'),
+]
+
+urlpatterns = [
+    # Main views
+    path('', views.index, name='index'),
+    path('servers/', views.server_list, name='servers'),
+    path('stats/', views.stats, name='stats'),
+    
+    # OAuth2 endpoints
+    path('oauth2/login/', views.oauth2_login, name='oauth2_login'),
+    path('oauth2/callback/', views.oauth2_callback, name='oauth2_callback'),
+    path('logout/', views.logout_view, name='logout'),
+    path('oauth2/debug/', views.oauth2_debug, name='oauth2_debug'),
+    
+    # Bot management
+    path('bots/', include((bot_patterns, 'dashboard'), namespace='bot')),
+    
+    # Analytics
+    path('analytics/', include((analytics_patterns, 'dashboard'), namespace='analytics')),
+    
+    # Taskmaster - use the correct namespace format to avoid conflicts
+path('taskmaster/', include('dashboard.taskmaster.urls', namespace='taskmaster')),
+]
\ No newline at end of file
diff --git a/dashboard/views.py b/dashboard/views.py
new file mode 100644
index 0000000..e30217a
--- /dev/null
+++ b/dashboard/views.py
@@ -0,0 +1,284 @@
+from django.shortcuts import render, redirect, get_object_or_404
+from django.contrib.auth.decorators import login_required
+from django.http import JsonResponse
+from django.core.paginator import Paginator
+from django.db.models import Count
+from .models import Bot, Command, CommandExecution
+import json
+import requests
+from datetime import datetime, timedelta
+from django.contrib.auth import logout, login
+from django.conf import settings
+from django.urls import reverse
+from django.contrib.auth.models import User
+import secrets
+
+@login_required
+def index(request):
+    """Dashboard home view."""
+    user_bots = Bot.objects.filter(owner=request.user)
+    
+    # Stats for dashboard overview
+    total_bots = user_bots.count()
+    total_commands = Command.objects.filter(bot__in=user_bots).count()
+    total_executions = CommandExecution.objects.filter(command__bot__in=user_bots).count()
+    
+    # Recent executions for activity feed
+    recent_executions = CommandExecution.objects.filter(
+        command__bot__in=user_bots
+    ).order_by('-executed_at')[:10]
+    
+    # Top commands by usage
+    top_commands = Command.objects.filter(
+        bot__in=user_bots
+    ).annotate(
+        execution_count=Count('commandexecution')
+    ).order_by('-execution_count')[:5]
+    
+    context = {
+        'total_bots': total_bots,
+        'total_commands': total_commands,
+        'total_executions': total_executions,
+        'recent_executions': recent_executions,
+        'top_commands': top_commands,
+        'user_bots': user_bots,
+    }
+    
+    return render(request, 'dashboard/index.html', context)
+
+@login_required
+def bot_list(request):
+    """Bot list view."""
+    user_bots = Bot.objects.filter(owner=request.user)
+    
+    # Set up pagination
+    paginator = Paginator(user_bots, 12)  # Show 12 bots per page
+    page = request.GET.get('page')
+    bots = paginator.get_page(page)
+    
+    context = {
+        'bots': bots,
+    }
+    
+    return render(request, 'dashboard/new_bots.html', context)
+
+@login_required
+def bot_add(request):
+    """Add new bot view."""
+    if request.method == 'POST':
+        token = request.POST.get('token')
+        prefix = request.POST.get('prefix', '!')
+        
+        # Create new bot
+        bot = Bot.objects.create(
+            token=token,
+            prefix=prefix,
+            owner=request.user
+        )
+        
+        return JsonResponse({
+            'status': 'success',
+            'bot': {
+                'id': bot.id,
+                'name': bot.name
+            }
+        })
+    
+    return render(request, 'dashboard/bot_add.html')
+
+@login_required
+def bot_detail(request, bot_id):
+    """Bot detail view."""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    
+    # Get bot statistics
+    total_commands = bot.commands.count()
+    total_executions = CommandExecution.objects.filter(command__bot=bot).count()
+    
+    # Get recent executions
+    recent_executions = CommandExecution.objects.filter(
+        command__bot=bot
+    ).order_by('-executed_at')[:10]
+    
+    # Get top commands
+    top_commands = bot.commands.annotate(
+        execution_count=Count('commandexecution')
+    ).order_by('-execution_count')[:5]
+    
+    context = {
+        'bot': bot,
+        'total_commands': total_commands,
+        'total_executions': total_executions,
+        'recent_executions': recent_executions,
+        'top_commands': top_commands,
+    }
+    
+    return render(request, 'dashboard/bot_detail.html', context)
+
+@login_required
+def bot_toggle(request, bot_id):
+    """Toggle bot active status."""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    
+    if request.method == 'POST':
+        action = request.POST.get('action')
+        if action == 'activate':
+            bot.is_active = True
+        elif action == 'deactivate':
+            bot.is_active = False
+        bot.save()
+        
+        return JsonResponse({'success': True})
+    
+    return JsonResponse({'success': False}, status=405)
+
+@login_required
+def server_list(request):
+    """Server list view."""
+    user_bots = Bot.objects.filter(owner=request.user)
+    
+    context = {
+        'bots': user_bots,
+    }
+    
+    return render(request, 'dashboard/servers.html', context)
+
+@login_required
+def stats(request):
+    """Statistics view."""
+    user_bots = Bot.objects.filter(owner=request.user)
+    
+    # Get date range (last 30 days)
+    end_date = datetime.now()
+    start_date = end_date - timedelta(days=30)
+    
+    # Commands executed over time
+    executions_by_day = CommandExecution.objects.filter(
+        command__bot__in=user_bots,
+        executed_at__gte=start_date,
+        executed_at__lte=end_date
+    ).values('executed_at__date').annotate(count=Count('id')).order_by('executed_at__date')
+    
+    # Format the data for the frontend
+    days = [(start_date + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(31)]
+    usage_counts = [0] * 31
+    
+    for execution in executions_by_day:
+        day = execution['executed_at__date'].strftime('%Y-%m-%d')
+        if day in days:
+            day_index = days.index(day)
+            usage_counts[day_index] = execution['count']
+    
+    context = {
+        'bots': user_bots,
+        'usage_data': {
+            'labels': days,
+            'counts': usage_counts
+        }
+    }
+    
+    return render(request, 'dashboard/stats.html', context)
+
+def oauth2_login(request):
+    """Discord OAuth2 login."""
+    # Save the 'next' parameter if it exists
+    next_url = request.GET.get('next')
+    if next_url:
+        request.session['next'] = next_url
+        
+    client_id = settings.DISCORD_CLIENT_ID
+    redirect_uri = request.build_absolute_uri(reverse('dashboard:oauth2_callback'))
+    scope = 'identify guilds email'  # Added email scope
+    
+    # Add state parameter for security
+    state = secrets.token_urlsafe(32)
+    request.session['oauth_state'] = state
+    
+    oauth2_url = (
+        f'https://discord.com/api/oauth2/authorize'
+        f'?client_id={client_id}'
+        f'&redirect_uri={redirect_uri}'
+        f'&response_type=code'
+        f'&scope={scope}'
+        f'&state={state}'
+    )
+    return redirect(oauth2_url)
+
+def oauth2_callback(request):
+    """Discord OAuth2 callback."""
+    code = request.GET.get('code')
+    if not code:
+        return redirect('dashboard:index')
+        
+    # Exchange the code for an access token
+    data = {
+        'client_id': settings.DISCORD_CLIENT_ID,
+        'client_secret': settings.DISCORD_CLIENT_SECRET,
+        'grant_type': 'authorization_code',
+        'code': code,
+        'redirect_uri': request.build_absolute_uri(reverse('dashboard:oauth2_callback')),
+        'scope': 'identify guilds'
+    }
+    
+    headers = {
+        'Content-Type': 'application/x-www-form-urlencoded'
+    }
+    
+    # Make the token exchange request
+    response = requests.post('https://discord.com/api/oauth2/token', data=data, headers=headers)
+    
+    if response.status_code == 200:
+        # Store the tokens in session
+        tokens = response.json()
+        request.session['discord_access_token'] = tokens['access_token']
+        if 'refresh_token' in tokens:
+            request.session['discord_refresh_token'] = tokens['refresh_token']
+            
+        # Get user info from Discord
+        user_response = requests.get(
+            'https://discord.com/api/users/@me',
+            headers={'Authorization': f"Bearer {tokens['access_token']}"}
+        )
+        
+        if user_response.status_code == 200:
+            discord_user = user_response.json()
+            
+            # Try to find existing user or create new one
+            try:
+                user = User.objects.get(username=f"discord_{discord_user['id']}")
+            except User.DoesNotExist:
+                # Create new user
+                user = User.objects.create_user(
+                    username=f"discord_{discord_user['id']}",
+                    email=discord_user.get('email', ''),
+                    first_name=discord_user.get('username', '')
+                )
+                
+            # Store Discord info in session
+            request.session['discord_user'] = {
+                'id': discord_user['id'],
+                'username': discord_user['username'],
+                'discriminator': discord_user.get('discriminator', ''),
+                'avatar': discord_user.get('avatar', '')
+            }
+            
+            # Log the user in
+            login(request, user)
+            
+            # Redirect to the next URL if it exists, otherwise to dashboard
+            next_url = request.session.get('next', 'dashboard:index')
+            if 'next' in request.session:
+                del request.session['next']
+            return redirect(next_url)
+            
+    # If something went wrong, redirect to login
+    return redirect('dashboard:oauth2_login')
+
+def oauth2_debug(request):
+    """Debug OAuth2 data."""
+    return render(request, 'dashboard/oauth2_debug.html')
+
+def logout_view(request):
+    """Logout view."""
+    logout(request)
+    return redirect('login')
\ No newline at end of file
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
index 0000000..93c4375
--- /dev/null
+++ b/docker-compose.yml
@@ -0,0 +1,57 @@
+version: '3.8'
+
+services:
+  web:
+    build: .
+    restart: always
+    volumes:
+      - static_volume:/app/staticfiles
+      - media_volume:/app/media
+      - logs_volume:/app/logs
+    env_file:
+      - .env
+    depends_on:
+      - db
+    networks:
+      - app_network
+    command: >
+      bash -c "python manage.py migrate &&
+              gunicorn --bind 0.0.0.0:8000 --workers 3 config.wsgi:application"
+
+  db:
+    image: postgres:14-alpine
+    restart: always
+    volumes:
+      - postgres_data:/var/lib/postgresql/data/
+    env_file:
+      - .env
+    environment:
+      - POSTGRES_PASSWORD=${DB_PASSWORD}
+      - POSTGRES_USER=${DB_USER}
+      - POSTGRES_DB=${DB_NAME}
+    networks:
+      - app_network
+
+  nginx:
+    image: nginx:alpine
+    restart: always
+    volumes:
+      - static_volume:/app/staticfiles
+      - media_volume:/app/media
+      - ./nginx:/etc/nginx/conf.d
+    ports:
+      - "80:80"
+      - "443:443"
+    depends_on:
+      - web
+    networks:
+      - app_network
+
+networks:
+  app_network:
+
+volumes:
+  postgres_data:
+  static_volume:
+  media_volume:
+  logs_volume:
\ No newline at end of file
diff --git a/environment.yml b/environment.yml
index 02fff61..84406d8 100644
--- a/environment.yml
+++ b/environment.yml
@@ -8,9 +8,17 @@ dependencies:
   - pip
   - pip:
     - django-crispy-forms
+    - crispy-bootstrap5
     - django-environ
+    - python-decouple
+    - python-dotenv
+    - discord.py>=2.3.0
+    - djangorestframework>=3.16.0
+    - django-cors-headers>=4.3.1
+    - psycopg2-binary>=2.9.9
     - whitenoise
     - gunicorn
+    - cryptography>=42.0.7
     # Test dependencies
     - pytest
     - pytest-django
diff --git a/pytest.ini b/pytest.ini
new file mode 100644
index 0000000..3d489e5
--- /dev/null
+++ b/pytest.ini
@@ -0,0 +1,4 @@
+[pytest]
+DJANGO_SETTINGS_MODULE = social_cube.settings
+python_files = tests.py test_*.py *_tests.py
+addopts = --reuse-db --nomigrations --cov=. --cov-report=html 
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
index c763300..535fd7f 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,15 +1,13 @@
-selenium>=4.15.2
-webdriver-manager>=4.0.1
-Django>=4.2.0
-python-dotenv>=1.0.0
+django>=4.2.0
+djangorestframework>=3.16.0
 discord.py>=2.3.0
-requests>=2.31.0
-python-jose>=3.3.0
-cryptography>=41.0.0
-django-crispy-forms>=2.0
-crispy-bootstrap5>=0.7
-whitenoise>=6.5.0
-gunicorn>=21.2.0
-psycopg2-binary>=2.9.9
+python-decouple>=3.8
 django-environ>=0.11.2
-django-cors-headers>=4.3.0
\ No newline at end of file
+python-dotenv>=1.0.0
+psycopg2-binary>=2.9.9
+whitenoise>=6.6.0
+django-cors-headers>=4.3.1
+django-crispy-forms>=2.1
+crispy-bootstrap5>=2023.10
+gunicorn>=21.2.0
+cryptography>=42.0.7
\ No newline at end of file
diff --git a/run_dev.bat b/run_dev.bat
new file mode 100644
index 0000000..0258264
--- /dev/null
+++ b/run_dev.bat
@@ -0,0 +1,2 @@
+@echo off
+python manage.py runserver
\ No newline at end of file
diff --git a/run_dev.sh b/run_dev.sh
new file mode 100644
index 0000000..599c093
--- /dev/null
+++ b/run_dev.sh
@@ -0,0 +1,2 @@
+#!/bin/bash
+python manage.py runserver
\ No newline at end of file
diff --git a/scripts/PRD.txt b/scripts/PRD.txt
new file mode 100644
index 0000000..a3c322a
--- /dev/null
+++ b/scripts/PRD.txt
@@ -0,0 +1,101 @@
+# Discord BOT 管理系統 - PRD（產品需求文件）
+
+## 一、專案簡述
+本專案旨在開發一套集中式的 Discord BOT 管理系統，提供 Web 控制面板與 API 服務，支援多 BOT、多伺服器運作，並符合 Discord 最新的 App Commands（/指令）設計標準。
+
+---
+
+## 二、產品目標
+- 集中管理 Discord BOT，支援多 BOT、多伺服器。
+- 提供簡潔易用的 Web 控制面板。
+- 完全採用 Discord 最新的 `/指令` 規範。
+- 高效能、高可維護性、高擴充性設計。
+
+---
+
+## 三、使用者故事
+1. 作為系統管理員，我希望能夠新增或刪除 BOT，方便管理多個 BOT。
+2. 作為伺服器管理員，我希望能設定 BOT 在不同伺服器的行為與指令。
+3. 作為一般使用者，我希望能快速透過 Dashboard 查看 BOT 狀態與操作紀錄。
+
+---
+
+## 四、功能需求
+
+### 4.1 核心功能
+- **BOT 註冊管理**：新增、刪除、啟用、停用 BOT。
+- **指令管理**：管理並同步 `/指令` 到 Discord Server。
+- **伺服器管理**：顯示與管理 BOT 所在的 Guild（伺服器）。
+- **設定管理**：每個伺服器可自訂通知頻道、公告內容等。
+- **登入系統**：使用 Discord OAuth2 認證登入。
+- **日誌系統**：記錄重要操作與錯誤資訊。
+
+### 4.2 進階功能
+- **即時狀態更新**：Dashboard 顯示 BOT 在線狀態與錯誤提示。
+- **權限控制**：細分不同層級的使用者權限。
+- **多語系支援**（選擇性開發）：辨識台灣/中國用語差異。
+
+---
+
+## 五、非功能性需求
+- 高效能，能支撐大型伺服器需求。
+- 高安全性，防止 Token 洩漏與未授權存取。
+- 良好可維護性，模組分層清楚。
+- 可擴充性，方便未來增加新功能或新 BOT。
+- 支援 Docker 化部署。
+
+---
+
+## 六、技術規劃
+
+| 分類 | 技術選型 |
+|:---|:---|
+| 後端框架 | Django 4.2+ |
+| BOT 框架 | discord.py 2.3+ (app_commands) |
+| 資料庫 | PostgreSQL（或初期 SQLite） |
+| 前端框架 | Bootstrap 5 / Tailwind CSS + Alpine.js |
+| 部署平台 | Docker + Docker Compose |
+| 溝通方式 | RESTful API（可選用 WebSocket 提升即時性） |
+
+---
+
+## 七、系統架構概述
+- Django 管理 Web 控制面板與資料庫 API。
+- BOT 透過 discord.py 運作，並與後端 API 同步。
+- Dashboard 由輕量級前端建構，提供登入、設定、即時狀態查詢功能。
+
+---
+
+## 八、里程碑規劃
+1. **MVP階段**：
+   - 完成 BOT 註冊與基本指令同步。
+   - Dashboard 支援登入與查看 BOT 狀態。
+2. **進階階段**：
+   - 實作伺服器設定管理。
+   - 加入日誌系統與權限管理。
+3. **優化階段**：
+   - 部署 Docker 化。
+   - 支援 WebSocket 即時推送。
+
+---
+
+## 九、風險控管
+| 風險 | 對策 |
+|:---|:---|
+| Discord API 限流 | 設置速率限制與自動重試。 |
+| Token 洩漏 | 使用環境變數與加密儲存。 |
+| BOT 斷線問題 | 加入心跳監控與自動重連。 |
+
+---
+
+## 十、附錄
+- 參考官方文件：[Discord Developer Portal](https://discord.com/developers/docs/intro)
+- OAuth2 認證流程：[OAuth2 Authorization Code Grant](https://discord.com/developers/docs/topics/oauth2#authorization-code-grant)
+
+---
+
+> PRD 文件撰寫日期：2025-04-26
+> 負責人：Lung Yu-Cheng
+
+---
+
diff --git a/scripts/example_prd.txt b/scripts/example_prd.txt
new file mode 100644
index 0000000..194114d
--- /dev/null
+++ b/scripts/example_prd.txt
@@ -0,0 +1,47 @@
+<context>
+# Overview  
+[Provide a high-level overview of your product here. Explain what problem it solves, who it's for, and why it's valuable.]
+
+# Core Features  
+[List and describe the main features of your product. For each feature, include:
+- What it does
+- Why it's important
+- How it works at a high level]
+
+# User Experience  
+[Describe the user journey and experience. Include:
+- User personas
+- Key user flows
+- UI/UX considerations]
+</context>
+<PRD>
+# Technical Architecture  
+[Outline the technical implementation details:
+- System components
+- Data models
+- APIs and integrations
+- Infrastructure requirements]
+
+# Development Roadmap  
+[Break down the development process into phases:
+- MVP requirements
+- Future enhancements
+- Do not think about timelines whatsoever -- all that matters is scope and detailing exactly what needs to be build in each phase so it can later be cut up into tasks]
+
+# Logical Dependency Chain
+[Define the logical order of development:
+- Which features need to be built first (foundation)
+- Getting as quickly as possible to something usable/visible front end that works
+- Properly pacing and scoping each feature so it is atomic but can also be built upon and improved as development approaches]
+
+# Risks and Mitigations  
+[Identify potential risks and how they'll be addressed:
+- Technical challenges
+- Figuring out the MVP that we can build upon
+- Resource constraints]
+
+# Appendix  
+[Include any additional information:
+- Research findings
+- Technical specifications]
+</PRD>
\ No newline at end of file
diff --git a/scripts/run_dev.py b/scripts/run_dev.py
new file mode 100644
index 0000000..9409184
--- /dev/null
+++ b/scripts/run_dev.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python
+"""
+Run development server script for Social Cube project.
+This script sets the DJANGO_ENV environment variable and runs the server.
+"""
+
+import os
+import sys
+import subprocess
+from pathlib import Path
+
+# Get the project root directory
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+def main():
+    """Main function to run the development server."""
+    # Set environment variables
+    env = os.environ.copy()
+    env["DJANGO_ENV"] = "development"
+
+    # Check if .env file exists
+    env_file = BASE_DIR / ".env"
+    if not env_file.exists():
+        print(f"Warning: .env file not found at {env_file}")
+        print("You can create it by running: python scripts/setup_env.py")
+
+    # Run Django development server
+    cmd = [sys.executable, "manage.py", "runserver"]
+    print(f"Running command: {' '.join(cmd)}")
+
+    try:
+        subprocess.run(cmd, env=env, cwd=BASE_DIR, check=True)
+    except KeyboardInterrupt:
+        print("\nServer stopped")
+    except subprocess.CalledProcessError as e:
+        print(f"Error: {e}")
+        sys.exit(1)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/scripts/setup_env.py b/scripts/setup_env.py
new file mode 100644
index 0000000..235193b
--- /dev/null
+++ b/scripts/setup_env.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python
+"""
+Setup environment script for Social Cube project.
+This script creates a .env file if it doesn't exist.
+"""
+
+import os
+import sys
+import secrets
+from pathlib import Path
+from cryptography.fernet import Fernet
+
+# Get the project root directory
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+def generate_secret_key():
+    """Generate a Django secret key."""
+    return "".join(
+        secrets.choice("abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)")
+        for i in range(50)
+    )
+
+
+def main():
+    """Main function to create the .env file."""
+    env_file = BASE_DIR / ".env"
+
+    # Check if .env file already exists
+    if env_file.exists():
+        print(f"Error: .env file already exists at {env_file}")
+        print("If you want to regenerate it, please delete the existing file first.")
+        sys.exit(1)
+
+    # Get environment variables from example file
+    env_example = BASE_DIR / ".env.example"
+    if not env_example.exists():
+        print(f"Error: .env.example file not found at {env_example}")
+        sys.exit(1)
+
+    with open(env_example, "r") as f:
+        env_content = f.read()
+
+    # Replace placeholder values
+    env_content = env_content.replace("your-secret-key-here", generate_secret_key())
+    env_content = env_content.replace(
+        "your-fernet-key-for-encrypting-bot-tokens", Fernet.generate_key().decode()
+    )
+
+    # Write .env file
+    with open(env_file, "w") as f:
+        f.write(env_content)
+
+    print(f"Successfully created .env file at {env_file}")
+    print("Please edit the file to add your Discord OAuth2 credentials.")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/scripts/task-complexity-report.json b/scripts/task-complexity-report.json
new file mode 100644
index 0000000..337407e
--- /dev/null
+++ b/scripts/task-complexity-report.json
@@ -0,0 +1,91 @@
+{
+  "meta": {
+    "generatedAt": "2025-04-26T13:31:54.982Z",
+    "tasksAnalyzed": 10,
+    "thresholdScore": 5,
+    "projectName": "Your Project Name",
+    "usedResearch": false
+  },
+  "complexityAnalysis": [
+    {
+      "taskId": 1,
+      "taskTitle": "Set up Django Project Structure and Environment",
+      "complexityScore": 5,
+      "recommendedSubtasks": 4,
+      "expansionPrompt": "Break down the Django project setup into subtasks covering: 1) Initial project creation and app structure, 2) Database configuration, 3) Environment and dependency management, and 4) Version control setup",
+      "reasoning": "This task has moderate complexity as it involves multiple components (project structure, database setup, environment configuration, dependencies). It's foundational for the project but follows standard Django practices. Breaking it into 4 distinct areas will make the setup more manageable."
+    },
+    {
+      "taskId": 2,
+      "taskTitle": "Implement Discord OAuth2 Authentication System",
+      "complexityScore": 7,
+      "recommendedSubtasks": 5,
+      "expansionPrompt": "Break down the Discord OAuth2 implementation into subtasks covering: 1) Discord Developer Portal setup, 2) OAuth2 flow implementation, 3) Django authentication backend development, 4) Frontend login/logout implementation, and 5) Token management and security",
+      "reasoning": "OAuth2 implementation has significant complexity due to security requirements, token management, and integration with Discord's API. The task includes both backend and frontend components and requires careful handling of user credentials and tokens."
+    },
+    {
+      "taskId": 3,
+      "taskTitle": "Create BOT Registration and Management Models",
+      "complexityScore": 6,
+      "recommendedSubtasks": 4,
+      "expansionPrompt": "Break down the BOT registration system into subtasks covering: 1) Database model design and implementation, 2) Form and view creation for CRUD operations, 3) Admin interface customization, and 4) Secure token storage implementation",
+      "reasoning": "This task involves database design, security considerations for token storage, and complete CRUD functionality. The complexity comes from ensuring proper data relationships and implementing secure token handling."
+    },
+    {
+      "taskId": 4,
+      "taskTitle": "Implement Discord BOT Integration with discord.py",
+      "complexityScore": 8,
+      "recommendedSubtasks": 5,
+      "expansionPrompt": "Break down the Discord BOT integration into subtasks covering: 1) Client setup with app_commands, 2) Event handling implementation, 3) Command structure development, 4) Multi-instance BOT management service, and 5) Error handling and monitoring systems",
+      "reasoning": "This is a core functionality task with high complexity due to the need to handle asynchronous operations, implement event-driven architecture, and manage multiple BOT instances. The integration with Discord's API and proper error handling adds significant complexity."
+    },
+    {
+      "taskId": 5,
+      "taskTitle": "Develop Command Management System",
+      "complexityScore": 7,
+      "recommendedSubtasks": 4,
+      "expansionPrompt": "Break down the command management system into subtasks covering: 1) Command model design and implementation, 2) UI for command CRUD operations, 3) Discord API synchronization mechanism, and 4) Permission and validation systems",
+      "reasoning": "This task has considerable complexity due to the need to synchronize commands with Discord's API, implement proper validation, and manage permissions. The system needs to handle both global and guild-specific commands with different structures."
+    },
+    {
+      "taskId": 6,
+      "taskTitle": "Implement Server (Guild) Management System",
+      "complexityScore": 6,
+      "recommendedSubtasks": 4,
+      "expansionPrompt": "Break down the server management system into subtasks covering: 1) Guild and GuildSettings models implementation, 2) Server listing and detail views, 3) Server-specific configuration UI, and 4) Guild data synchronization mechanism",
+      "reasoning": "This task involves data modeling, UI development, and synchronization with Discord's API. The complexity comes from managing server-specific settings and ensuring data consistency between the application and Discord."
+    },
+    {
+      "taskId": 7,
+      "taskTitle": "Design and Implement Dashboard Frontend",
+      "complexityScore": 7,
+      "recommendedSubtasks": 5,
+      "expansionPrompt": "Break down the dashboard frontend implementation into subtasks covering: 1) Base layout and navigation design, 2) BOT management interfaces, 3) Server management pages, 4) Command management UI, and 5) User profile and settings pages",
+      "reasoning": "Frontend development has significant complexity due to the need for responsive design, multiple interconnected pages, and real-time data display. The task requires both design skills and frontend implementation across various system components."
+    },
+    {
+      "taskId": 8,
+      "taskTitle": "Implement Logging System and Error Handling",
+      "complexityScore": 6,
+      "recommendedSubtasks": 4,
+      "expansionPrompt": "Break down the logging system implementation into subtasks covering: 1) Log model and database structure, 2) Logging middleware and integration points, 3) Dashboard log viewer with filtering, and 4) Notification and alerting system",
+      "reasoning": "This task involves creating a comprehensive system that spans multiple components. The complexity comes from implementing proper error handling, designing an effective logging structure, and creating useful visualization and filtering tools."
+    },
+    {
+      "taskId": 9,
+      "taskTitle": "Implement Real-time Status Updates and WebSocket Support",
+      "complexityScore": 8,
+      "recommendedSubtasks": 4,
+      "expansionPrompt": "Break down the real-time updates implementation into subtasks covering: 1) Django Channels setup and configuration, 2) WebSocket event broadcasting system, 3) Frontend real-time update integration, and 4) Fallback mechanisms and connection management",
+      "reasoning": "Real-time functionality with WebSockets has high complexity due to the asynchronous nature, need for fallback mechanisms, and integration across both backend and frontend. This requires understanding of WebSocket protocols and handling connection edge cases."
+    },
+    {
+      "taskId": 10,
+      "taskTitle": "Configure Docker Deployment and Finalize Documentation",
+      "complexityScore": 6,
+      "recommendedSubtasks": 4,
+      "expansionPrompt": "Break down the deployment and documentation task into subtasks covering: 1) Docker and Docker Compose configuration, 2) Environment and production settings, 3) User and API documentation, and 4) Developer documentation and maintenance procedures",
+      "reasoning": "This task combines containerization setup with comprehensive documentation. The complexity comes from ensuring proper container configuration for all services and creating thorough documentation covering multiple user personas and use cases."
+    }
+  ]
+}
\ No newline at end of file
diff --git a/setup.py b/setup.py
new file mode 100644
index 0000000..65c5f0b
--- /dev/null
+++ b/setup.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python
+"""Setup script for Social Cube project."""
+
+from setuptools import setup, find_packages
+
+setup(
+    name="social_cube",
+    version="0.1.0",
+    packages=find_packages(),
+    include_package_data=True,
+    install_requires=[
+        "Django>=4.2.0",
+        "python-dotenv>=1.0.0",
+        "discord.py>=2.3.0",
+        "requests>=2.31.0",
+        "python-jose>=3.3.0",
+        "cryptography>=41.0.0",
+        "django-crispy-forms>=2.0",
+        "crispy-bootstrap5>=0.7",
+        "whitenoise>=6.5.0",
+        "gunicorn>=21.2.0",
+        "psycopg2-binary>=2.9.9",
+        "django-environ>=0.11.2",
+        "django-cors-headers>=4.3.0",
+    ],
+    classifiers=[
+        "Development Status :: 3 - Alpha",
+        "Environment :: Web Environment",
+        "Framework :: Django",
+        "Framework :: Django :: 4.2",
+        "Intended Audience :: Developers",
+        "License :: OSI Approved :: MIT License",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 3",
+        "Programming Language :: Python :: 3.11",
+        "Topic :: Internet :: WWW/HTTP",
+        "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
+    ],
+    description="A Django application for managing Discord bots.",
+    author="Social Cube Team",
+    author_email="admin@example.com",
+    url="https://github.com/yourusername/social_cube",
+    project_urls={
+        "Bug Tracker": "https://github.com/yourusername/social_cube/issues",
+        "Documentation": "https://github.com/yourusername/social_cube",
+        "Source Code": "https://github.com/yourusername/social_cube",
+    },
+    python_requires=">=3.11",
+)
\ No newline at end of file
diff --git a/social_cube/__init__.py b/social_cube/__init__.py
new file mode 100644
index 0000000..0519ecb
--- /dev/null
+++ b/social_cube/__init__.py
@@ -0,0 +1 @@
+ 
\ No newline at end of file
diff --git a/social_cube/asgi.py b/social_cube/asgi.py
new file mode 100644
index 0000000..8017d04
--- /dev/null
+++ b/social_cube/asgi.py
@@ -0,0 +1,8 @@
+"""
+ASGI config for social_cube project.
+"""
+import os
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'social_cube.settings')
+application = get_asgi_application() 
\ No newline at end of file
diff --git a/social_cube/settings.py b/social_cube/settings.py
new file mode 100644
index 0000000..5c30acd
--- /dev/null
+++ b/social_cube/settings.py
@@ -0,0 +1,147 @@
+"""
+Django settings for social_cube project.
+"""
+
+import os
+from pathlib import Path
+import environ
+from cryptography.fernet import Fernet
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+# Initialize environment variables
+env = environ.Env(
+    DEBUG=(bool, False),
+    ALLOWED_HOSTS=(list, ['localhost', '127.0.0.1']),
+    DATABASE_URL=(str, 'sqlite:///db.sqlite3'),
+)
+environ.Env.read_env(os.path.join(BASE_DIR, '.env'))
+
+# Quick-start development settings - unsuitable for production
+SECRET_KEY = env('SECRET_KEY')
+DEBUG = env('DEBUG')
+ALLOWED_HOSTS = ['localhost', '127.0.0.1']
+
+# Application definition
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'crispy_forms',
+    'crispy_bootstrap5',
+    'corsheaders',
+    'dashboard.apps.DashboardConfig',
+    'taskmaster.apps.TaskmasterConfig',
+    'bot_management',
+    'api',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'whitenoise.middleware.WhiteNoiseMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'corsheaders.middleware.CorsMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'social_cube.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [BASE_DIR / 'templates', BASE_DIR / 'dashboard' / 'templates', BASE_DIR / 'taskmaster' / 'templates'],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'social_cube.wsgi.application'
+
+# Database
+DATABASES = {
+    'default': env.db(),
+}
+
+# Password validation
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+# Internationalization
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_TZ = True
+
+# Static files (CSS, JavaScript, Images)
+STATIC_URL = 'static/'
+STATIC_ROOT = BASE_DIR / 'staticfiles'
+STATICFILES_DIRS = [BASE_DIR / 'static']
+
+# Media files
+MEDIA_URL = 'media/'
+MEDIA_ROOT = BASE_DIR / 'media'
+
+# Default primary key field type
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+
+# Crispy Forms
+CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
+CRISPY_TEMPLATE_PACK = "bootstrap5"
+
+# Discord OAuth2 settings
+DISCORD_CLIENT_ID = env('DISCORD_CLIENT_ID')
+DISCORD_CLIENT_SECRET = env('DISCORD_CLIENT_SECRET')
+DISCORD_REDIRECT_URI = env('DISCORD_REDIRECT_URI')
+
+# CORS settings
+CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[
+    'http://localhost:8000',
+    'http://127.0.0.1:8000',
+])
+
+# CSRF settings
+CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[
+    'http://localhost:8000',
+    'http://127.0.0.1:8000',
+])
+
+# Authentication settings
+LOGIN_URL = 'dashboard:oauth2_login'
+LOGIN_REDIRECT_URL = 'dashboard:index'
+LOGOUT_REDIRECT_URL = 'dashboard:index'
+
+# Bot settings
+BOT_TOKEN_KEY = env('BOT_TOKEN_KEY', default=Fernet.generate_key().decode())  # Auto-generate if not provided
+
+# Google OAuth2 settings
+GOOGLE_OAUTH2_CLIENT_SECRETS_FILE = os.path.join(BASE_DIR, 'client_secrets.json')
+GOOGLE_OAUTH2_SCOPES = [
+    'https://www.googleapis.com/auth/youtube.readonly',
+] 
\ No newline at end of file
diff --git a/social_cube/urls.py b/social_cube/urls.py
new file mode 100644
index 0000000..6e1b465
--- /dev/null
+++ b/social_cube/urls.py
@@ -0,0 +1,33 @@
+"""
+URL configuration for social_cube project.
+"""
+from django.contrib import admin
+from django.urls import path, include
+from django.conf import settings
+from django.conf.urls.static import static
+from django.views.generic import RedirectView
+
+urlpatterns = [
+    # Admin
+    path('admin/', admin.site.urls),
+    
+    # Landing page (redirect to dashboard home)
+    path('', RedirectView.as_view(url='/dashboard/', permanent=False), name='index'),
+    
+    # Main apps
+path('dashboard/', include(('dashboard.urls', 'dashboard'), namespace='dashboard')),
+# Only use the dashboard integrated taskmaster to avoid conflicts
+# path('tasks/', include(('taskmaster.urls', 'taskmaster'), namespace='taskmaster')),
+    
+# Bot management app
+path('bots/', include(('bot_management.urls', 'bot_management'), namespace='bot_management')),
+    
+# API endpoints
+path('api/', include(('api.urls', 'api'), namespace='api')),
+    
+    # Authentication
+    path('auth/', include([
+        path('discord/', include(('dashboard.auth_urls', 'discord_auth'), namespace='discord_auth')),
+        path('accounts/', include('django.contrib.auth.urls')),
+    ])),
+] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) 
\ No newline at end of file
diff --git a/social_cube/wsgi.py b/social_cube/wsgi.py
new file mode 100644
index 0000000..37649cc
--- /dev/null
+++ b/social_cube/wsgi.py
@@ -0,0 +1,11 @@
+"""
+WSGI config for social_cube project.
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'social_cube.settings')
+
+application = get_wsgi_application() 
\ No newline at end of file
diff --git a/static/css/m3.css b/static/css/m3.css
new file mode 100644
index 0000000..e776818
--- /dev/null
+++ b/static/css/m3.css
@@ -0,0 +1,432 @@
+/* Material Design 3 Variables */
+:root {
+    /* Elevation */
+    --m3-elevation-1: 0px 1px 2px rgba(0,0,0,0.3), 0px 1px 3px 1px rgba(0,0,0,0.15);
+    --m3-elevation-2: 0px 2px 6px rgba(0,0,0,0.15), 0px 1px 2px rgba(0,0,0,0.3);
+    --m3-elevation-3: 0px 4px 8px 3px rgba(0,0,0,0.15), 0px 1px 3px rgba(0,0,0,0.3);
+    --m3-elevation-4: 0px 6px 10px 4px rgba(0,0,0,0.15), 0px 2px 3px rgba(0,0,0,0.3);
+    --m3-elevation-5: 0px 8px 12px 6px rgba(0,0,0,0.15), 0px 4px 4px rgba(0,0,0,0.3);
+
+    /* State Layers */
+    --m3-state-hover: rgba(0,0,0,0.08);
+    --m3-state-focus: rgba(0,0,0,0.12);
+    --m3-state-pressed: rgba(0,0,0,0.12);
+    --m3-state-dragged: rgba(0,0,0,0.16);
+
+    /* Motion */
+    --m3-easing-standard: cubic-bezier(0.2, 0.0, 0.0, 1.0);
+    --m3-easing-emphasized: cubic-bezier(0.2, 0.0, 0.0, 1.0);
+    --m3-easing-emphasized-decelerate: cubic-bezier(0.05, 0.7, 0.1, 1.0);
+    --m3-easing-emphasized-accelerate: cubic-bezier(0.3, 0.0, 0.8, 0.15);
+
+    /* Duration */
+    --m3-duration-short1: 100ms;
+    --m3-duration-short2: 200ms;
+    --m3-duration-medium1: 250ms;
+    --m3-duration-medium2: 400ms;
+    --m3-duration-long1: 500ms;
+    --m3-duration-long2: 700ms;
+}
+
+/* M3 Components */
+
+/* Cards */
+.m3-card {
+    background-color: var(--bg-primary);
+    border-radius: 12px;
+    box-shadow: var(--m3-elevation-1);
+    transition: box-shadow var(--m3-duration-medium1) var(--m3-easing-standard);
+    overflow: hidden;
+}
+
+.m3-card:hover {
+    box-shadow: var(--m3-elevation-2);
+}
+
+.m3-card-elevated {
+    box-shadow: var(--m3-elevation-2);
+}
+
+.m3-card-elevated:hover {
+    box-shadow: var(--m3-elevation-3);
+}
+
+/* Buttons */
+.m3-button {
+    position: relative;
+    padding: 10px 24px;
+    border-radius: 20px;
+    font-weight: 500;
+    border: none;
+    cursor: pointer;
+    transition: background-color var(--m3-duration-short2) var(--m3-easing-standard);
+    overflow: hidden;
+}
+
+.m3-button::before {
+    content: '';
+    position: absolute;
+    top: 0;
+    left: 0;
+    right: 0;
+    bottom: 0;
+    background-color: var(--m3-state-hover);
+    opacity: 0;
+    transition: opacity var(--m3-duration-short2) var(--m3-easing-standard);
+}
+
+.m3-button:hover::before {
+    opacity: 1;
+}
+
+.m3-button:active {
+    transform: scale(0.98);
+}
+
+/* FAB */
+.m3-fab {
+    position: fixed;
+    width: 56px;
+    height: 56px;
+    border-radius: 16px;
+    background-color: var(--primary-color);
+    color: white;
+    box-shadow: var(--m3-elevation-3);
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    cursor: pointer;
+    transition: all var(--m3-duration-medium1) var(--m3-easing-standard);
+}
+
+.m3-fab:hover {
+    box-shadow: var(--m3-elevation-4);
+    transform: scale(1.05);
+}
+
+.m3-fab:active {
+    transform: scale(0.95);
+}
+
+/* Navigation Rail */
+.m3-nav-rail {
+    width: 80px;
+    height: 100vh;
+    background-color: var(--bg-primary);
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    padding: 12px 0;
+    box-shadow: var(--m3-elevation-1);
+}
+
+.m3-nav-rail-item {
+    width: 56px;
+    height: 56px;
+    border-radius: 16px;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    margin: 4px 0;
+    cursor: pointer;
+    transition: background-color var(--m3-duration-short2) var(--m3-easing-standard);
+}
+
+.m3-nav-rail-item:hover {
+    background-color: var(--m3-state-hover);
+}
+
+.m3-nav-rail-item.active {
+    background-color: var(--m3-state-focus);
+}
+
+/* Top App Bar */
+.m3-top-app-bar {
+    height: 64px;
+    background-color: var(--bg-primary);
+    display: flex;
+    align-items: center;
+    padding: 0 16px;
+    box-shadow: var(--m3-elevation-1);
+}
+
+.m3-top-app-bar-title {
+    font-size: 22px;
+    font-weight: 500;
+    margin-left: 16px;
+}
+
+/* Search Bar */
+.m3-search-bar {
+    position: relative;
+    height: 48px;
+    border-radius: 24px;
+    background-color: var(--bg-secondary);
+    display: flex;
+    align-items: center;
+    padding: 0 16px;
+    transition: background-color var(--m3-duration-short2) var(--m3-easing-standard);
+}
+
+.m3-search-bar:focus-within {
+    background-color: var(--bg-tertiary);
+}
+
+.m3-search-bar input {
+    border: none;
+    background: none;
+    outline: none;
+    padding: 0 8px;
+    width: 100%;
+    color: var(--text-primary);
+}
+
+/* Chips */
+.m3-chip {
+    height: 32px;
+    padding: 0 16px;
+    border-radius: 8px;
+    background-color: var(--bg-secondary);
+    display: flex;
+    align-items: center;
+    gap: 8px;
+    cursor: pointer;
+    transition: background-color var(--m3-duration-short2) var(--m3-easing-standard);
+}
+
+.m3-chip:hover {
+    background-color: var(--m3-state-hover);
+}
+
+.m3-chip.selected {
+    background-color: var(--primary-color);
+    color: white;
+}
+
+/* Bottom Sheet */
+.m3-bottom-sheet {
+    position: fixed;
+    bottom: 0;
+    left: 0;
+    right: 0;
+    background-color: var(--bg-primary);
+    border-radius: 28px 28px 0 0;
+    padding: 24px;
+    box-shadow: var(--m3-elevation-3);
+    transform: translateY(100%);
+    transition: transform var(--m3-duration-medium2) var(--m3-easing-emphasized);
+}
+
+.m3-bottom-sheet.show {
+    transform: translateY(0);
+}
+
+/* Snackbar */
+.m3-snackbar {
+    position: fixed;
+    bottom: 24px;
+    left: 50%;
+    transform: translateX(-50%);
+    min-width: 280px;
+    max-width: 568px;
+    background-color: var(--bg-tertiary);
+    color: var(--text-primary);
+    padding: 14px 16px;
+    border-radius: 4px;
+    box-shadow: var(--m3-elevation-3);
+    display: flex;
+    align-items: center;
+    justify-content: space-between;
+    z-index: 1000;
+    animation: m3-snackbar-in var(--m3-duration-medium1) var(--m3-easing-emphasized);
+}
+
+@keyframes m3-snackbar-in {
+    from {
+        transform: translateX(-50%) translateY(100%);
+        opacity: 0;
+    }
+    to {
+        transform: translateX(-50%) translateY(0);
+        opacity: 1;
+    }
+}
+
+/* Navigation Bar */
+.m3-navigation-bar {
+    height: 80px;
+    background-color: var(--bg-primary);
+    position: fixed;
+    bottom: 0;
+    left: 0;
+    right: 0;
+    display: flex;
+    justify-content: space-around;
+    align-items: center;
+    padding: 0 16px;
+    box-shadow: var(--m3-elevation-2);
+}
+
+.m3-navigation-item {
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    gap: 4px;
+    padding: 12px;
+    border-radius: 16px;
+    transition: background-color var(--m3-duration-short2) var(--m3-easing-standard);
+}
+
+.m3-navigation-item:hover {
+    background-color: var(--m3-state-hover);
+}
+
+.m3-navigation-item.active {
+    color: var(--primary-color);
+}
+
+/* Segmented Button */
+.m3-segmented-button-group {
+    display: inline-flex;
+    border-radius: 20px;
+    overflow: hidden;
+    background-color: var(--bg-secondary);
+}
+
+.m3-segmented-button {
+    padding: 10px 24px;
+    border: none;
+    background: none;
+    cursor: pointer;
+    transition: background-color var(--m3-duration-short2) var(--m3-easing-standard);
+}
+
+.m3-segmented-button:hover {
+    background-color: var(--m3-state-hover);
+}
+
+.m3-segmented-button.active {
+    background-color: var(--primary-color);
+    color: white;
+}
+
+/* Dialog */
+.m3-dialog {
+    position: fixed;
+    top: 50%;
+    left: 50%;
+    transform: translate(-50%, -50%);
+    background-color: var(--bg-primary);
+    border-radius: 28px;
+    padding: 24px;
+    min-width: 280px;
+    max-width: 560px;
+    box-shadow: var(--m3-elevation-3);
+}
+
+.m3-dialog-backdrop {
+    position: fixed;
+    top: 0;
+    left: 0;
+    right: 0;
+    bottom: 0;
+    background-color: rgba(0, 0, 0, 0.5);
+    backdrop-filter: blur(4px);
+}
+
+/* Switch */
+.m3-switch {
+    position: relative;
+    width: 52px;
+    height: 32px;
+    border-radius: 16px;
+    background-color: var(--bg-tertiary);
+    cursor: pointer;
+    transition: background-color var(--m3-duration-short2) var(--m3-easing-standard);
+}
+
+.m3-switch::before {
+    content: '';
+    position: absolute;
+    top: 2px;
+    left: 2px;
+    width: 28px;
+    height: 28px;
+    border-radius: 14px;
+    background-color: var(--bg-primary);
+    transition: transform var(--m3-duration-short2) var(--m3-easing-standard);
+}
+
+.m3-switch.active {
+    background-color: var(--primary-color);
+}
+
+.m3-switch.active::before {
+    transform: translateX(20px);
+}
+
+/* Slider */
+.m3-slider {
+    position: relative;
+    height: 4px;
+    background-color: var(--bg-tertiary);
+    border-radius: 2px;
+}
+
+.m3-slider-thumb {
+    position: absolute;
+    top: 50%;
+    width: 20px;
+    height: 20px;
+    border-radius: 10px;
+    background-color: var(--primary-color);
+    transform: translate(-50%, -50%);
+    cursor: pointer;
+    transition: transform var(--m3-duration-short2) var(--m3-easing-standard);
+}
+
+.m3-slider-thumb:hover {
+    transform: translate(-50%, -50%) scale(1.2);
+}
+
+/* Progress Indicators */
+.m3-circular-progress {
+    width: 48px;
+    height: 48px;
+    border-radius: 24px;
+    border: 4px solid var(--bg-tertiary);
+    border-top-color: var(--primary-color);
+    animation: m3-spin 1s linear infinite;
+}
+
+@keyframes m3-spin {
+    to {
+        transform: rotate(360deg);
+    }
+}
+
+.m3-linear-progress {
+    height: 4px;
+    background-color: var(--bg-tertiary);
+    overflow: hidden;
+}
+
+.m3-linear-progress::after {
+    content: '';
+    position: absolute;
+    top: 0;
+    left: 0;
+    width: 50%;
+    height: 100%;
+    background-color: var(--primary-color);
+    animation: m3-linear 2s ease-in-out infinite;
+}
+
+@keyframes m3-linear {
+    0% {
+        transform: translateX(-100%);
+    }
+    100% {
+        transform: translateX(200%);
+    }
+} 
\ No newline at end of file
diff --git a/static/css/main.css b/static/css/main.css
new file mode 100644
index 0000000..8425ff4
--- /dev/null
+++ b/static/css/main.css
@@ -0,0 +1,815 @@
+/* Critical CSS - Load this first */
+:root {
+    /* M3 Theme Colors */
+    --primary-color: #006874;
+    --on-primary-color: #ffffff;
+    --primary-container-color: #97f0ff;
+    --on-primary-container-color: #001f24;
+    
+    --secondary-color: #4a6267;
+    --on-secondary-color: #ffffff;
+    --secondary-container-color: #cde7ec;
+    --on-secondary-container-color: #051f23;
+    
+    --surface-color: #fafdfd;
+    --on-surface-color: #191c1d;
+    --surface-variant-color: #dbe4e6;
+    --on-surface-variant-color: #3f484a;
+    
+    --outline-color: #70797b;
+    --outline-variant-color: #bfc8ca;
+    
+    /* Spacing */
+    --spacing-unit: 8px;
+    --content-spacing: calc(var(--spacing-unit) * 2);
+    
+    /* Elevation */
+    --elevation-1: 0 1px 2px rgba(0,0,0,0.3);
+    --elevation-2: 0 1px 2px rgba(0,0,0,0.3), 0 1px 3px 1px rgba(0,0,0,0.15);
+    --elevation-3: 0 1px 3px rgba(0,0,0,0.3), 0 4px 8px 3px rgba(0,0,0,0.15);
+    
+    /* Motion */
+    --motion-easing-standard: cubic-bezier(0.2, 0, 0, 1);
+    --motion-duration-medium: 0.3s;
+}
+
+/* Performance optimizations */
+.card-container {
+    contain: content;
+    will-change: transform;
+}
+
+.card {
+    contain: layout style paint;
+    will-change: transform;
+    transform: translateZ(0);
+    backface-visibility: hidden;
+}
+
+/* Optimize animations */
+@media (prefers-reduced-motion: no-preference) {
+    .card {
+        transition: transform 0.2s ease-in-out;
+    }
+}
+
+/* Responsive optimizations */
+@media screen and (max-width: 768px) {
+    .card-container {
+        contain: content;
+        display: grid;
+        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
+        gap: 1rem;
+    }
+}
+
+/* Lazy loading placeholder styles */
+img[data-src] {
+    opacity: 0;
+    transition: opacity 0.3s ease-in;
+}
+
+img[src] {
+    opacity: 1;
+}
+
+/* Alert optimizations */
+.alert {
+    contain: content;
+    will-change: opacity;
+}
+
+/* Tooltip container optimizations */
+.tooltip-container {
+    contain: content;
+}
+
+/* Optimize layout shifts */
+.main-content {
+    padding-top: 64px;
+    min-height: calc(100vh - 64px);
+    background-color: var(--surface-color);
+}
+
+/* Optimize paint performance */
+.smooth-scroll {
+    scroll-behavior: smooth;
+    @media (prefers-reduced-motion: reduce) {
+        scroll-behavior: auto;
+    }
+}
+
+/* Optimize animations for high-performance devices */
+@media screen and (min-width: 768px) and (prefers-reduced-motion: no-preference) {
+    .card:hover {
+        transform: translateY(-5px);
+    }
+}
+
+/* Reduce paint operations */
+.fixed-element {
+    transform: translateZ(0);
+    will-change: transform;
+    backface-visibility: hidden;
+}
+
+/* Base Typography */
+body {
+    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
+    font-size: 16px;
+    line-height: 1.5;
+    -webkit-font-smoothing: antialiased;
+    -moz-osx-font-smoothing: grayscale;
+}
+
+h1, h2, h3, h4, h5, h6 {
+    font-weight: 600;
+    line-height: 1.2;
+    margin-bottom: 1rem;
+}
+
+h1 { font-size: 2.5rem; }
+h2 { font-size: 2rem; }
+h3 { font-size: 1.75rem; }
+h4 { font-size: 1.5rem; }
+h5 { font-size: 1.25rem; }
+h6 { font-size: 1rem; }
+
+p {
+    margin-bottom: 1rem;
+}
+
+/* Layout Components */
+.container {
+    width: 100%;
+    padding-right: 15px;
+    padding-left: 15px;
+    margin-right: auto;
+    margin-left: auto;
+}
+
+@media (min-width: 576px) {
+    .container {
+        max-width: 540px;
+    }
+}
+
+@media (min-width: 768px) {
+    .container {
+        max-width: 720px;
+    }
+}
+
+@media (min-width: 992px) {
+    .container {
+        max-width: 960px;
+    }
+}
+
+@media (min-width: 1200px) {
+    .container {
+        max-width: 1140px;
+    }
+}
+
+.row {
+    display: flex;
+    flex-wrap: wrap;
+    margin-right: -15px;
+    margin-left: -15px;
+}
+
+/* Grid System */
+.col {
+    position: relative;
+    width: 100%;
+    padding-right: 15px;
+    padding-left: 15px;
+}
+
+@media (min-width: 768px) {
+    .col-md-1 { flex: 0 0 8.333333%; max-width: 8.333333%; }
+    .col-md-2 { flex: 0 0 16.666667%; max-width: 16.666667%; }
+    .col-md-3 { flex: 0 0 25%; max-width: 25%; }
+    .col-md-4 { flex: 0 0 33.333333%; max-width: 33.333333%; }
+    .col-md-5 { flex: 0 0 41.666667%; max-width: 41.666667%; }
+    .col-md-6 { flex: 0 0 50%; max-width: 50%; }
+    .col-md-7 { flex: 0 0 58.333333%; max-width: 58.333333%; }
+    .col-md-8 { flex: 0 0 66.666667%; max-width: 66.666667%; }
+    .col-md-9 { flex: 0 0 75%; max-width: 75%; }
+    .col-md-10 { flex: 0 0 83.333333%; max-width: 83.333333%; }
+    .col-md-11 { flex: 0 0 91.666667%; max-width: 91.666667%; }
+    .col-md-12 { flex: 0 0 100%; max-width: 100%; }
+}
+
+/* Navigation */
+.navbar {
+    display: flex;
+    align-items: center;
+    padding: 1rem;
+    background-color: var(--bg-primary);
+    border-bottom: 1px solid var(--border-color);
+}
+
+.navbar-brand {
+    font-size: 1.25rem;
+    font-weight: 600;
+    color: var(--text-primary);
+    text-decoration: none;
+}
+
+.navbar-nav {
+    display: flex;
+    list-style: none;
+    margin: 0;
+    padding: 0;
+}
+
+.nav-item {
+    margin-left: 1rem;
+}
+
+/* Forms */
+.form-group {
+    margin-bottom: 1rem;
+}
+
+.form-label {
+    display: block;
+    margin-bottom: 0.5rem;
+    font-weight: 500;
+}
+
+.form-text {
+    display: block;
+    margin-top: 0.25rem;
+    font-size: 0.875rem;
+    color: var(--text-muted);
+}
+
+.form-control.is-invalid {
+    border-color: var(--danger-color);
+}
+
+.invalid-feedback {
+    display: none;
+    color: var(--danger-color);
+    font-size: 0.875rem;
+    margin-top: 0.25rem;
+}
+
+.was-validated .form-control:invalid + .invalid-feedback,
+.form-control.is-invalid + .invalid-feedback {
+    display: block;
+}
+
+/* Buttons */
+.btn-group {
+    display: inline-flex;
+    vertical-align: middle;
+}
+
+.btn-group > .btn:not(:last-child) {
+    border-top-right-radius: 0;
+    border-bottom-right-radius: 0;
+}
+
+.btn-group > .btn:not(:first-child) {
+    border-top-left-radius: 0;
+    border-bottom-left-radius: 0;
+    margin-left: -1px;
+}
+
+/* Tables */
+.table-responsive {
+    display: block;
+    width: 100%;
+    overflow-x: auto;
+    -webkit-overflow-scrolling: touch;
+}
+
+.table-striped tbody tr:nth-of-type(odd) {
+    background-color: var(--bg-secondary);
+}
+
+.table-bordered {
+    border: 1px solid var(--border-color);
+}
+
+.table-bordered th,
+.table-bordered td {
+    border: 1px solid var(--border-color);
+}
+
+/* Cards */
+.card-grid {
+    display: grid;
+    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
+    gap: 1rem;
+}
+
+.card-img-top {
+    width: 100%;
+    border-top-left-radius: var(--border-radius);
+    border-top-right-radius: var(--border-radius);
+}
+
+.card-title {
+    margin-bottom: 0.75rem;
+}
+
+.card-text {
+    margin-bottom: 1rem;
+}
+
+/* Utilities */
+.d-flex { display: flex !important; }
+.d-none { display: none !important; }
+.d-block { display: block !important; }
+.d-inline-block { display: inline-block !important; }
+
+.justify-content-start { justify-content: flex-start !important; }
+.justify-content-end { justify-content: flex-end !important; }
+.justify-content-center { justify-content: center !important; }
+.justify-content-between { justify-content: space-between !important; }
+.justify-content-around { justify-content: space-around !important; }
+
+.align-items-start { align-items: flex-start !important; }
+.align-items-end { align-items: flex-end !important; }
+.align-items-center { align-items: center !important; }
+.align-items-baseline { align-items: baseline !important; }
+.align-items-stretch { align-items: stretch !important; }
+
+.m-0 { margin: 0 !important; }
+.mt-0 { margin-top: 0 !important; }
+.mr-0 { margin-right: 0 !important; }
+.mb-0 { margin-bottom: 0 !important; }
+.ml-0 { margin-left: 0 !important; }
+
+.m-1 { margin: 0.25rem !important; }
+.mt-1 { margin-top: 0.25rem !important; }
+.mr-1 { margin-right: 0.25rem !important; }
+.mb-1 { margin-bottom: 0.25rem !important; }
+.ml-1 { margin-left: 0.25rem !important; }
+
+.m-2 { margin: 0.5rem !important; }
+.mt-2 { margin-top: 0.5rem !important; }
+.mr-2 { margin-right: 0.5rem !important; }
+.mb-2 { margin-bottom: 0.5rem !important; }
+.ml-2 { margin-left: 0.5rem !important; }
+
+.m-3 { margin: 1rem !important; }
+.mt-3 { margin-top: 1rem !important; }
+.mr-3 { margin-right: 1rem !important; }
+.mb-3 { margin-bottom: 1rem !important; }
+.ml-3 { margin-left: 1rem !important; }
+
+.m-4 { margin: 1.5rem !important; }
+.mt-4 { margin-top: 1.5rem !important; }
+.mr-4 { margin-right: 1.5rem !important; }
+.mb-4 { margin-bottom: 1.5rem !important; }
+.ml-4 { margin-left: 1.5rem !important; }
+
+.m-5 { margin: 3rem !important; }
+.mt-5 { margin-top: 3rem !important; }
+.mr-5 { margin-right: 3rem !important; }
+.mb-5 { margin-bottom: 3rem !important; }
+.ml-5 { margin-left: 3rem !important; }
+
+.p-0 { padding: 0 !important; }
+.pt-0 { padding-top: 0 !important; }
+.pr-0 { padding-right: 0 !important; }
+.pb-0 { padding-bottom: 0 !important; }
+.pl-0 { padding-left: 0 !important; }
+
+.p-1 { padding: 0.25rem !important; }
+.pt-1 { padding-top: 0.25rem !important; }
+.pr-1 { padding-right: 0.25rem !important; }
+.pb-1 { padding-bottom: 0.25rem !important; }
+.pl-1 { padding-left: 0.25rem !important; }
+
+.p-2 { padding: 0.5rem !important; }
+.pt-2 { padding-top: 0.5rem !important; }
+.pr-2 { padding-right: 0.5rem !important; }
+.pb-2 { padding-bottom: 0.5rem !important; }
+.pl-2 { padding-left: 0.5rem !important; }
+
+.p-3 { padding: 1rem !important; }
+.pt-3 { padding-top: 1rem !important; }
+.pr-3 { padding-right: 1rem !important; }
+.pb-3 { padding-bottom: 1rem !important; }
+.pl-3 { padding-left: 1rem !important; }
+
+.p-4 { padding: 1.5rem !important; }
+.pt-4 { padding-top: 1.5rem !important; }
+.pr-4 { padding-right: 1.5rem !important; }
+.pb-4 { padding-bottom: 1.5rem !important; }
+.pl-4 { padding-left: 1.5rem !important; }
+
+.p-5 { padding: 3rem !important; }
+.pt-5 { padding-top: 3rem !important; }
+.pr-5 { padding-right: 3rem !important; }
+.pb-5 { padding-bottom: 3rem !important; }
+.pl-5 { padding-left: 3rem !important; }
+
+.w-25 { width: 25% !important; }
+.w-50 { width: 50% !important; }
+.w-75 { width: 75% !important; }
+.w-100 { width: 100% !important; }
+
+.h-25 { height: 25% !important; }
+.h-50 { height: 50% !important; }
+.h-75 { height: 75% !important; }
+.h-100 { height: 100% !important; }
+
+.text-left { text-align: left !important; }
+.text-right { text-align: right !important; }
+.text-center { text-align: center !important; }
+.text-justify { text-align: justify !important; }
+
+.font-weight-light { font-weight: 300 !important; }
+.font-weight-normal { font-weight: 400 !important; }
+.font-weight-bold { font-weight: 700 !important; }
+
+.text-lowercase { text-transform: lowercase !important; }
+.text-uppercase { text-transform: uppercase !important; }
+.text-capitalize { text-transform: capitalize !important; }
+
+.text-wrap { white-space: normal !important; }
+.text-nowrap { white-space: nowrap !important; }
+.text-truncate {
+    overflow: hidden;
+    text-overflow: ellipsis;
+    white-space: nowrap;
+}
+
+.text-break {
+    word-break: break-word !important;
+    word-wrap: break-word !important;
+}
+
+.text-primary { color: var(--primary-color) !important; }
+.text-secondary { color: var(--secondary-color) !important; }
+.text-success { color: var(--success-color) !important; }
+.text-danger { color: var(--danger-color) !important; }
+.text-warning { color: var(--warning-color) !important; }
+.text-info { color: var(--info-color) !important; }
+.text-light { color: var(--light-color) !important; }
+.text-dark { color: var(--dark-color) !important; }
+.text-muted { color: var(--text-muted) !important; }
+
+.bg-primary { background-color: var(--primary-color) !important; }
+.bg-secondary { background-color: var(--secondary-color) !important; }
+.bg-success { background-color: var(--success-color) !important; }
+.bg-danger { background-color: var(--danger-color) !important; }
+.bg-warning { background-color: var(--warning-color) !important; }
+.bg-info { background-color: var(--info-color) !important; }
+.bg-light { background-color: var(--light-color) !important; }
+.bg-dark { background-color: var(--dark-color) !important; }
+
+.border { border: 1px solid var(--border-color) !important; }
+.border-top { border-top: 1px solid var(--border-color) !important; }
+.border-right { border-right: 1px solid var(--border-color) !important; }
+.border-bottom { border-bottom: 1px solid var(--border-color) !important; }
+.border-left { border-left: 1px solid var(--border-color) !important; }
+.border-0 { border: 0 !important; }
+
+.rounded { border-radius: var(--border-radius) !important; }
+.rounded-top {
+    border-top-left-radius: var(--border-radius) !important;
+    border-top-right-radius: var(--border-radius) !important;
+}
+.rounded-right {
+    border-top-right-radius: var(--border-radius) !important;
+    border-bottom-right-radius: var(--border-radius) !important;
+}
+.rounded-bottom {
+    border-bottom-right-radius: var(--border-radius) !important;
+    border-bottom-left-radius: var(--border-radius) !important;
+}
+.rounded-left {
+    border-top-left-radius: var(--border-radius) !important;
+    border-bottom-left-radius: var(--border-radius) !important;
+}
+.rounded-circle { border-radius: 50% !important; }
+
+.shadow-none { box-shadow: none !important; }
+.shadow-sm { box-shadow: var(--shadow-sm) !important; }
+.shadow { box-shadow: var(--shadow-md) !important; }
+.shadow-lg { box-shadow: var(--shadow-lg) !important; }
+
+/* Animations */
+.fade {
+    transition: opacity var(--transition-speed) linear;
+}
+
+.collapse:not(.show) {
+    display: none;
+}
+
+.collapsing {
+    position: relative;
+    height: 0;
+    overflow: hidden;
+    transition: height var(--transition-speed) ease;
+}
+
+/* Custom Components */
+.avatar {
+    width: 40px;
+    height: 40px;
+    border-radius: 50%;
+    object-fit: cover;
+}
+
+.avatar-sm {
+    width: 32px;
+    height: 32px;
+}
+
+.avatar-lg {
+    width: 56px;
+    height: 56px;
+}
+
+.badge-dot {
+    width: 8px;
+    height: 8px;
+    border-radius: 50%;
+    display: inline-block;
+}
+
+.divider {
+    height: 1px;
+    background-color: var(--border-color);
+    margin: 1rem 0;
+}
+
+.divider-vertical {
+    width: 1px;
+    background-color: var(--border-color);
+    margin: 0 1rem;
+    align-self: stretch;
+}
+
+/* Responsive Utilities */
+@media (min-width: 576px) {
+    .d-sm-none { display: none !important; }
+    .d-sm-block { display: block !important; }
+    .d-sm-flex { display: flex !important; }
+}
+
+@media (min-width: 768px) {
+    .d-md-none { display: none !important; }
+    .d-md-block { display: block !important; }
+    .d-md-flex { display: flex !important; }
+}
+
+@media (min-width: 992px) {
+    .d-lg-none { display: none !important; }
+    .d-lg-block { display: block !important; }
+    .d-lg-flex { display: flex !important; }
+}
+
+@media (min-width: 1200px) {
+    .d-xl-none { display: none !important; }
+    .d-xl-block { display: block !important; }
+    .d-xl-flex { display: flex !important; }
+}
+
+/* Print Utilities */
+@media print {
+    .d-print-none { display: none !important; }
+    .d-print-block { display: block !important; }
+    .d-print-flex { display: flex !important; }
+}
+
+/* Navigation Rail */
+.m3-nav-rail {
+    position: fixed;
+    top: 0;
+    left: 0;
+    height: 100vh;
+    width: 80px;
+    background: var(--m3-surface-container);
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    padding: 1rem 0;
+    z-index: 1000;
+    transition: width 0.3s var(--motion-easing-standard);
+}
+
+.m3-nav-rail .nav-header {
+    width: 100%;
+    display: flex;
+    justify-content: center;
+    margin-bottom: 1rem;
+}
+
+.m3-nav-rail .logo {
+    width: 48px;
+    height: 48px;
+    object-fit: contain;
+}
+
+.m3-nav-rail .nav-content {
+    width: 100%;
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    gap: 1rem;
+}
+
+.m3-nav-rail .user-avatar {
+    width: 48px;
+    height: 48px;
+    border-radius: 50%;
+    overflow: hidden;
+}
+
+.m3-nav-rail .user-avatar img {
+    width: 100%;
+    height: 100%;
+    object-fit: cover;
+}
+
+.m3-nav-rail .nav-item {
+    width: 100%;
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    padding: 0.75rem;
+    color: var(--m3-on-surface-variant);
+    text-decoration: none;
+    gap: 0.5rem;
+    transition: all 0.2s var(--motion-easing-standard);
+}
+
+.m3-nav-rail .nav-item i {
+    font-size: 1.5rem;
+}
+
+.m3-nav-rail .nav-item span {
+    font-size: 0.75rem;
+    text-align: center;
+}
+
+.m3-nav-rail .nav-item:hover {
+    color: var(--m3-on-surface);
+    background: var(--m3-surface-container-highest);
+}
+
+.m3-nav-rail .nav-item.active {
+    color: var(--m3-primary);
+    background: var(--m3-primary-container);
+}
+
+/* Top App Bar */
+.m3-top-app-bar {
+    position: fixed;
+    top: 0;
+    left: 80px;
+    right: 0;
+    height: 64px;
+    background: var(--m3-surface-container);
+    display: flex;
+    align-items: center;
+    padding: 0 1rem;
+    z-index: 1000;
+    box-shadow: var(--m3-elevation-1);
+}
+
+.m3-top-app-bar .title {
+    font-size: 1.25rem;
+    font-weight: 500;
+    color: var(--m3-on-surface);
+    margin-right: auto;
+}
+
+.m3-top-app-bar .actions {
+    display: flex;
+    align-items: center;
+    gap: 0.5rem;
+}
+
+/* Main Content */
+.main-content {
+    margin-left: 80px;
+    padding-top: 64px;
+    min-height: calc(100vh - 64px);
+    background: var(--m3-surface);
+}
+
+/* Mobile Styles */
+@media (max-width: 768px) {
+    .m3-nav-rail {
+        transform: translateX(-100%);
+        width: 240px;
+    }
+
+    .m3-nav-rail.show {
+        transform: translateX(0);
+    }
+
+    .m3-top-app-bar {
+        left: 0;
+    }
+
+    .main-content {
+        margin-left: 0;
+    }
+
+    .m3-nav-rail .nav-item {
+        flex-direction: row;
+        justify-content: flex-start;
+        padding: 0.75rem 1rem;
+    }
+
+    .m3-nav-rail .nav-item span {
+        font-size: 1rem;
+    }
+}
+
+/* Desktop Styles */
+@media (min-width: 769px) {
+    .mobile-only {
+        display: none !important;
+    }
+}
+
+/* Mobile Only */
+@media (max-width: 768px) {
+    .desktop-only {
+        display: none !important;
+    }
+}
+
+/* Theme Toggle Button */
+#theme-toggle {
+    width: 40px;
+    height: 40px;
+    border-radius: 50%;
+    border: none;
+    background: transparent;
+    color: var(--m3-on-surface-variant);
+    cursor: pointer;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    transition: all 0.2s var(--motion-easing-standard);
+}
+
+#theme-toggle:hover {
+    background: var(--m3-surface-container-highest);
+    color: var(--m3-on-surface);
+}
+
+/* Search Bar */
+.m3-search-bar {
+    display: flex;
+    align-items: center;
+    gap: 0.5rem;
+    padding: 0.5rem 1rem;
+    background: var(--m3-surface-container-highest);
+    border-radius: 24px;
+    width: 300px;
+}
+
+.m3-search-bar input {
+    border: none;
+    background: transparent;
+    color: var(--m3-on-surface);
+    width: 100%;
+    outline: none;
+}
+
+.m3-search-bar i {
+    color: var(--m3-on-surface-variant);
+}
+
+/* Mobile Menu Toggle */
+#mobile-menu-toggle {
+    display: none;
+}
+
+@media (max-width: 768px) {
+    #mobile-menu-toggle {
+        display: flex;
+        align-items: center;
+        justify-content: center;
+        width: 40px;
+        height: 40px;
+        border: none;
+        background: transparent;
+        color: var(--m3-on-surface-variant);
+        cursor: pointer;
+        margin-right: 1rem;
+    }
+
+    #mobile-menu-toggle:hover {
+        background: var(--m3-surface-container-highest);
+        color: var(--m3-on-surface);
+        border-radius: 50%;
+    }
+} 
\ No newline at end of file
diff --git a/static/css/settings.css b/static/css/settings.css
new file mode 100644
index 0000000..51a7372
--- /dev/null
+++ b/static/css/settings.css
@@ -0,0 +1,388 @@
+.settings-container {
+    max-width: 1200px;
+    margin: 2rem auto;
+    padding: 0 1rem;
+}
+
+.settings-grid {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
+    gap: 1.5rem;
+}
+
+.settings-section {
+    padding: 24px;
+    border-radius: 28px;
+    background: var(--surface-container);
+    box-shadow: var(--elevation-1);
+    margin-bottom: 24px;
+    transition: background 0.2s ease;
+}
+
+.settings-section:hover {
+    box-shadow: var(--elevation-2);
+}
+
+.settings-section h2 {
+    color: var(--on-surface);
+    font-size: 1.5rem;
+    font-weight: 500;
+    margin-bottom: 16px;
+}
+
+.settings-item {
+    display: flex;
+    align-items: center;
+    justify-content: space-between;
+    padding: 12px 0;
+    border-bottom: 1px solid var(--outline-variant);
+}
+
+.settings-item:last-child {
+    border-bottom: none;
+}
+
+.settings-item-label {
+    color: var(--on-surface);
+    font-size: 1rem;
+    font-weight: 400;
+}
+
+.settings-item-description {
+    color: var(--on-surface-variant);
+    font-size: 0.875rem;
+    margin-top: 4px;
+}
+
+.settings-form {
+    display: flex;
+    flex-direction: column;
+    gap: 1rem;
+}
+
+.form-group {
+    display: flex;
+    flex-direction: column;
+    gap: 0.5rem;
+}
+
+.form-group label {
+    color: var(--m3-on-surface-variant);
+    font-size: 0.875rem;
+}
+
+.switch-label {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    color: var(--m3-on-surface);
+    font-size: 1rem;
+}
+
+.m3-textfield {
+    width: 100%;
+    padding: 16px;
+    border: 1px solid var(--outline);
+    border-radius: 16px;
+    background: var(--surface-container-lowest);
+    color: var(--on-surface);
+    font-size: 1rem;
+    transition: all 0.2s ease;
+    margin-bottom: 16px;
+}
+
+.m3-textfield:focus {
+    border-color: var(--primary);
+    background: var(--surface-container-low);
+    outline: none;
+    box-shadow: 0 0 0 4px var(--primary-container);
+}
+
+.m3-textfield[readonly] {
+    background: var(--m3-surface-container);
+    border-color: var(--m3-outline-variant);
+    color: var(--m3-on-surface-variant);
+}
+
+.danger-zone {
+    background: var(--error-container);
+    border-radius: 28px;
+    padding: 24px;
+    margin-top: 32px;
+}
+
+.danger-zone h2 {
+    color: var(--on-error-container);
+    margin-bottom: 16px;
+}
+
+.danger-zone .m3-button {
+    background: var(--error);
+    color: var(--on-error);
+    margin-top: 16px;
+}
+
+.danger-zone .m3-button:hover {
+    background: var(--error);
+    opacity: 0.9;
+    box-shadow: var(--elevation-2);
+}
+
+.m3-dialog {
+    padding: 1.5rem;
+    border: none;
+    border-radius: var(--m3-shape-corner-large);
+    background: var(--m3-surface-container);
+    color: var(--m3-on-surface);
+    box-shadow: var(--m3-elevation-3);
+    max-width: 400px;
+    width: 90%;
+}
+
+.m3-dialog::backdrop {
+    background: rgba(0, 0, 0, 0.4);
+    backdrop-filter: blur(4px);
+}
+
+.m3-dialog h3 {
+    color: var(--m3-on-surface);
+    font-size: 1.25rem;
+    font-weight: 500;
+    margin: 0 0 1.5rem;
+}
+
+.dialog-buttons {
+    display: flex;
+    justify-content: flex-end;
+    gap: 0.75rem;
+    margin-top: 1.5rem;
+}
+
+/* 響應式設計 */
+@media (max-width: 768px) {
+    .settings-container {
+        margin: 1rem auto;
+    }
+
+    .settings-grid {
+        grid-template-columns: 1fr;
+    }
+
+    .settings-section {
+        padding: 16px;
+        border-radius: 16px;
+    }
+
+    .settings-item {
+        flex-direction: column;
+        align-items: flex-start;
+    }
+
+    .settings-item-control {
+        margin-top: 12px;
+        align-self: flex-end;
+    }
+
+    .m3-button {
+        width: 100%;
+        margin-right: 0;
+    }
+
+    .m3-dialog {
+        padding: 1rem;
+        width: 95%;
+    }
+}
+
+/* 動畫效果 */
+@keyframes dialogShow {
+    from {
+        opacity: 0;
+        transform: translateY(20px);
+    }
+    to {
+        opacity: 1;
+        transform: translateY(0);
+    }
+}
+
+.m3-dialog[open] {
+    animation: dialogShow 0.3s var(--m3-motion-easing-standard);
+}
+
+/* 深色模式優化 */
+@media (prefers-color-scheme: dark) {
+    .m3-dialog::backdrop {
+        background: rgba(0, 0, 0, 0.6);
+    }
+
+    .settings-section {
+        background: var(--surface-container-low);
+    }
+
+    .m3-textfield {
+        background: var(--surface-container);
+    }
+
+    .danger-zone {
+        background: color-mix(in srgb, var(--error) 12%, transparent);
+    }
+}
+
+/* 按鈕樣式 */
+.m3-button {
+    padding: 0 24px;
+    height: 40px;
+    border-radius: 20px;
+    background: var(--primary);
+    color: var(--on-primary);
+    border: none;
+    font-size: 0.875rem;
+    font-weight: 500;
+    cursor: pointer;
+    transition: all 0.2s ease;
+}
+
+.m3-button:hover {
+    background: var(--primary);
+    opacity: 0.9;
+    box-shadow: var(--elevation-2);
+}
+
+.m3-button:disabled {
+    background: var(--surface-container-highest);
+    color: var(--on-surface-variant);
+    cursor: not-allowed;
+}
+
+/* 開關按鈕樣式 */
+.m3-switch {
+    position: relative;
+    display: inline-block;
+    width: 52px;
+    height: 32px;
+}
+
+.m3-switch input {
+    opacity: 0;
+    width: 0;
+    height: 0;
+}
+
+.m3-switch .track {
+    position: absolute;
+    cursor: pointer;
+    top: 0;
+    left: 0;
+    right: 0;
+    bottom: 0;
+    background-color: var(--surface-container-highest);
+    border: 2px solid var(--outline);
+    transition: 0.2s;
+    border-radius: 16px;
+}
+
+.m3-switch .track:before {
+    position: absolute;
+    content: "";
+    height: 24px;
+    width: 24px;
+    left: 2px;
+    bottom: 2px;
+    background-color: var(--outline);
+    transition: 0.2s;
+    border-radius: 50%;
+}
+
+.m3-switch input:checked + .track {
+    background-color: var(--primary);
+    border-color: var(--primary);
+}
+
+.m3-switch input:checked + .track:before {
+    background-color: var(--on-primary);
+    transform: translateX(20px);
+}
+
+.m3-switch input:focus + .track {
+    box-shadow: 0 0 0 4px var(--primary-container);
+}
+
+.m3-button.error {
+    background: var(--error);
+    color: var(--on-error);
+}
+
+.m3-button.error:hover {
+    background: var(--error-hover);
+}
+
+/* 開關按鈕樣式 */
+.m3-switch {
+    position: relative;
+    display: inline-block;
+    width: 52px;
+    height: 32px;
+}
+
+.m3-switch input {
+    opacity: 0;
+    width: 0;
+    height: 0;
+}
+
+.m3-switch-track {
+    position: absolute;
+    cursor: pointer;
+    top: 0;
+    left: 0;
+    right: 0;
+    bottom: 0;
+    background: var(--surface-container-highest);
+    border: 2px solid var(--outline);
+    transition: .2s;
+    border-radius: 16px;
+}
+
+.m3-switch-track:before {
+    position: absolute;
+    content: "";
+    height: 24px;
+    width: 24px;
+    left: 2px;
+    bottom: 2px;
+    background: var(--outline);
+    transition: .2s;
+    border-radius: 50%;
+}
+
+input:checked + .m3-switch-track {
+    background: var(--primary-container);
+    border-color: var(--primary);
+}
+
+input:checked + .m3-switch-track:before {
+    transform: translateX(20px);
+    background: var(--primary);
+}
+
+.m3-switch:hover .m3-switch-track {
+    background-color: var(--surface-container-high);
+}
+
+input:checked:hover + .m3-switch-track {
+    background-color: var(--primary-container);
+    opacity: 0.8;
+}
+
+[data-theme="dark"] .settings-section {
+    background: var(--surface-container-low);
+}
+
+[data-theme="dark"] .m3-textfield {
+    background: var(--surface-container);
+}
+
+[data-theme="dark"] .danger-zone {
+    background: color-mix(in srgb, var(--error) 8%, transparent);
+} 
\ No newline at end of file
diff --git a/static/css/theme.css b/static/css/theme.css
new file mode 100644
index 0000000..ee843b4
--- /dev/null
+++ b/static/css/theme.css
@@ -0,0 +1,597 @@
+:root {
+    /* Material Design 3 Light Theme */
+    --m3-primary: #006874;
+    --m3-on-primary: #ffffff;
+    --m3-primary-container: #97f0ff;
+    --m3-on-primary-container: #001f24;
+    
+    --m3-secondary: #4a6267;
+    --m3-on-secondary: #ffffff;
+    --m3-secondary-container: #cde7ec;
+    --m3-on-secondary-container: #051f23;
+    
+    --m3-tertiary: #525e7d;
+    --m3-on-tertiary: #ffffff;
+    --m3-tertiary-container: #dae2ff;
+    --m3-on-tertiary-container: #0e1b37;
+    
+    --m3-error: #ba1a1a;
+    --m3-on-error: #ffffff;
+    --m3-error-container: #ffdad6;
+    --m3-on-error-container: #410002;
+    
+    --m3-background: #fafdfd;
+    --m3-on-background: #191c1d;
+    --m3-surface: #fafdfd;
+    --m3-on-surface: #191c1d;
+    
+    --m3-surface-variant: #dbe4e6;
+    --m3-on-surface-variant: #3f484a;
+    --m3-outline: #70797b;
+    --m3-outline-variant: #bfc8ca;
+    
+    --m3-surface-container: #eef1f1;
+    --m3-surface-container-low: #f4f7f7;
+    --m3-surface-container-high: #e8ebeb;
+    --m3-surface-container-highest: #e2e5e5;
+    
+    /* Elevation */
+    --m3-elevation-1: 0 1px 2px rgba(0,0,0,0.3);
+    --m3-elevation-2: 0 1px 2px rgba(0,0,0,0.3), 0 1px 3px 1px rgba(0,0,0,0.15);
+    --m3-elevation-3: 0 1px 3px rgba(0,0,0,0.3), 0 4px 8px 3px rgba(0,0,0,0.15);
+    
+    /* Motion */
+    --m3-motion-easing-standard: cubic-bezier(0.2, 0, 0, 1);
+    --m3-motion-easing-emphasized: cubic-bezier(0.2, 0, 0, 1);
+    --m3-motion-duration-short: 0.2s;
+    --m3-motion-duration-medium: 0.3s;
+    --m3-motion-duration-long: 0.4s;
+    
+    /* Shape */
+    --m3-shape-corner-none: 0;
+    --m3-shape-corner-extra-small: 4px;
+    --m3-shape-corner-small: 8px;
+    --m3-shape-corner-medium: 12px;
+    --m3-shape-corner-large: 16px;
+    --m3-shape-corner-extra-large: 28px;
+    --m3-shape-corner-full: 9999px;
+}
+
+/* Dark Theme */
+.dark-mode {
+    --m3-primary: #4fd8eb;
+    --m3-on-primary: #00363d;
+    --m3-primary-container: #004f58;
+    --m3-on-primary-container: #97f0ff;
+    
+    --m3-secondary: #b1cbd0;
+    --m3-on-secondary: #1c3438;
+    --m3-secondary-container: #334b4f;
+    --m3-on-secondary-container: #cde7ec;
+    
+    --m3-tertiary: #bdc6ea;
+    --m3-on-tertiary: #24304d;
+    --m3-tertiary-container: #3b4664;
+    --m3-on-tertiary-container: #dae2ff;
+    
+    --m3-error: #ffb4ab;
+    --m3-on-error: #690005;
+    --m3-error-container: #93000a;
+    --m3-on-error-container: #ffdad6;
+    
+    --m3-background: #191c1d;
+    --m3-on-background: #e1e3e3;
+    --m3-surface: #191c1d;
+    --m3-on-surface: #e1e3e3;
+    
+    --m3-surface-variant: #3f484a;
+    --m3-on-surface-variant: #bfc8ca;
+    --m3-outline: #899294;
+    --m3-outline-variant: #3f484a;
+    
+    --m3-surface-container: #1d2021;
+    --m3-surface-container-low: #191c1d;
+    --m3-surface-container-high: #272b2b;
+    --m3-surface-container-highest: #323536;
+}
+
+/* Base Styles */
+body {
+    background-color: var(--m3-background);
+    color: var(--m3-on-background);
+    font-family: 'Roboto', sans-serif;
+    line-height: 1.5;
+    margin: 0;
+    padding: 0;
+}
+
+/* Theme Transition */
+* {
+    transition: background-color var(--m3-motion-duration-medium) var(--m3-motion-easing-standard),
+                color var(--m3-motion-duration-medium) var(--m3-motion-easing-standard),
+                border-color var(--m3-motion-duration-medium) var(--m3-motion-easing-standard),
+                box-shadow var(--m3-motion-duration-medium) var(--m3-motion-easing-standard);
+}
+
+/* Scrollbar */
+::-webkit-scrollbar {
+    width: 8px;
+    height: 8px;
+}
+
+::-webkit-scrollbar-track {
+    background: var(--m3-surface-container);
+}
+
+::-webkit-scrollbar-thumb {
+    background: var(--m3-outline);
+    border-radius: var(--m3-shape-corner-full);
+}
+
+::-webkit-scrollbar-thumb:hover {
+    background: var(--m3-outline-variant);
+}
+
+/* Selection */
+::selection {
+    background: var(--m3-primary);
+    color: var(--m3-on-primary);
+}
+
+/* Focus Outline */
+:focus {
+    outline: 2px solid var(--m3-primary);
+    outline-offset: 2px;
+}
+
+:focus:not(:focus-visible) {
+    outline: none;
+}
+
+:focus-visible {
+    outline: 2px solid var(--m3-primary);
+    outline-offset: 2px;
+}
+
+/* Sidebar Styles */
+.sidebar {
+    background-color: var(--m3-surface-container);
+    border-right: 1px solid var(--m3-outline);
+    height: 100vh;
+    width: 250px;
+    position: fixed;
+    top: 0;
+    left: 0;
+    transition: transform 0.5s var(--m3-motion-easing-emphasized),
+                background-color 0.3s var(--m3-motion-easing-standard);
+    z-index: 1000;
+}
+
+.sidebar.collapsed {
+    transform: translateX(-250px);
+}
+
+.sidebar-header {
+    padding: var(--m3-shape-corner-medium);
+    border-bottom: 1px solid var(--m3-outline);
+}
+
+.sidebar-content {
+    padding: var(--m3-shape-corner-medium);
+}
+
+.sidebar-footer {
+    padding: var(--m3-shape-corner-medium);
+    border-top: 1px solid var(--m3-outline);
+    position: absolute;
+    bottom: 0;
+    width: 100%;
+}
+
+/* Navigation Links */
+.nav-link {
+    color: var(--m3-secondary);
+    padding: var(--m3-shape-corner-small) var(--m3-shape-corner-medium);
+    border-radius: var(--m3-shape-corner-extra-small);
+    transition: color 0.3s var(--m3-motion-easing-standard);
+    position: relative;
+}
+
+.nav-link::after {
+    content: '';
+    position: absolute;
+    bottom: -2px;
+    left: 0;
+    width: 0;
+    height: 2px;
+    background-color: var(--m3-primary);
+    transition: width 0.3s var(--m3-motion-easing-emphasized);
+}
+
+.nav-link:hover::after {
+    width: 100%;
+}
+
+.nav-link.active {
+    color: var(--m3-primary);
+    background-color: var(--m3-surface-container-low);
+    font-weight: bold;
+}
+
+/* Main Content Area */
+.main-content {
+    margin-left: 250px;
+    padding: var(--m3-shape-corner-large);
+    min-height: 100vh;
+    transition: margin-left var(--m3-motion-duration-medium);
+}
+
+.main-content.expanded {
+    margin-left: 0;
+}
+
+/* Cards */
+.card {
+    background-color: var(--m3-surface-container);
+    border: 1px solid var(--m3-outline);
+    border-radius: var(--m3-shape-corner-small);
+    box-shadow: var(--m3-elevation-1);
+    transition: transform 0.3s var(--m3-motion-easing-emphasized),
+                box-shadow 0.3s var(--m3-motion-easing-standard);
+    animation: scaleIn 0.5s var(--m3-motion-easing-standard);
+}
+
+.card:hover {
+    transform: translateY(-5px);
+    box-shadow: var(--m3-elevation-2);
+}
+
+.card-header {
+    background-color: var(--m3-surface-container-low);
+    border-bottom: 1px solid var(--m3-outline);
+    padding: var(--m3-shape-corner-medium);
+}
+
+.card-body {
+    padding: var(--m3-shape-corner-medium);
+}
+
+/* Buttons */
+.btn {
+    border-radius: var(--m3-shape-corner-small);
+    padding: var(--m3-shape-corner-small) var(--m3-shape-corner-medium);
+    transition: transform 0.2s var(--m3-motion-easing-emphasized),
+                background-color 0.3s var(--m3-motion-easing-standard),
+                box-shadow 0.3s var(--m3-motion-easing-standard);
+}
+
+.btn:hover {
+    transform: translateY(-2px);
+    box-shadow: var(--m3-elevation-2);
+}
+
+.btn:active {
+    transform: translateY(1px);
+}
+
+.btn-primary {
+    background-color: var(--m3-primary);
+    border-color: var(--m3-primary);
+    color: var(--m3-on-primary);
+}
+
+/* Forms */
+.form-control {
+    background-color: var(--m3-surface);
+    border: 1px solid var(--m3-outline);
+    color: var(--m3-on-surface);
+    border-radius: var(--m3-shape-corner-small);
+    padding: var(--m3-shape-corner-small);
+    transition: border-color 0.3s var(--m3-motion-easing-standard),
+                box-shadow 0.3s var(--m3-motion-easing-standard),
+                background-color 0.3s var(--m3-motion-easing-standard);
+}
+
+.form-control:focus {
+    transform: translateY(-2px);
+    box-shadow: var(--m3-elevation-2);
+}
+
+/* Tables */
+.table {
+    background-color: var(--m3-surface-container);
+    color: var(--m3-on-surface);
+}
+
+.table th {
+    background-color: var(--m3-surface-container-low);
+    border-bottom: 2px solid var(--m3-outline);
+}
+
+.table td {
+    border-bottom: 1px solid var(--m3-outline);
+}
+
+.table-hover tbody tr {
+    transition: background-color 0.3s var(--m3-motion-easing-standard);
+}
+
+.table-hover tbody tr:hover {
+    transform: scale(1.01);
+    box-shadow: var(--m3-elevation-1);
+}
+
+/* Alerts */
+.alert {
+    border-radius: var(--m3-shape-corner-small);
+    padding: var(--m3-shape-corner-medium);
+    margin-bottom: var(--m3-shape-corner-medium);
+    animation: slideIn 0.5s var(--m3-motion-easing-standard);
+}
+
+.alert-primary {
+    background-color: rgba(var(--m3-primary), 0.1);
+    border: 1px solid var(--m3-primary);
+    color: var(--m3-primary);
+}
+
+/* Tooltips */
+.tooltip {
+    background-color: var(--m3-surface-container);
+    color: var(--m3-on-surface);
+    border: 1px solid var(--m3-outline);
+    border-radius: var(--m3-shape-corner-small);
+    padding: var(--m3-shape-corner-extra-small) var(--m3-shape-corner-small);
+    box-shadow: var(--m3-elevation-1);
+    animation: fadeIn 0.2s var(--m3-motion-easing-standard);
+}
+
+/* Badges */
+.badge {
+    padding: var(--m3-shape-corner-extra-small) var(--m3-shape-corner-small);
+    border-radius: var(--m3-shape-corner-extra-small);
+    font-size: 0.75rem;
+    animation: bounceIn 0.5s var(--m3-motion-easing-emphasized);
+}
+
+.badge-primary {
+    background-color: var(--m3-primary);
+    color: var(--m3-on-primary);
+}
+
+/* Progress Bars */
+.progress {
+    background-color: var(--m3-surface-container-low);
+    border-radius: var(--m3-shape-corner-small);
+    height: 0.5rem;
+}
+
+.progress-bar {
+    background-color: var(--m3-primary);
+    transition: width 1s var(--m3-motion-easing-standard);
+}
+
+/* Modals */
+.modal-content {
+    background-color: var(--m3-surface);
+    border: 1px solid var(--m3-outline);
+    border-radius: var(--m3-shape-corner-small);
+}
+
+.modal-header {
+    border-bottom: 1px solid var(--m3-outline);
+    background-color: var(--m3-surface-container);
+}
+
+.modal-footer {
+    border-top: 1px solid var(--m3-outline);
+    background-color: var(--m3-surface-container);
+}
+
+/* Toast Notifications */
+.toast {
+    background-color: var(--m3-surface-container);
+    border: 1px solid var(--m3-outline);
+    border-radius: var(--m3-shape-corner-small);
+    box-shadow: var(--m3-elevation-1);
+    animation: slideIn 0.5s var(--m3-motion-easing-standard);
+}
+
+.toast-header {
+    background-color: var(--m3-surface-container-low);
+    border-bottom: 1px solid var(--m3-outline);
+}
+
+/* Responsive Design */
+@media (max-width: 768px) {
+    .sidebar {
+        transform: translateX(-250px);
+    }
+    
+    .sidebar.active {
+        transform: translateX(0);
+    }
+    
+    .main-content {
+        margin-left: 0;
+    }
+    
+    .mobile-nav-toggle {
+        display: block;
+    }
+}
+
+/* Animations */
+@keyframes slideIn {
+    from {
+        transform: translateY(20px);
+        opacity: 0;
+    }
+    to {
+        transform: translateY(0);
+        opacity: 1;
+    }
+}
+
+@keyframes fadeIn {
+    from { opacity: 0; }
+    to { opacity: 1; }
+}
+
+@keyframes scaleIn {
+    from {
+        transform: scale(0.95);
+        opacity: 0;
+    }
+    to {
+        transform: scale(1);
+        opacity: 1;
+    }
+}
+
+@keyframes bounceIn {
+    0% {
+        transform: scale(0.3);
+        opacity: 0;
+    }
+    50% {
+        transform: scale(1.05);
+        opacity: 0.8;
+    }
+    70% { transform: scale(0.9); }
+    100% {
+        transform: scale(1);
+        opacity: 1;
+    }
+}
+
+/* Utilities */
+.cursor-pointer {
+    cursor: pointer;
+}
+
+.overflow-hidden {
+    overflow: hidden;
+}
+
+.text-ellipsis {
+    white-space: nowrap;
+    overflow: hidden;
+    text-overflow: ellipsis;
+}
+
+/* Theme Toggle Animation */
+.theme-toggle {
+    position: relative;
+    width: 50px;
+    height: 50px;
+    border-radius: 50%;
+    border: none;
+    background: none;
+    cursor: pointer;
+    transition: transform 0.5s var(--m3-motion-easing-emphasized);
+}
+
+.theme-toggle:hover {
+    transform: rotate(180deg);
+}
+
+.theme-toggle i {
+    font-size: 1.5rem;
+    color: var(--m3-on-surface);
+    transition: transform 0.5s var(--m3-motion-easing-emphasized),
+                color 0.3s var(--m3-motion-easing-standard);
+}
+
+.dark-mode .theme-toggle i {
+    transform: rotate(360deg);
+}
+
+/* Loading Animation */
+.loading {
+    position: relative;
+    width: 40px;
+    height: 40px;
+}
+
+.loading::after {
+    content: '';
+    position: absolute;
+    width: 100%;
+    height: 100%;
+    border: 3px solid var(--m3-outline);
+    border-top-color: var(--m3-primary);
+    border-radius: 50%;
+    animation: spin 1s infinite linear;
+}
+
+@keyframes spin {
+    from { transform: rotate(0deg); }
+    to { transform: rotate(360deg); }
+}
+
+/* Notification Animation */
+.alert {
+    animation: slideIn 0.5s var(--m3-motion-easing-standard);
+}
+
+/* Modal Animations */
+.modal.show .modal-dialog {
+    animation: slideIn 0.5s var(--m3-motion-easing-standard);
+}
+
+.modal-backdrop {
+    transition: opacity 0.3s var(--m3-motion-easing-standard);
+}
+
+/* Toast Notifications */
+.toast {
+    animation: slideIn 0.5s var(--m3-motion-easing-standard);
+}
+
+/* Page Transition */
+.page-transition {
+    animation: fadeIn 0.5s var(--m3-motion-easing-standard);
+}
+
+/* List Item Animation */
+.list-group-item {
+    transition: background-color 0.3s var(--m3-motion-easing-standard),
+                transform 0.3s var(--m3-motion-easing-emphasized);
+}
+
+.list-group-item:hover {
+    transform: translateX(5px);
+}
+
+/* Image Hover Effect */
+.img-hover {
+    transition: transform 0.3s var(--m3-motion-easing-emphasized),
+                filter 0.3s var(--m3-motion-easing-standard);
+}
+
+.img-hover:hover {
+    transform: scale(1.05);
+    filter: brightness(1.1);
+}
+
+/* Dropdown Animation */
+.dropdown-menu {
+    animation: scaleIn 0.3s var(--m3-motion-easing-standard);
+    transform-origin: top;
+}
+
+/* Tab Transition */
+.tab-content > .tab-pane {
+    animation: fadeIn 0.3s var(--m3-motion-easing-standard);
+}
+
+/* Collapse Animation */
+.collapse {
+    transition: height 0.3s var(--m3-motion-easing-standard);
+}
+
+/* Tooltip Animation */
+.tooltip {
+    animation: fadeIn 0.2s var(--m3-motion-easing-standard);
+} 
\ No newline at end of file
diff --git a/static/img/default-avatar.svg b/static/img/default-avatar.svg
new file mode 100644
index 0000000..7b98474
--- /dev/null
+++ b/static/img/default-avatar.svg
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg width="128" height="128" version="1.1" viewBox="0 0 128 128" xmlns="http://www.w3.org/2000/svg">
+ <circle cx="64" cy="64" r="64" fill="#e0e0e0"/>
+ <circle cx="64" cy="48" r="24" fill="#9e9e9e"/>
+ <path d="m24 128c0-32 24-40 40-40s40 8 40 40z" fill="#9e9e9e"/>
+</svg> 
\ No newline at end of file
diff --git a/static/img/default_bot.png b/static/img/default_bot.png
new file mode 100644
index 0000000..6d50cd1
--- /dev/null
+++ b/static/img/default_bot.png
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg width="128" height="128" viewBox="0 0 128 128" fill="none" xmlns="http://www.w3.org/2000/svg">
+    <!-- 背景圓形 -->
+    <circle cx="64" cy="64" r="64" fill="#7289DA"/>
+    <!-- 機器人頭部 -->
+    <rect x="34" y="24" width="60" height="60" rx="8" fill="white"/>
+    <!-- 機器人眼睛 -->
+    <circle cx="54" cy="44" r="6" fill="#7289DA"/>
+    <circle cx="74" cy="44" r="6" fill="#7289DA"/>
+    <!-- 機器人天線 -->
+    <line x1="64" y1="14" x2="64" y2="24" stroke="white" stroke-width="4"/>
+    <circle cx="64" cy="10" r="4" fill="white"/>
+    <!-- 機器人身體 -->
+    <rect x="44" y="94" width="40" height="24" rx="4" fill="white"/>
+    <!-- 機器人手臂 -->
+    <rect x="24" y="104" width="20" height="8" rx="4" fill="white"/>
+    <rect x="84" y="104" width="20" height="8" rx="4" fill="white"/>
+</svg> 
\ No newline at end of file
diff --git a/static/img/empty_bot.svg b/static/img/empty_bot.svg
new file mode 100644
index 0000000..7822178
--- /dev/null
+++ b/static/img/empty_bot.svg
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg width="200" height="200" viewBox="0 0 200 200" fill="none" xmlns="http://www.w3.org/2000/svg">
+    <!-- 機器人頭部 -->
+    <rect x="60" y="40" width="80" height="80" rx="10" fill="#E0E0E0"/>
+    <!-- 機器人眼睛 -->
+    <circle cx="85" cy="70" r="8" fill="#9E9E9E"/>
+    <circle cx="115" cy="70" r="8" fill="#9E9E9E"/>
+    <!-- 機器人天線 -->
+    <line x1="100" y1="30" x2="100" y2="40" stroke="#E0E0E0" stroke-width="4"/>
+    <circle cx="100" cy="25" r="5" fill="#E0E0E0"/>
+    <!-- 機器人身體 -->
+    <rect x="70" y="130" width="60" height="40" rx="5" fill="#E0E0E0"/>
+    <!-- 機器人手臂 -->
+    <rect x="40" y="140" width="30" height="10" rx="5" fill="#E0E0E0"/>
+    <rect x="130" y="140" width="30" height="10" rx="5" fill="#E0E0E0"/>
+</svg> 
\ No newline at end of file
diff --git a/static/img/logo.png b/static/img/logo.png
new file mode 100644
index 0000000..a4e96af
--- /dev/null
+++ b/static/img/logo.png
@@ -0,0 +1 @@
+iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAA5PSURBVHic7Z15cFTXfcc/v/dWu7SSVrsE2hASYrEwNnYwdsDYxI7tJHVjx3HqxJ00TjxNmkyTdpppJ5NOO9NMO+1M2kw7k0nTJO3ETZ3ETuw4XmLjBWMwYTEYg1gkhBYQQkII7ftq3+79zR+SkGS0vN2V3pP0PjPM6L173u/3zvnec8499/7OuUJKSTxQFGUZsBVYD6wEioE0QBfL+8QhPqAL6ADOAEeBA1LKvkgLFbEWQFGUFOBZ4GkgJ5Z3iUOuAa8BL0kpB8MtJGYCKIqyDvgVUBKrOyQAjcBzUsqT4RQQEwEURXkB+CmgxKL8BMUOPC+l/GWkhURVAEVRkoHXgSejUX6CcQB4RkrpCPfCqAigKEoR8D6wMtJlJzgXgO1Syrb/50JFUZYCHwJLIy03SVgKfKgoytJwLoy4AIqirAY+BgoiXXYSUQB8rCjK6nAujJgAiqKsAT4B0iNVZhKTDnyiKMqacC6KiACKoqwEPgZSI1FeApAKfBzOWBG2AIqirAA+AtLCLSvBSAM+UhRlRTgXhSWAoijLMTd8meGUk6BkYm4Ml4dzUcgCKIqSj9nyF4RTToKTj9kS5IdzUUgCKIqSg9nyF4dTThKwGHNMkBPORUELoCiKHvgAKA2njCShFPggMBYLm1BagTeALaFeP8Gw2WxUV1dz7tw5mpqaaG1tpa+vD5fLhcFgIDc3l5KSEsrKytizZg1r165Fp4vJTDsYtgAvSClfDfWCoARQFOUl4PvhlhAqpJScPHmSvXv3cuDAAWpqavB6vUHfo9FoWLduHdu3b2fHjh0sXx73s7aXpJQ/CPWikAVQFOUZ4HfhlhALnE4nb7/9Nq+99hrV1dURK3flypU8//zz7Ny5E0VR51SIlPJZKeXvQr0uJAEURdkKHCL+Vw45efIkL774IufPn4/qfTZt2sSrr77KihWqzeFJYJuU8kgo14S022XgZC+mF3300Ud8+9vfjvrDB6ipqeGpp57i8OHDat4mF3hXUZSQhgghtwBCiN8DT4V6XbSQUvLyyy/z0ksvxey+QgjeeOMNdu3apVYtfy+l/F4oF4QkgKIoW4DDQNycxHC73Xzve9/jgw8+iPm9X375ZZ577jk1iq4HtkopzwZ7QagtwC+JEwE8Hg/f+c53VHn4AHv27GHPnj1qFF0K/DKUCwK2AIqibMU8nBvX+P1+vvvd7/Lee++pdv+XX36Z3btjPooHuApsC7YVCKYFeI04efhSSp5//nlVHz7Anj17+OUvQ2qFI0Uh8EqwFwUlgKIoTxMnB0H27t3L22+/rXY1APjZz37GpUuX1Cj6SUVRng7mgqAEkFLuBf4QiRpFg1/84hdqV2EKj8fDG2+8oVbxvw/2xKAgWgAURVkG/CQilYkCx48f5+TJk2pXYwbvvfceHR0dahT9E0VRlgZ6UbAtwLPE+bGvffv2qV2FWbHb7Rw4cECNojXAD4K5IGABFEXRESfz/vn47LPP1K7CnKg1JgCeUxQl4ElXwbQA64HVEa1OBGlqalK7CnPS2NioVtGrgQ2BXhCMABsjW5fI0tfXp3YV5qS/v1+togO+fzACrIt8XSKHzRbwsXhV6O/vx+/3q1F0wPefVwBFUZYBcXG+uLCwUO0qzElBQYFaRa8P9JTwfC3ARiJwrj+aLF26VO0qzMmSJUvUKloB5j1NMZ8A6yJfj8hSVlamdpXmZNWqVWoWH9D9AxFgbeTrEVlKSkrIzY2L85oApKWlsXLlSrWKD+j+8wkQF/P/ARRFYfv27WpXYwa7du1CURJiLWteAeJi/j/Ejh07iIeD0UII1bYFQEDrIecUQFGU5cTJ/H+IvLw8Nm/erHY1pti2bRv5+fmxvk1A959vQhg38/8hnnjiCbWrAEBqaipPPvmkGkUHvBFkPgHiav4/RHl5OevWqX8AavPmzZSXl6tRdMD3n0+AuJr/D/H000+rWn5OTg5PPfWUmrcIeEI4lwBxN/8fYtWqVWzZskW18nft2kVWVpZa5Qd8/7kEiMv5/xBPP/00ycnJMS83IyODJ554Qs1bBHz/uQSI2/n/EEVFRezevTvm5T7++OPk5eWpeYuA7z+rAIqiFBGH8/+ZPProo2zcuDFmZa1bt44dO3aoXY2A7z/XTGArcTz/H0JRFPbs2UNGRkbUy8rOzubNN99Eo9GofauA7z+XAHE9/59OTk4Ob731VtRnBVqtljfffJOcnJxoFB/w/WcIoCiKQpzP/6ezfPly3nnnnahNDbVaLW+99RZr1qyJRvEB338278V14t/5WLduHfv376e0NPLnXRRF4Y033mDbtm2RLnomAd9/NgHifv4/nfLycg4ePMjjjz8esZlBUlISr7/+Ojt37oxUkYES8P1nE2BSgKhsfa5evcrp06epq6ujvb2d/v5+3G43ycnJ5OXlUVxczOrVq1m/fj1paWnhVAeA9PR0fv3rX/Phhx/y4x//mMuXL4dVXmZmJq+88gpbt24Nq5wQCfj+MwRQFGU5KmwA6e7u5sCBA+zfv5/jx4/T398/7/VCCIqLi9m6dSs7duxg06ZNaDShH8LKzs7mxRdf5Nq1a+zbt4/9+/dz5swZPB5PwGVotVo2bNjA7t272b17N6mpqSHXIQwCvv90hJRy+i8URTkEbI1mTaqqqvjFL37B/v378fl8YZWVnJzM9u3bef7551m3LvwzSVJKLl26xJEjR6iurqa5uZne3l5cLhcGg4Hc3FxKSkooKytjzZo1rF27Fp1OF3YdQuSQlHLGYYeZAiiKchyI2uGDX/3qV/z0pz/F6XRG9T4ajYZHHnmEH/7whxQVFUX1XnHEcSnljO3OU1cEFUVZgXnuPyq43W5eeOEF3nzzzajfC8Dv9/Puu+9y7NgxXnvtNe6///6Y3DcOWKEoyvLpv5h+aGADUTr+3d/fz7e+9a2YPfzpdHR08MQTT3D06NFY31pNZrz/dAE2RKMWPT097Nq1i5MnT0aj+KBxOBx885vf5MKFCzG/t0rMeP/pAkRlL9fly5d55JFHqK2tjUbxIWG1Wtm5cycNDQ1qVCfWzHj/KQEURckHIr5Xq6Wlhe3bt9PS0hLpssNicHCQRx99lO7ubrWqFCvyFUWZscd1eguwgQgfAGlvb2fbtm10dXVFstiI0dPTw2OPPYbT6VS7KtFkxvtPFyDiO4G6u7vZunUrnZ2dkSw24jQ1NfH444/j9/vVrkq0mPH+0wWI+Eygv7+frVu30t7eHskio8bJkyf5/ve/r3Y1osWM95+yU1GUHGAg0ndyOp1s3ryZU6dORbrIqPLwww/z/vvvq12NSDMgpcyZ/ovpLUBEZ3der5ddu3bF5cMH+P3vf8/hw4fVrkakCej9pwsQ0angs88+y7Fjx8K6h8/n49SpU+zbt4/Dhw9z/fp1RkZGwipzLqSU/OhHP8Jut0et/HkI6P0nBVAURU+EDwL/7ne/49133w352s7OTt544w3Ky8spLS3l4Ycf5qc//SlHjhyJyuzh+vXr/OQnP4l4uUEQ0PtPjQEURVkLnI/kHaurq9m0aVNIG0GklJw+fZo//OEPfPjhh7S2ts76d0IIysrK2L59O4888gjl5eVhHyGTUvLQQw9x4MCBsMoJkfNSyhkbFKYLsBo4F8k7PPnkk+zduzekazs6Oti7dy/79++nrq4upGvz8/PZsWMHu3fvZsOGDSHvPHrggQc4duxYSNdGgHVSyhnTmukCrALOR/IOBQUFtLW1BX2d3+/n2LFj7N27l48++oisrCweffRRtm3bRklJCenp6RiNRlwuF319fTQ3N3P8+HEOHTrE2bNn8Xq9QVcqPz+fxsZGNBoNPp+P+vp6Ll68SHNzM729vbjdboxGI7m5uZSWlrJq1SrWr19PSkpKSJ8xBFZJKWd0Z9MFKAUaInmHI0eOsGnTpqCva2tr47333uPAgQNcvHgx7HqUlJSwfft2du7cyerVq4O67tChQ2zevBm/38/+/fvZt28fJ06cYGBgYN7rNBoNa9euZceOHezevZuCgoKw6z8HpVLKxpl3FkJE9AE8//zzMlS8Xq88ePCg3LFjh9RoNBKI2EOr1cqtW7fKgwcPSp/PF1Rdzp8/L7/+9a/LlJSUiNVdo9HI7du3y0OHDkmfzxfqxwuEgJ6nlDKyAhw+fDjkD9nZ2Sl/85vfyPvvvz+qD376IzMzU37/+9+XZ86cCboun3/+ufzGN74hdTpdVOqv0+nkE088Ic+ePRvOxwtUgMifCg6Fzs5O3n77bT744APq6+sjXn5xcTHbt29n165dlJeXB339+fPn2bt3L/v376e5uTmi9SsrK2Pnzp3s3r2bwsLCcIqK/KngULh27RoHDx7k448/5vTp0wwNDYVUTnp6OuvXr2fr1q088sgjlJSUhFyX1tZWDh48yMGDBzl79ixDQ0MhlZOWlsa9997L1q1b2bZtG8XFxSHXYRrqnAoOFr/fT319PadOneL8+fM0NTXR2dmJ1WrF7/djMpnIzs6lqKiI0tJSVq9ezX333UdmZmbY9x4ZGeHChQucO3eOuro62tra6O/vx+12YzAYyM3NpaioiJUrV7J27VrWrVtHcnJy2PcGdU8FB0tSUhJlZWWUlZWpXZWgMBqNrF+/nvXr16tdlUCYcf8pAaJ1LDzBzJPBU+cCFEXJBSK+KzjBFLmKouRN/8X0FmAFEd4VnGAGM95/ugBxcTI4QZjx/tMFiIuTwQnCjPefLkBcnAxOEGa8/3QBIn4yOME0Zrz/lACKoqQCcXEyOEFIUxQlbfovprcAy4mTk8EJwoz3ny5A3JwMThBmvP90AeLmZHCCMOP9pwsQNyeDE4QZ7z8lQDydDE4QZrz/9BYgbk4GJwgz3n+6AHFzMjhBmPH+0wWIm5PBCcKM958uQNycDE4QZrz/lABxdjI4QZjx/tNbgLg5GZwgzHj/6QLE1cngBGDG+08XQPWTwQnAjPefLoDqJ4MTgBnvP12AuDoZnADMeP8pAeLwZHCCGe8/vQWIq5PBCcCM958ugOong5OAGe8/XQDVTwYnATPef7oAqp8MTgJmvP+UAIqipBNnJ4OTgBnvP70FiLuTwQnAjPefLoDqJ4OTgBnvP10A1U8GJwEz3n+6AKqfDE4CZrz/lABxejI4CZjx/v8HcKqxpihG4yAAAAAASUVORK5CYII= 
\ No newline at end of file
diff --git a/static/js/bot_management.js b/static/js/bot_management.js
new file mode 100644
index 0000000..fc1c9f3
--- /dev/null
+++ b/static/js/bot_management.js
@@ -0,0 +1,151 @@
+document.addEventListener('DOMContentLoaded', () => {
+    const botCards = document.querySelectorAll('.bot-card');
+    const addBotBtn = document.querySelector('#add-bot-btn');
+    const addBotDialog = document.querySelector('#add-bot-dialog');
+    
+    // Card hover effects
+    const addHoverListeners = card => {
+        card.addEventListener('mouseenter', () => card.classList.add('hover'));
+        card.addEventListener('mouseleave', () => card.classList.remove('hover'));
+    };
+
+    botCards.forEach(addHoverListeners);
+
+    // Bot status update
+    const updateBotStatus = () => {
+        botCards.forEach(card => {
+            const statusDot = card.querySelector('.status-indicator');
+            const botId = card.dataset.botId;
+            
+            fetch(`/bot/${botId}/status/`)
+                .then(response => response.json())
+                .then(data => {
+                    statusDot.classList.remove(data.online ? 'status-offline' : 'status-online');
+                    statusDot.classList.add(data.online ? 'status-online' : 'status-offline');
+                    
+                    // Update statistics if available
+                    if (data.stats) {
+                        card.querySelector('.server-count').textContent = data.stats.server_count;
+                        card.querySelector('.user-count').textContent = data.stats.user_count;
+                        card.querySelector('.command-count').textContent = data.stats.command_count;
+                    }
+                })
+                .catch(error => {
+                    console.error('Error fetching bot status:', error);
+                    statusDot.classList.remove('status-online');
+                    statusDot.classList.add('status-offline');
+                });
+        });
+    };
+
+    // Add bot dialog
+    if (addBotBtn && addBotDialog) {
+        addBotBtn.addEventListener('click', () => {
+            addBotDialog.showModal();
+        });
+
+        addBotDialog.querySelector('.close-dialog').addEventListener('click', () => {
+            addBotDialog.close();
+        });
+
+        const addBotForm = addBotDialog.querySelector('form');
+        addBotForm.addEventListener('submit', async (e) => {
+            e.preventDefault();
+            const formData = new FormData(addBotForm);
+            
+            try {
+                const response = await fetch('/bot/add/', {
+                    method: 'POST',
+                    body: formData,
+                    headers: {
+                        'X-CSRFToken': getCookie('csrftoken')
+                    }
+                });
+
+                const data = await response.json();
+                
+                if (response.ok) {
+                    showToast('success', '機器人新增成功！');
+                    window.location.href = `/bot/${data.bot_id}/dashboard/`;
+                } else {
+                    showToast('error', data.error || '新增機器人時發生錯誤');
+                }
+            } catch (error) {
+                console.error('Error adding bot:', error);
+                showToast('error', '新增機器人時發生錯誤');
+            }
+        });
+    }
+
+    // Delete bot
+    document.querySelectorAll('.delete-bot-btn').forEach(btn => {
+        btn.addEventListener('click', async (e) => {
+            e.preventDefault();
+            const botId = btn.dataset.botId;
+            
+            if (confirm('確定要刪除這個機器人嗎？此操作無法復原。')) {
+                try {
+                    const response = await fetch(`/bot/${botId}/delete/`, {
+                        method: 'POST',
+                        headers: {
+                            'X-CSRFToken': getCookie('csrftoken')
+                        }
+                    });
+
+                    if (response.ok) {
+                        showToast('success', '機器人已成功刪除');
+                        const card = document.querySelector(`[data-bot-id="${botId}"]`);
+                        card.remove();
+                        
+                        // Show empty state if no bots left
+                        if (document.querySelectorAll('.bot-card').length === 0) {
+                            document.querySelector('.empty-state').style.display = 'flex';
+                        }
+                    } else {
+                        const data = await response.json();
+                        showToast('error', data.error || '刪除機器人時發生錯誤');
+                    }
+                } catch (error) {
+                    console.error('Error deleting bot:', error);
+                    showToast('error', '刪除機器人時發生錯誤');
+                }
+            }
+        });
+    });
+
+    // Initialize status updates
+    updateBotStatus();
+    setInterval(updateBotStatus, 30000);
+
+    // Utility functions
+    function getCookie(name) {
+        let cookieValue = null;
+        if (document.cookie && document.cookie !== '') {
+            const cookies = document.cookie.split(';');
+            for (let i = 0; i < cookies.length; i++) {
+                const cookie = cookies[i].trim();
+                if (cookie.substring(0, name.length + 1) === (name + '=')) {
+                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
+                    break;
+                }
+            }
+        }
+        return cookieValue;
+    }
+
+    function showToast(type, message) {
+        const toast = document.createElement('div');
+        toast.className = `toast toast-${type}`;
+        toast.textContent = message;
+        
+        document.body.appendChild(toast);
+        
+        setTimeout(() => {
+            toast.classList.add('show');
+            setTimeout(() => {
+                toast.classList.remove('show');
+                setTimeout(() => toast.remove(), 300);
+            }, 3000);
+        }, 100);
+    }
+}); 
\ No newline at end of file
diff --git a/static/js/common.js b/static/js/common.js
new file mode 100644
index 0000000..5d03725
--- /dev/null
+++ b/static/js/common.js
@@ -0,0 +1,347 @@
+// 主題管理
+class ThemeManager {
+    constructor() {
+        this.themeToggle = document.getElementById('theme-toggle');
+        this.themeIcon = this.themeToggle?.querySelector('i');
+        this.init();
+    }
+
+    init() {
+        if (!this.themeToggle) return;
+        
+        // 檢查本地存儲的主題設置
+        const savedTheme = localStorage.getItem('theme');
+        if (savedTheme) {
+            this.setTheme(savedTheme === 'dark');
+        } else {
+            // 檢查系統主題偏好
+            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
+            this.setTheme(prefersDark);
+        }
+
+        // 監聽主題切換按鈕
+        this.themeToggle.addEventListener('click', () => {
+            const isDark = document.documentElement.classList.toggle('dark-mode');
+            this.setTheme(isDark);
+        });
+
+        // 監聽系統主題變化
+        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
+            if (!localStorage.getItem('theme')) {
+                this.setTheme(e.matches);
+            }
+        });
+    }
+
+    setTheme(isDark) {
+        document.documentElement.classList.toggle('dark-mode', isDark);
+        if (this.themeIcon) {
+            this.themeIcon.className = isDark ? 'fas fa-moon' : 'fas fa-sun';
+        }
+        localStorage.setItem('theme', isDark ? 'dark' : 'light');
+    }
+}
+
+// 提示管理
+class NotificationManager {
+    constructor() {
+        this.container = document.createElement('div');
+        this.container.className = 'notification-container';
+        document.body.appendChild(this.container);
+        
+        // 添加樣式
+        const style = document.createElement('style');
+        style.textContent = `
+            .notification-container {
+                position: fixed;
+                top: 80px;
+                right: 20px;
+                z-index: 9999;
+            }
+
+            .m3-notification {
+                background-color: var(--bg-primary);
+                color: var(--text-primary);
+                padding: 16px;
+                border-radius: 8px;
+                margin-bottom: 10px;
+                box-shadow: var(--m3-elevation-2);
+                display: flex;
+                align-items: center;
+                gap: 12px;
+                min-width: 300px;
+                max-width: 400px;
+                animation: slideIn 0.3s ease-out;
+                transition: all 0.3s ease-out;
+            }
+
+            .m3-notification.success { border-left: 4px solid #4CAF50; }
+            .m3-notification.error { border-left: 4px solid #F44336; }
+            .m3-notification.warning { border-left: 4px solid #FFC107; }
+            .m3-notification.info { border-left: 4px solid #2196F3; }
+
+            .m3-notification i {
+                font-size: 20px;
+            }
+
+            .m3-notification .content {
+                flex-grow: 1;
+            }
+
+            .m3-notification .close {
+                cursor: pointer;
+                padding: 4px;
+                border-radius: 50%;
+                transition: background-color 0.2s;
+            }
+
+            .m3-notification .close:hover {
+                background-color: var(--m3-state-hover);
+            }
+
+            @keyframes slideIn {
+                from {
+                    transform: translateX(100%);
+                    opacity: 0;
+                }
+                to {
+                    transform: translateX(0);
+                    opacity: 1;
+                }
+            }
+
+            @keyframes slideOut {
+                from {
+                    transform: translateX(0);
+                    opacity: 1;
+                }
+                to {
+                    transform: translateX(100%);
+                    opacity: 0;
+                }
+            }
+        `;
+        document.head.appendChild(style);
+    }
+
+    show(message, type = 'info', duration = 5000) {
+        const notification = document.createElement('div');
+        notification.className = `m3-notification ${type}`;
+
+        let icon;
+        switch (type) {
+            case 'success':
+                icon = 'fas fa-check-circle';
+                break;
+            case 'error':
+                icon = 'fas fa-times-circle';
+                break;
+            case 'warning':
+                icon = 'fas fa-exclamation-triangle';
+                break;
+            default:
+                icon = 'fas fa-info-circle';
+        }
+
+        notification.innerHTML = `
+            <i class="${icon}"></i>
+            <div class="content">${message}</div>
+            <div class="close"><i class="fas fa-times"></i></div>
+        `;
+
+        this.container.appendChild(notification);
+
+        // 關閉按鈕事件
+        notification.querySelector('.close').addEventListener('click', () => {
+            this.hide(notification);
+        });
+
+        // 自動關閉
+        if (duration > 0) {
+            setTimeout(() => {
+                if (notification.parentNode) {
+                    this.hide(notification);
+                }
+            }, duration);
+        }
+
+        return notification;
+    }
+
+    hide(notification) {
+        notification.style.animation = 'slideOut 0.3s ease-out';
+        setTimeout(() => {
+            if (notification.parentNode) {
+                notification.parentNode.removeChild(notification);
+            }
+        }, 300);
+    }
+
+    success(message, duration) {
+        return this.show(message, 'success', duration);
+    }
+
+    error(message, duration) {
+        return this.show(message, 'error', duration);
+    }
+
+    warning(message, duration) {
+        return this.show(message, 'warning', duration);
+    }
+
+    info(message, duration) {
+        return this.show(message, 'info', duration);
+    }
+}
+
+// 表單驗證
+class FormValidator {
+    constructor(form) {
+        this.form = form;
+        this.init();
+    }
+
+    init() {
+        this.form.addEventListener('submit', (e) => {
+            if (!this.validateForm()) {
+                e.preventDefault();
+            }
+        });
+
+        // 即時驗證
+        this.form.querySelectorAll('input, textarea, select').forEach(input => {
+            input.addEventListener('blur', () => {
+                this.validateField(input);
+            });
+        });
+    }
+
+    validateForm() {
+        let isValid = true;
+        this.form.querySelectorAll('input, textarea, select').forEach(input => {
+            if (!this.validateField(input)) {
+                isValid = false;
+            }
+        });
+        return isValid;
+    }
+
+    validateField(input) {
+        const value = input.value.trim();
+        let isValid = true;
+        let errorMessage = '';
+
+        // 檢查必填欄位
+        if (input.hasAttribute('required') && !value) {
+            isValid = false;
+            errorMessage = '此欄位為必填';
+        }
+
+        // 檢查最小長度
+        if (input.minLength && value.length < input.minLength) {
+            isValid = false;
+            errorMessage = `最少需要 ${input.minLength} 個字元`;
+        }
+
+        // 檢查最大長度
+        if (input.maxLength && value.length > input.maxLength) {
+            isValid = false;
+            errorMessage = `最多只能 ${input.maxLength} 個字元`;
+        }
+
+        // 檢查 pattern
+        if (input.pattern && !new RegExp(input.pattern).test(value)) {
+            isValid = false;
+            errorMessage = input.title || '格式不正確';
+        }
+
+        // 檢查 email
+        if (input.type === 'email' && value && !this.isValidEmail(value)) {
+            isValid = false;
+            errorMessage = '請輸入有效的電子郵件地址';
+        }
+
+        // 檢查 URL
+        if (input.type === 'url' && value && !this.isValidUrl(value)) {
+            isValid = false;
+            errorMessage = '請輸入有效的網址';
+        }
+
+        this.showFieldError(input, errorMessage);
+        return isValid;
+    }
+
+    showFieldError(input, message) {
+        const container = input.parentElement;
+        let errorElement = container.querySelector('.field-error');
+        
+        if (!errorElement) {
+            errorElement = document.createElement('div');
+            errorElement.className = 'field-error text-danger mt-1';
+            container.appendChild(errorElement);
+        }
+
+        if (message) {
+            errorElement.textContent = message;
+            input.classList.add('is-invalid');
+        } else {
+            errorElement.textContent = '';
+            input.classList.remove('is-invalid');
+        }
+    }
+
+    isValidEmail(email) {
+        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
+    }
+
+    isValidUrl(url) {
+        try {
+            new URL(url);
+            return true;
+        } catch {
+            return false;
+        }
+    }
+}
+
+// 錯誤處理
+class ErrorHandler {
+    static handle(error, context = '') {
+        console.error(`[${context}]`, error);
+        notifications.error(this.getErrorMessage(error));
+    }
+
+    static getErrorMessage(error) {
+        if (typeof error === 'string') {
+            return error;
+        }
+        
+        if (error.response) {
+            return error.response.data?.message || '伺服器錯誤，請稍後再試';
+        }
+
+        if (error.message) {
+            return error.message;
+        }
+
+        return '發生未知錯誤，請稍後再試';
+    }
+}
+
+// 初始化
+const themeManager = new ThemeManager();
+const notifications = new NotificationManager();
+
+// 全局錯誤處理
+window.addEventListener('error', (event) => {
+    ErrorHandler.handle(event.error, 'Global Error');
+});
+
+window.addEventListener('unhandledrejection', (event) => {
+    ErrorHandler.handle(event.reason, 'Unhandled Promise Rejection');
+});
+
+// 導出全局變數
+window.notifications = notifications;
+window.ErrorHandler = ErrorHandler;
+window.FormValidator = FormValidator; 
\ No newline at end of file
-- 
2.49.0.windows.1


From 7316f86717f176bec4babff5215f0c8c42ef2a8e Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 26 Apr 2025 22:00:15 +0800
Subject: [PATCH 02/10] feat: Implement Discord OAuth2 Authentication using
 django-allauth

---
 .cursor/database_setup.md                     |  56 ++
 .cursor/design_principles.md                  |  28 +
 .cursor/mcp.json                              |  21 +
 .cursor/roadmap.md                            |  23 +
 .cursor/rules/cursor_rules.mdc                |  53 ++
 .cursor/rules/custom.mdc                      |  67 ++
 .cursor/rules/dev_workflow.mdc                | 215 ++++++
 .cursor/rules/self_improve.mdc                |  73 ++
 .cursor/rules/taskmaster.mdc                  | 353 ++++++++++
 .env.example                                  |   4 +-
 .windsurfrules                                | 474 +++++++++++++
 README-task-master.md                         | 645 ++++++++++++++++++
 README.md                                     |   8 +-
 .../__pycache__/__init__.cpython-311.pyc      | Bin 155 -> 0 bytes
 .../__pycache__/__init__.cpython-313.pyc      | Bin 143 -> 0 bytes
 .../__pycache__/__init__.cpython-39.pyc       | Bin 137 -> 0 bytes
 bot_manager/__pycache__/apps.cpython-311.pyc  | Bin 753 -> 0 bytes
 bot_manager/__pycache__/bot.cpython-311.pyc   | Bin 11715 -> 0 bytes
 bot_manager/__pycache__/bot.cpython-313.pyc   | Bin 2956 -> 0 bytes
 bot_manager/__pycache__/bot.cpython-39.pyc    | Bin 5728 -> 0 bytes
 bot_manager/__pycache__/forms.cpython-311.pyc | Bin 1598 -> 0 bytes
 bot_manager/__pycache__/forms.cpython-313.pyc | Bin 1312 -> 0 bytes
 bot_manager/__pycache__/forms.cpython-39.pyc  | Bin 1119 -> 0 bytes
 .../__pycache__/models.cpython-311.pyc        | Bin 2112 -> 0 bytes
 .../__pycache__/models.cpython-313.pyc        | Bin 1908 -> 0 bytes
 bot_manager/__pycache__/models.cpython-39.pyc | Bin 1314 -> 0 bytes
 bot_manager/__pycache__/urls.cpython-311.pyc  | Bin 977 -> 0 bytes
 bot_manager/__pycache__/urls.cpython-313.pyc  | Bin 781 -> 0 bytes
 bot_manager/__pycache__/urls.cpython-39.pyc   | Bin 618 -> 0 bytes
 bot_manager/__pycache__/views.cpython-311.pyc | Bin 11371 -> 0 bytes
 bot_manager/__pycache__/views.cpython-313.pyc | Bin 4049 -> 0 bytes
 bot_manager/__pycache__/views.cpython-39.pyc  | Bin 4240 -> 0 bytes
 .../__pycache__/0001_initial.cpython-311.pyc  | Bin 2093 -> 0 bytes
 .../__pycache__/0001_initial.cpython-313.pyc  | Bin 1997 -> 0 bytes
 .../__pycache__/0001_initial.cpython-39.pyc   | Bin 1212 -> 0 bytes
 .../0002_botconfig_channel_id.cpython-311.pyc | Bin 882 -> 0 bytes
 .../0002_botconfig_channel_id.cpython-39.pyc  | Bin 656 -> 0 bytes
 .../__pycache__/__init__.cpython-311.pyc      | Bin 166 -> 0 bytes
 .../__pycache__/__init__.cpython-313.pyc      | Bin 154 -> 0 bytes
 .../__pycache__/__init__.cpython-39.pyc       | Bin 148 -> 0 bytes
 .../__pycache__/__init__.cpython-311.pyc      | Bin 168 -> 0 bytes
 .../bot_manager_filters.cpython-311.pyc       | Bin 721 -> 0 bytes
 config/settings_base.py                       |  33 +-
 dashboard/templates/dashboard/index.html      |   2 +-
 db.sqlite3                                    | Bin 188416 -> 327680 bytes
 .../__pycache__/__init__.cpython-311.pyc      | Bin 159 -> 0 bytes
 .../__pycache__/__init__.cpython-313.pyc      | Bin 147 -> 0 bytes
 .../__pycache__/__init__.cpython-39.pyc       | Bin 141 -> 0 bytes
 .../__pycache__/settings.cpython-311.pyc      | Bin 5023 -> 0 bytes
 .../__pycache__/settings.cpython-313.pyc      | Bin 3129 -> 0 bytes
 .../__pycache__/settings.cpython-39.pyc       | Bin 3449 -> 0 bytes
 .../__pycache__/urls.cpython-311.pyc          | Bin 2468 -> 0 bytes
 .../__pycache__/urls.cpython-313.pyc          | Bin 1104 -> 0 bytes
 .../__pycache__/urls.cpython-39.pyc           | Bin 1236 -> 0 bytes
 .../__pycache__/wsgi.cpython-311.pyc          | Bin 697 -> 0 bytes
 .../__pycache__/wsgi.cpython-313.pyc          | Bin 651 -> 0 bytes
 .../__pycache__/wsgi.cpython-39.pyc           | Bin 560 -> 0 bytes
 docs/discord_app_setup.md                     |  68 ++
 manage.py                                     |  11 +-
 requirements.txt                              |   4 +-
 scripts/setup_discord_oauth.py                |  59 ++
 social_cube/urls.py                           |   1 +
 templates/account/login.html                  | 115 ++++
 templates/base.html                           | 168 -----
 64 files changed, 2304 insertions(+), 177 deletions(-)
 create mode 100644 .cursor/database_setup.md
 create mode 100644 .cursor/design_principles.md
 create mode 100644 .cursor/mcp.json
 create mode 100644 .cursor/roadmap.md
 create mode 100644 .cursor/rules/cursor_rules.mdc
 create mode 100644 .cursor/rules/custom.mdc
 create mode 100644 .cursor/rules/dev_workflow.mdc
 create mode 100644 .cursor/rules/self_improve.mdc
 create mode 100644 .cursor/rules/taskmaster.mdc
 create mode 100644 .windsurfrules
 create mode 100644 README-task-master.md
 delete mode 100644 bot_manager/__pycache__/__init__.cpython-311.pyc
 delete mode 100644 bot_manager/__pycache__/__init__.cpython-313.pyc
 delete mode 100644 bot_manager/__pycache__/__init__.cpython-39.pyc
 delete mode 100644 bot_manager/__pycache__/apps.cpython-311.pyc
 delete mode 100644 bot_manager/__pycache__/bot.cpython-311.pyc
 delete mode 100644 bot_manager/__pycache__/bot.cpython-313.pyc
 delete mode 100644 bot_manager/__pycache__/bot.cpython-39.pyc
 delete mode 100644 bot_manager/__pycache__/forms.cpython-311.pyc
 delete mode 100644 bot_manager/__pycache__/forms.cpython-313.pyc
 delete mode 100644 bot_manager/__pycache__/forms.cpython-39.pyc
 delete mode 100644 bot_manager/__pycache__/models.cpython-311.pyc
 delete mode 100644 bot_manager/__pycache__/models.cpython-313.pyc
 delete mode 100644 bot_manager/__pycache__/models.cpython-39.pyc
 delete mode 100644 bot_manager/__pycache__/urls.cpython-311.pyc
 delete mode 100644 bot_manager/__pycache__/urls.cpython-313.pyc
 delete mode 100644 bot_manager/__pycache__/urls.cpython-39.pyc
 delete mode 100644 bot_manager/__pycache__/views.cpython-311.pyc
 delete mode 100644 bot_manager/__pycache__/views.cpython-313.pyc
 delete mode 100644 bot_manager/__pycache__/views.cpython-39.pyc
 delete mode 100644 bot_manager/migrations/__pycache__/0001_initial.cpython-311.pyc
 delete mode 100644 bot_manager/migrations/__pycache__/0001_initial.cpython-313.pyc
 delete mode 100644 bot_manager/migrations/__pycache__/0001_initial.cpython-39.pyc
 delete mode 100644 bot_manager/migrations/__pycache__/0002_botconfig_channel_id.cpython-311.pyc
 delete mode 100644 bot_manager/migrations/__pycache__/0002_botconfig_channel_id.cpython-39.pyc
 delete mode 100644 bot_manager/migrations/__pycache__/__init__.cpython-311.pyc
 delete mode 100644 bot_manager/migrations/__pycache__/__init__.cpython-313.pyc
 delete mode 100644 bot_manager/migrations/__pycache__/__init__.cpython-39.pyc
 delete mode 100644 bot_manager/templatetags/__pycache__/__init__.cpython-311.pyc
 delete mode 100644 bot_manager/templatetags/__pycache__/bot_manager_filters.cpython-311.pyc
 delete mode 100644 discord_manager/__pycache__/__init__.cpython-311.pyc
 delete mode 100644 discord_manager/__pycache__/__init__.cpython-313.pyc
 delete mode 100644 discord_manager/__pycache__/__init__.cpython-39.pyc
 delete mode 100644 discord_manager/__pycache__/settings.cpython-311.pyc
 delete mode 100644 discord_manager/__pycache__/settings.cpython-313.pyc
 delete mode 100644 discord_manager/__pycache__/settings.cpython-39.pyc
 delete mode 100644 discord_manager/__pycache__/urls.cpython-311.pyc
 delete mode 100644 discord_manager/__pycache__/urls.cpython-313.pyc
 delete mode 100644 discord_manager/__pycache__/urls.cpython-39.pyc
 delete mode 100644 discord_manager/__pycache__/wsgi.cpython-311.pyc
 delete mode 100644 discord_manager/__pycache__/wsgi.cpython-313.pyc
 delete mode 100644 discord_manager/__pycache__/wsgi.cpython-39.pyc
 create mode 100644 docs/discord_app_setup.md
 create mode 100644 scripts/setup_discord_oauth.py
 create mode 100644 templates/account/login.html
 delete mode 100644 templates/base.html

diff --git a/.cursor/database_setup.md b/.cursor/database_setup.md
new file mode 100644
index 0000000..3bbcfc5
--- /dev/null
+++ b/.cursor/database_setup.md
@@ -0,0 +1,56 @@
+# 📦 Database Setup
+
+## 📊 資料庫設計概述
+為了確保系統的高性能和可擴展性，我們設計了以下主要資料表：
+
+### Bot
+| 字段名稱 | 資料型態 | 說明 |
+|----------|----------|------|
+| id | Integer | 主鍵，自增 |
+| name | String | 機器人名稱 |
+| description | String | 機器人描述 |
+| status | Boolean | 狀態 (啟用/停用) |
+| created_at | DateTime | 創建時間 |
+| updated_at | DateTime | 更新時間 |
+
+### Server
+| 字段名稱 | 資料型態 | 說明 |
+|----------|----------|------|
+| id | Integer | 主鍵，自增 |
+| discord_id | String | Discord 伺服器 ID |
+| name | String | 伺服器名稱 |
+| member_count | Integer | 成員數量 |
+| bot_id | Integer | 外鍵，關聯 Bot |
+| created_at | DateTime | 創建時間 |
+| updated_at | DateTime | 更新時間 |
+
+### Command
+| 字段名稱 | 資料型態 | 說明 |
+|----------|----------|------|
+| id | Integer | 主鍵，自增 |
+| name | String | 指令名稱 |
+| description | String | 指令描述 |
+| parameters | JSON | 指令參數（JSON） |
+| bot_id | Integer | 外鍵，關聯 Bot |
+| created_at | DateTime | 創建時間 |
+| updated_at | DateTime | 更新時間 |
+
+### Log
+| 字段名稱 | 資料型態 | 說明 |
+|----------|----------|------|
+| id | Integer | 主鍵，自增 |
+| type | String | 錄入類型（INFO/ERROR） |
+| content | Text | 日誌內容 |
+| bot_id | Integer | 外鍵 |
+| server_id | Integer | 外鍵 |
+| created_at | DateTime | 創建時間 |
+
+### Setting
+| 字段名稱 | 資料型態 | 說明 |
+|----------|----------|------|
+| id | Integer | 主鍵 |
+| key | String | 設定鍵 |
+| value | String | 設定值 |
+| bot_id | Integer | 外鍵 |
+| created_at | DateTime | 創建時間 |
+| updated_at | DateTime | 更新時間 |
diff --git a/.cursor/design_principles.md b/.cursor/design_principles.md
new file mode 100644
index 0000000..f23cf6a
--- /dev/null
+++ b/.cursor/design_principles.md
@@ -0,0 +1,28 @@
+# 🎨 UI/UX 設計原則
+
+## 🎯 設計目標
+- 易用性：使用者能快速完成操作
+- 響應性：支援桌機與行動裝置
+- 可訪問性：對所有人群友好
+- 美觀性：一致現代的設計語言
+
+## 📐 架構與視覺設計
+### 信息架構
+- 清晰的導航欄 / 面包屑
+- 資訊分組、層次明確
+- 重點優先呈現
+
+### 可視化設計
+- 簡潔樣式，避免多餘裝飾
+- 統一的元件樣式（按鈕、卡片）
+- 高對比可讀性強的配色
+
+### 互動設計
+- 操作直觀、符合使用者心智模型
+- 即時視覺反饋
+- 有效錯誤預防機制與提示
+
+## 💡 實作細節
+- 使用 Bootstrap / Tailwind CSS 進行響應式設計
+- 對表單進行即時驗證
+- 支援搜尋、分頁、排序
diff --git a/.cursor/mcp.json b/.cursor/mcp.json
new file mode 100644
index 0000000..782fa2f
--- /dev/null
+++ b/.cursor/mcp.json
@@ -0,0 +1,21 @@
+{
+    "mcpServers": {
+        "task-master-ai": {
+            "command": "npx",
+            "args": [
+                "-y",
+                "task-master-mcp"
+            ],
+            "env": {
+                "ANTHROPIC_API_KEY": "YOUR_ANTHROPIC_API_KEY",
+                "PERPLEXITY_API_KEY": "YOUR_PERPLEXITY_API_KEY",
+                "MODEL": "claude-3-7-sonnet-20250219",
+                "PERPLEXITY_MODEL": "sonar-pro",
+                "MAX_TOKENS": "64000",
+                "TEMPERATURE": "0.2",
+                "DEFAULT_SUBTASKS": "5",
+                "DEFAULT_PRIORITY": "medium"
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/.cursor/roadmap.md b/.cursor/roadmap.md
new file mode 100644
index 0000000..8e736db
--- /dev/null
+++ b/.cursor/roadmap.md
@@ -0,0 +1,23 @@
+# 🚀 專案發展路線圖
+
+## 📅 階段一：基礎功能實現
+- [x] Discord OAuth2 登入整合
+- [x] 機器人新增、刪除、編輯
+- [x] 伺服器管理與監控
+- [x] 指令 CRUD
+- [x] 運行日誌展示
+- [ ] 設定檔管理介面
+
+## 🧠 階段二：進階功能建構
+- [ ] 插件系統模組化設計
+- [ ] 分離式 API 管理介面
+- [ ] 統計報表與追蹤分析
+- [ ] 通知系統（狀態更新、錯誤提示）
+- [ ] 多使用者共管支援
+
+## 🔧 階段三：優化與擴充
+- [ ] 效能調校
+- [ ] 安全機制強化（JWT / 憑證更新）
+- [ ] 文件完善（API Doc / User Guide）
+- [ ] 社群工具整合
+- [ ] Docker / CI/CD 整合發佈
diff --git a/.cursor/rules/cursor_rules.mdc b/.cursor/rules/cursor_rules.mdc
new file mode 100644
index 0000000..7dfae3d
--- /dev/null
+++ b/.cursor/rules/cursor_rules.mdc
@@ -0,0 +1,53 @@
+---
+description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
+globs: .cursor/rules/*.mdc
+alwaysApply: true
+---
+
+- **Required Rule Structure:**
+  ```markdown
+  ---
+  description: Clear, one-line description of what the rule enforces
+  globs: path/to/files/*.ext, other/path/**/*
+  alwaysApply: boolean
+  ---
+
+  - **Main Points in Bold**
+    - Sub-points with details
+    - Examples and explanations
+  ```
+
+- **File References:**
+  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
+  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
+  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references
+
+- **Code Examples:**
+  - Use language-specific code blocks
+  ```typescript
+  // ✅ DO: Show good examples
+  const goodExample = true;
+  
+  // ❌ DON'T: Show anti-patterns
+  const badExample = false;
+  ```
+
+- **Rule Content Guidelines:**
+  - Start with high-level overview
+  - Include specific, actionable requirements
+  - Show examples of correct implementation
+  - Reference existing code when possible
+  - Keep rules DRY by referencing other rules
+
+- **Rule Maintenance:**
+  - Update rules when new patterns emerge
+  - Add examples from actual codebase
+  - Remove outdated patterns
+  - Cross-reference related rules
+
+- **Best Practices:**
+  - Use bullet points for clarity
+  - Keep descriptions concise
+  - Include both DO and DON'T examples
+  - Reference actual code over theoretical examples
+  - Use consistent formatting across rules 
\ No newline at end of file
diff --git a/.cursor/rules/custom.mdc b/.cursor/rules/custom.mdc
new file mode 100644
index 0000000..d5e5d04
--- /dev/null
+++ b/.cursor/rules/custom.mdc
@@ -0,0 +1,67 @@
+---
+description: 
+globs: 
+alwaysApply: true
+---
+Please write the Python code assuming it will run inside a Conda environment. Include commands to create, activate, and install the required packages. If any packages must be installed via pip, clearly separate them and provide an environment.yml file as a reference.
+
+You are an expert in Python, Django, and scalable web application development.
+
+Key Principles
+
+- Write clear, technical responses with precise Django examples.
+- Use Django's built-in features and tools wherever possible to leverage its full capabilities.
+- Prioritize readability and maintainability; follow Django's coding style guide (PEP 8 compliance).
+- Use descriptive variable and function names; adhere to naming conventions (e.g., lowercase with underscores for functions and variables).
+- Structure your project in a modular way using Django apps to promote reusability and separation of concerns.
+
+Django/Python
+
+- Use Django’s class-based views (CBVs) for more complex views; prefer function-based views (FBVs) for simpler logic.
+- Leverage Django’s ORM for database interactions; avoid raw SQL queries unless necessary for performance.
+- Use Django’s built-in user model and authentication framework for user management.
+- Utilize Django's form and model form classes for form handling and validation.
+- Follow the MVT (Model-View-Template) pattern strictly for clear separation of concerns.
+- Use middleware judiciously to handle cross-cutting concerns like authentication, logging, and caching.
+
+Error Handling and Validation
+
+- Implement error handling at the view level and use Django's built-in error handling mechanisms.
+- Use Django's validation framework to validate form and model data.
+- Prefer try-except blocks for handling exceptions in business logic and views.
+- Customize error pages (e.g., 404, 500) to improve user experience and provide helpful information.
+- Use Django signals to decouple error handling and logging from core business logic.
+
+Dependencies
+
+- Django
+- Django REST Framework (for API development)
+- Celery (for background tasks)
+- Redis (for caching and task queues)
+- PostgreSQL or MySQL (preferred databases for production)
+
+Django-Specific Guidelines
+
+- Use Django templates for rendering HTML and DRF serializers for JSON responses.
+- Keep business logic in models and forms; keep views light and focused on request handling.
+- Use Django's URL dispatcher (urls.py) to define clear and RESTful URL patterns.
+- Apply Django's security best practices (e.g., CSRF protection, SQL injection protection, XSS prevention).
+- Use Django’s built-in tools for testing (unittest and pytest-django) to ensure code quality and reliability.
+- Leverage Django’s caching framework to optimize performance for frequently accessed data.
+- Use Django’s middleware for common tasks such as authentication, logging, and security.
+
+Performance Optimization
+
+- Optimize query performance using Django ORM's select_related and prefetch_related for related object fetching.
+- Use Django’s cache framework with backend support (e.g., Redis or Memcached) to reduce database load.
+- Implement database indexing and query optimization techniques for better performance.
+- Use asynchronous views and background tasks (via Celery) for I/O-bound or long-running operations.
+- Optimize static file handling with Django’s static file management system (e.g., WhiteNoise or CDN integration).
+
+Key Conventions
+
+1. Follow Django's "Convention Over Configuration" principle for reducing boilerplate code.
+2. Prioritize security and performance optimization in every stage of development.
+3. Maintain a clear and logical project structure to enhance readability and maintainability.
+
+Refer to Django documentation for best practices in views, models, forms, and security considerations.
\ No newline at end of file
diff --git a/.cursor/rules/dev_workflow.mdc b/.cursor/rules/dev_workflow.mdc
new file mode 100644
index 0000000..42ea0eb
--- /dev/null
+++ b/.cursor/rules/dev_workflow.mdc
@@ -0,0 +1,215 @@
+---
+description: Guide for using Task Master to manage task-driven development workflows
+globs: **/*
+alwaysApply: true
+---
+
+# Task Master Development Workflow
+
+This guide outlines the typical process for using Task Master to manage software development projects.
+
+## Primary Interaction: MCP Server vs. CLI
+
+Task Master offers two primary ways to interact:
+
+1.  **MCP Server (Recommended for Integrated Tools)**:
+    - For AI agents and integrated development environments (like Cursor), interacting via the **MCP server is the preferred method**.
+    - The MCP server exposes Task Master functionality through a set of tools (e.g., `get_tasks`, `add_subtask`).
+    - This method offers better performance, structured data exchange, and richer error handling compared to CLI parsing.
+    - Refer to [`mcp.mdc`](mdc:.cursor/rules/mcp.mdc) for details on the MCP architecture and available tools.
+    - A comprehensive list and description of MCP tools and their corresponding CLI commands can be found in [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc).
+    - **Restart the MCP server** if core logic in `scripts/modules` or MCP tool/direct function definitions change.
+
+2.  **`task-master` CLI (For Users & Fallback)**:
+    - The global `task-master` command provides a user-friendly interface for direct terminal interaction.
+    - It can also serve as a fallback if the MCP server is inaccessible or a specific function isn't exposed via MCP.
+    - Install globally with `npm install -g task-master-ai` or use locally via `npx task-master-ai ...`.
+    - The CLI commands often mirror the MCP tools (e.g., `task-master list` corresponds to `get_tasks`).
+    - Refer to [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc) for a detailed command reference.
+
+## Standard Development Workflow Process
+
+-   Start new projects by running `init` tool / `task-master init` or `parse_prd` / `task-master parse-prd --input='<prd-file.txt>'` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to generate initial tasks.json
+-   Begin coding sessions with `get_tasks` / `task-master list` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to see current tasks, status, and IDs
+-   Determine the next task to work on using `next_task` / `task-master next` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
+-   Analyze task complexity with `analyze_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) before breaking down tasks
+-   Review complexity report using `complexity_report` / `task-master complexity-report` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
+-   Select tasks based on dependencies (all marked 'done'), priority level, and ID order
+-   Clarify tasks by checking task files in tasks/ directory or asking for user input
+-   View specific task details using `get_task` / `task-master show <id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to understand implementation requirements
+-   Break down complex tasks using `expand_task` / `task-master expand --id=<id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) with appropriate flags
+-   Clear existing subtasks if needed using `clear_subtasks` / `task-master clear-subtasks --id=<id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) before regenerating
+-   Implement code following task details, dependencies, and project standards
+-   Verify tasks according to test strategies before marking as complete (See [`tests.mdc`](mdc:.cursor/rules/tests.mdc))
+-   Mark completed tasks with `set_task_status` / `task-master set-status --id=<id> --status=done` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc))
+-   Update dependent tasks when implementation differs from original plan using `update` / `task-master update --from=<id> --prompt="..."` or `update_task` / `task-master update-task --id=<id> --prompt="..."` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc))
+-   Add new tasks discovered during implementation using `add_task` / `task-master add-task --prompt="..."` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
+-   Add new subtasks as needed using `add_subtask` / `task-master add-subtask --parent=<id> --title="..."` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
+-   Append notes or details to subtasks using `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='Add implementation notes here...\nMore details...'` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
+-   Generate task files with `generate` / `task-master generate` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) after updating tasks.json
+-   Maintain valid dependency structure with `add_dependency`/`remove_dependency` tools or `task-master add-dependency`/`remove-dependency` commands, `validate_dependencies` / `task-master validate-dependencies`, and `fix_dependencies` / `task-master fix-dependencies` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) when needed
+-   Respect dependency chains and task priorities when selecting work
+-   Report progress regularly using `get_tasks` / `task-master list`
+
+## Task Complexity Analysis
+
+-   Run `analyze_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) for comprehensive analysis
+-   Review complexity report via `complexity_report` / `task-master complexity-report` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) for a formatted, readable version.
+-   Focus on tasks with highest complexity scores (8-10) for detailed breakdown
+-   Use analysis results to determine appropriate subtask allocation
+-   Note that reports are automatically used by the `expand` tool/command
+
+## Task Breakdown Process
+
+-   For tasks with complexity analysis, use `expand_task` / `task-master expand --id=<id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc))
+-   Otherwise use `expand_task` / `task-master expand --id=<id> --num=<number>`
+-   Add `--research` flag to leverage Perplexity AI for research-backed expansion
+-   Use `--prompt="<context>"` to provide additional context when needed
+-   Review and adjust generated subtasks as necessary
+-   Use `--all` flag with `expand` or `expand_all` to expand multiple pending tasks at once
+-   If subtasks need regeneration, clear them first with `clear_subtasks` / `task-master clear-subtasks` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
+
+## Implementation Drift Handling
+
+-   When implementation differs significantly from planned approach
+-   When future tasks need modification due to current implementation choices
+-   When new dependencies or requirements emerge
+-   Use `update` / `task-master update --from=<futureTaskId> --prompt='<explanation>\nUpdate context...'` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to update multiple future tasks.
+-   Use `update_task` / `task-master update-task --id=<taskId> --prompt='<explanation>\nUpdate context...'` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to update a single specific task.
+
+## Task Status Management
+
+-   Use 'pending' for tasks ready to be worked on
+-   Use 'done' for completed and verified tasks
+-   Use 'deferred' for postponed tasks
+-   Add custom status values as needed for project-specific workflows
+
+## Task Structure Fields
+
+- **id**: Unique identifier for the task (Example: `1`, `1.1`)
+- **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
+- **description**: Concise summary of what the task involves (Example: `"Create a new repository, set up initial structure."`)
+- **status**: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
+- **dependencies**: IDs of prerequisite tasks (Example: `[1, 2.1]`)
+    - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
+    - This helps quickly identify which prerequisite tasks are blocking work
+- **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
+- **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`) 
+- **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`) 
+- **subtasks**: List of smaller, more specific tasks (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`) 
+- Refer to [`tasks.mdc`](mdc:.cursor/rules/tasks.mdc) for more details on the task data structure.
+
+## Environment Variables Configuration
+
+- Task Master behavior is configured via environment variables:
+  - **ANTHROPIC_API_KEY** (Required): Your Anthropic API key for Claude.
+  - **MODEL**: Claude model to use (e.g., `claude-3-opus-20240229`).
+  - **MAX_TOKENS**: Maximum tokens for AI responses.
+  - **TEMPERATURE**: Temperature for AI model responses.
+  - **DEBUG**: Enable debug logging (`true`/`false`).
+  - **LOG_LEVEL**: Console output level (`debug`, `info`, `warn`, `error`).
+  - **DEFAULT_SUBTASKS**: Default number of subtasks for `expand`.
+  - **DEFAULT_PRIORITY**: Default priority for new tasks.
+  - **PROJECT_NAME**: Project name used in metadata.
+  - **PROJECT_VERSION**: Project version used in metadata.
+  - **PERPLEXITY_API_KEY**: API key for Perplexity AI (for `--research` flags).
+  - **PERPLEXITY_MODEL**: Perplexity model to use (e.g., `sonar-medium-online`).
+- See [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc) for default values and examples.
+
+## Determining the Next Task
+
+- Run `next_task` / `task-master next` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to show the next task to work on
+- The command identifies tasks with all dependencies satisfied
+- Tasks are prioritized by priority level, dependency count, and ID
+- The command shows comprehensive task information including:
+    - Basic task details and description
+    - Implementation details
+    - Subtasks (if they exist)
+    - Contextual suggested actions
+- Recommended before starting any new development work
+- Respects your project's dependency structure
+- Ensures tasks are completed in the appropriate sequence
+- Provides ready-to-use commands for common task actions
+
+## Viewing Specific Task Details
+
+- Run `get_task` / `task-master show <id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to view a specific task
+- Use dot notation for subtasks: `task-master show 1.2` (shows subtask 2 of task 1)
+- Displays comprehensive information similar to the next command, but for a specific task
+- For parent tasks, shows all subtasks and their current status
+- For subtasks, shows parent task information and relationship
+- Provides contextual suggested actions appropriate for the specific task
+- Useful for examining task details before implementation or checking status
+
+## Managing Task Dependencies
+
+- Use `add_dependency` / `task-master add-dependency --id=<id> --depends-on=<id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to add a dependency
+- Use `remove_dependency` / `task-master remove-dependency --id=<id> --depends-on=<id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to remove a dependency
+- The system prevents circular dependencies and duplicate dependency entries
+- Dependencies are checked for existence before being added or removed
+- Task files are automatically regenerated after dependency changes
+- Dependencies are visualized with status indicators in task listings and files
+
+## Iterative Subtask Implementation
+
+Once a task has been broken down into subtasks using `expand_task` or similar methods, follow this iterative process for implementation:
+
+1.  **Understand the Goal (Preparation):**
+    *   Use `get_task` / `task-master show <subtaskId>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to thoroughly understand the specific goals and requirements of the subtask.
+
+2.  **Initial Exploration & Planning (Iteration 1):**
+    *   This is the first attempt at creating a concrete implementation plan.
+    *   Explore the codebase to identify the precise files, functions, and even specific lines of code that will need modification.
+    *   Determine the intended code changes (diffs) and their locations.
+    *   Gather *all* relevant details from this exploration phase.
+
+3.  **Log the Plan:**
+    *   Run `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<detailed plan>'` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
+    *   Provide the *complete and detailed* findings from the exploration phase in the prompt. Include file paths, line numbers, proposed diffs, reasoning, and any potential challenges identified. Do not omit details. The goal is to create a rich, timestamped log within the subtask's `details`.
+
+4.  **Verify the Plan:**
+    *   Run `get_task` / `task-master show <subtaskId>` again to confirm that the detailed implementation plan has been successfully appended to the subtask's details.
+
+5.  **Begin Implementation:**
+    *   Set the subtask status using `set_task_status` / `task-master set-status --id=<subtaskId> --status=in-progress` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
+    *   Start coding based on the logged plan.
+
+6.  **Refine and Log Progress (Iteration 2+):**
+    *   As implementation progresses, you will encounter challenges, discover nuances, or confirm successful approaches.
+    *   **Before appending new information**: Briefly review the *existing* details logged in the subtask (using `get_task` or recalling from context) to ensure the update adds fresh insights and avoids redundancy.
+    *   **Regularly** use `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<update details>\n- What worked...\n- What didn't work...'` to append new findings.
+    *   **Crucially, log:**
+        *   What worked ("fundamental truths" discovered).
+        *   What didn't work and why (to avoid repeating mistakes).
+        *   Specific code snippets or configurations that were successful.
+        *   Decisions made, especially if confirmed with user input.
+        *   Any deviations from the initial plan and the reasoning.
+    *   The objective is to continuously enrich the subtask's details, creating a log of the implementation journey that helps the AI (and human developers) learn, adapt, and avoid repeating errors.
+
+7.  **Review & Update Rules (Post-Implementation):**
+    *   Once the implementation for the subtask is functionally complete, review all code changes and the relevant chat history.
+    *   Identify any new or modified code patterns, conventions, or best practices established during the implementation.
+    *   Create new or update existing Cursor rules in the `.cursor/rules/` directory to capture these patterns, following the guidelines in [`cursor_rules.mdc`](mdc:.cursor/rules/cursor_rules.mdc) and [`self_improve.mdc`](mdc:.cursor/rules/self_improve.mdc).
+
+8.  **Mark Task Complete:**
+    *   After verifying the implementation and updating any necessary rules, mark the subtask as completed: `set_task_status` / `task-master set-status --id=<subtaskId> --status=done`.
+
+9.  **Commit Changes (If using Git):**
+    *   Stage the relevant code changes and any updated/new rule files (`git add .`).
+    *   Craft a comprehensive Git commit message summarizing the work done for the subtask, including both code implementation and any rule adjustments.
+    *   Execute the commit command directly in the terminal (e.g., `git commit -m 'feat(module): Implement feature X for subtask <subtaskId>\n\n- Details about changes...\n- Updated rule Y for pattern Z'`).
+    *   Consider if a Changeset is needed according to [`changeset.mdc`](mdc:.cursor/rules/changeset.mdc). If so, run `npm run changeset`, stage the generated file, and amend the commit or create a new one.
+
+10. **Proceed to Next Subtask:**
+    *   Identify the next subtask in the dependency chain (e.g., using `next_task` / `task-master next`) and repeat this iterative process starting from step 1.
+
+## Code Analysis & Refactoring Techniques
+
+- **Top-Level Function Search**:
+    - Useful for understanding module structure or planning refactors.
+    - Use grep/ripgrep to find exported functions/constants:
+      `rg "export (async function|function|const) \w+"` or similar patterns.
+    - Can help compare functions between files during migrations or identify potential naming conflicts.
+
+---
+*This workflow provides a general guideline. Adapt it based on your specific project needs and team practices.*
\ No newline at end of file
diff --git a/.cursor/rules/self_improve.mdc b/.cursor/rules/self_improve.mdc
new file mode 100644
index 0000000..a7ea8f2
--- /dev/null
+++ b/.cursor/rules/self_improve.mdc
@@ -0,0 +1,73 @@
+---
+description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
+globs: **/*
+alwaysApply: true
+---
+
+- **Rule Improvement Triggers:**
+  - New code patterns not covered by existing rules
+  - Repeated similar implementations across files
+  - Common error patterns that could be prevented
+  - New libraries or tools being used consistently
+  - Emerging best practices in the codebase
+
+- **Analysis Process:**
+  - Compare new code with existing rules
+  - Identify patterns that should be standardized
+  - Look for references to external documentation
+  - Check for consistent error handling patterns
+  - Monitor test patterns and coverage
+
+- **Rule Updates:**
+  - **Add New Rules When:**
+    - A new technology/pattern is used in 3+ files
+    - Common bugs could be prevented by a rule
+    - Code reviews repeatedly mention the same feedback
+    - New security or performance patterns emerge
+
+  - **Modify Existing Rules When:**
+    - Better examples exist in the codebase
+    - Additional edge cases are discovered
+    - Related rules have been updated
+    - Implementation details have changed
+
+- **Example Pattern Recognition:**
+  ```typescript
+  // If you see repeated patterns like:
+  const data = await prisma.user.findMany({
+    select: { id: true, email: true },
+    where: { status: 'ACTIVE' }
+  });
+  
+  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
+  // - Standard select fields
+  // - Common where conditions
+  // - Performance optimization patterns
+  ```
+
+- **Rule Quality Checks:**
+  - Rules should be actionable and specific
+  - Examples should come from actual code
+  - References should be up to date
+  - Patterns should be consistently enforced
+
+- **Continuous Improvement:**
+  - Monitor code review comments
+  - Track common development questions
+  - Update rules after major refactors
+  - Add links to relevant documentation
+  - Cross-reference related rules
+
+- **Rule Deprecation:**
+  - Mark outdated patterns as deprecated
+  - Remove rules that no longer apply
+  - Update references to deprecated rules
+  - Document migration paths for old patterns
+
+- **Documentation Updates:**
+  - Keep examples synchronized with code
+  - Update references to external docs
+  - Maintain links between related rules
+  - Document breaking changes
+
+Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.
\ No newline at end of file
diff --git a/.cursor/rules/taskmaster.mdc b/.cursor/rules/taskmaster.mdc
new file mode 100644
index 0000000..e7c322b
--- /dev/null
+++ b/.cursor/rules/taskmaster.mdc
@@ -0,0 +1,353 @@
+---
+description: Comprehensive reference for Taskmaster MCP tools and CLI commands.
+globs: **/*
+alwaysApply: true
+---
+
+# Taskmaster Tool & Command Reference
+
+This document provides a detailed reference for interacting with Taskmaster, covering both the recommended MCP tools (for integrations like Cursor) and the corresponding `task-master` CLI commands (for direct user interaction or fallback).
+
+**Note:** For interacting with Taskmaster programmatically or via integrated tools, using the **MCP tools is strongly recommended** due to better performance, structured data, and error handling. The CLI commands serve as a user-friendly alternative and fallback. See [`mcp.mdc`](mdc:.cursor/rules/mcp.mdc) for MCP implementation details and [`commands.mdc`](mdc:.cursor/rules/commands.mdc) for CLI implementation guidelines.
+
+**Important:** Several MCP tools involve AI processing and are long-running operations that may take up to a minute to complete. When using these tools, always inform users that the operation is in progress and to wait patiently for results. The AI-powered tools include: `parse_prd`, `analyze_project_complexity`, `update_subtask`, `update_task`, `update`, `expand_all`, `expand_task`, and `add_task`.
+
+---
+
+## Initialization & Setup
+
+### 1. Initialize Project (`init`)
+
+*   **MCP Tool:** `initialize_project`
+*   **CLI Command:** `task-master init [options]`
+*   **Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project.`
+*   **Key CLI Options:**
+    *   `--name <name>`: `Set the name for your project in Taskmaster's configuration.`
+    *   `--description <text>`: `Provide a brief description for your project.`
+    *   `--version <version>`: `Set the initial version for your project (e.g., '0.1.0').`
+    *   `-y, --yes`: `Initialize Taskmaster quickly using default settings without interactive prompts.`
+*   **Usage:** Run this once at the beginning of a new project.
+*   **MCP Variant Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project by running the 'task-master init' command.`
+*   **Key MCP Parameters/Options:**
+    *   `projectName`: `Set the name for your project.` (CLI: `--name <name>`)
+    *   `projectDescription`: `Provide a brief description for your project.` (CLI: `--description <text>`)
+    *   `projectVersion`: `Set the initial version for your project (e.g., '0.1.0').` (CLI: `--version <version>`)
+    *   `authorName`: `Author name.` (CLI: `--author <author>`)
+    *   `skipInstall`: `Skip installing dependencies (default: false).` (CLI: `--skip-install`)
+    *   `addAliases`: `Add shell aliases (tm, taskmaster) (default: false).` (CLI: `--aliases`)
+    *   `yes`: `Skip prompts and use defaults/provided arguments (default: false).` (CLI: `-y, --yes`)
+*   **Usage:** Run this once at the beginning of a new project, typically via an integrated tool like Cursor. Operates on the current working directory of the MCP server. 
+*   **Important:** Once complete, you *MUST* parse a prd in order to generate tasks. There will be no tasks files until then. The next step after initializing should be to create a PRD using the example PRD in scripts/example_prd.txt. 
+
+### 2. Parse PRD (`parse_prd`)
+
+*   **MCP Tool:** `parse_prd`
+*   **CLI Command:** `task-master parse-prd [file] [options]`
+*   **Description:** `Parse a Product Requirements Document (PRD) or text file with Taskmaster to automatically generate an initial set of tasks in tasks.json.`
+*   **Key Parameters/Options:**
+    *   `input`: `Path to your PRD or requirements text file that Taskmaster should parse for tasks.` (CLI: `[file]` positional or `-i, --input <file>`)
+    *   `output`: `Specify where Taskmaster should save the generated 'tasks.json' file (default: 'tasks/tasks.json').` (CLI: `-o, --output <file>`)
+    *   `numTasks`: `Approximate number of top-level tasks Taskmaster should aim to generate from the document.` (CLI: `-n, --num-tasks <number>`)
+    *   `force`: `Use this to allow Taskmaster to overwrite an existing 'tasks.json' without asking for confirmation.` (CLI: `-f, --force`)
+*   **Usage:** Useful for bootstrapping a project from an existing requirements document.
+*   **Notes:** Task Master will strictly adhere to any specific requirements mentioned in the PRD (libraries, database schemas, frameworks, tech stacks, etc.) while filling in any gaps where the PRD isn't fully specified. Tasks are designed to provide the most direct implementation path while avoiding over-engineering.
+*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress. If the user does not have a PRD, suggest discussing their idea and then use the example PRD in scripts/example_prd.txt as a template for creating the PRD based on their idea, for use with parse-prd.
+
+---
+
+## Task Listing & Viewing
+
+### 3. Get Tasks (`get_tasks`)
+
+*   **MCP Tool:** `get_tasks`
+*   **CLI Command:** `task-master list [options]`
+*   **Description:** `List your Taskmaster tasks, optionally filtering by status and showing subtasks.`
+*   **Key Parameters/Options:**
+    *   `status`: `Show only Taskmaster tasks matching this status (e.g., 'pending', 'done').` (CLI: `-s, --status <status>`)
+    *   `withSubtasks`: `Include subtasks indented under their parent tasks in the list.` (CLI: `--with-subtasks`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Get an overview of the project status, often used at the start of a work session.
+
+### 4. Get Next Task (`next_task`)
+
+*   **MCP Tool:** `next_task`
+*   **CLI Command:** `task-master next [options]`
+*   **Description:** `Ask Taskmaster to show the next available task you can work on, based on status and completed dependencies.`
+*   **Key Parameters/Options:**
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Identify what to work on next according to the plan.
+
+### 5. Get Task Details (`get_task`)
+
+*   **MCP Tool:** `get_task`
+*   **CLI Command:** `task-master show [id] [options]`
+*   **Description:** `Display detailed information for a specific Taskmaster task or subtask by its ID.`
+*   **Key Parameters/Options:**
+    *   `id`: `Required. The ID of the Taskmaster task (e.g., '15') or subtask (e.g., '15.2') you want to view.` (CLI: `[id]` positional or `-i, --id <id>`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Understand the full details, implementation notes, and test strategy for a specific task before starting work.
+
+---
+
+## Task Creation & Modification
+
+### 6. Add Task (`add_task`)
+
+*   **MCP Tool:** `add_task`
+*   **CLI Command:** `task-master add-task [options]`
+*   **Description:** `Add a new task to Taskmaster by describing it; AI will structure it.`
+*   **Key Parameters/Options:**
+    *   `prompt`: `Required. Describe the new task you want Taskmaster to create (e.g., "Implement user authentication using JWT").` (CLI: `-p, --prompt <text>`)
+    *   `dependencies`: `Specify the IDs of any Taskmaster tasks that must be completed before this new one can start (e.g., '12,14').` (CLI: `-d, --dependencies <ids>`)
+    *   `priority`: `Set the priority for the new task ('high', 'medium', 'low'; default: 'medium').` (CLI: `--priority <priority>`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Quickly add newly identified tasks during development.
+*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.
+
+### 7. Add Subtask (`add_subtask`)
+
+*   **MCP Tool:** `add_subtask`
+*   **CLI Command:** `task-master add-subtask [options]`
+*   **Description:** `Add a new subtask to a Taskmaster parent task, or convert an existing task into a subtask.`
+*   **Key Parameters/Options:**
+    *   `id` / `parent`: `Required. The ID of the Taskmaster task that will be the parent.` (MCP: `id`, CLI: `-p, --parent <id>`)
+    *   `taskId`: `Use this if you want to convert an existing top-level Taskmaster task into a subtask of the specified parent.` (CLI: `-i, --task-id <id>`)
+    *   `title`: `Required (if not using taskId). The title for the new subtask Taskmaster should create.` (CLI: `-t, --title <title>`)
+    *   `description`: `A brief description for the new subtask.` (CLI: `-d, --description <text>`)
+    *   `details`: `Provide implementation notes or details for the new subtask.` (CLI: `--details <text>`)
+    *   `dependencies`: `Specify IDs of other tasks or subtasks (e.g., '15', '16.1') that must be done before this new subtask.` (CLI: `--dependencies <ids>`)
+    *   `status`: `Set the initial status for the new subtask (default: 'pending').` (CLI: `-s, --status <status>`)
+    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after adding the subtask.` (CLI: `--skip-generate`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Break down tasks manually or reorganize existing tasks.
+
+### 8. Update Tasks (`update`)
+
+*   **MCP Tool:** `update`
+*   **CLI Command:** `task-master update [options]`
+*   **Description:** `Update multiple upcoming tasks in Taskmaster based on new context or changes, starting from a specific task ID.`
+*   **Key Parameters/Options:**
+    *   `from`: `Required. The ID of the first task Taskmaster should update. All tasks with this ID or higher (and not 'done') will be considered.` (CLI: `--from <id>`)
+    *   `prompt`: `Required. Explain the change or new context for Taskmaster to apply to the tasks (e.g., "We are now using React Query instead of Redux Toolkit for data fetching").` (CLI: `-p, --prompt <text>`)
+    *   `research`: `Enable Taskmaster to use Perplexity AI for more informed updates based on external knowledge (requires PERPLEXITY_API_KEY).` (CLI: `-r, --research`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Handle significant implementation changes or pivots that affect multiple future tasks. Example CLI: `task-master update --from='18' --prompt='Switching to React Query.\nNeed to refactor data fetching...'`
+*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.
+
+### 9. Update Task (`update_task`)
+
+*   **MCP Tool:** `update_task`
+*   **CLI Command:** `task-master update-task [options]`
+*   **Description:** `Modify a specific Taskmaster task (or subtask) by its ID, incorporating new information or changes.`
+*   **Key Parameters/Options:**
+    *   `id`: `Required. The specific ID of the Taskmaster task (e.g., '15') or subtask (e.g., '15.2') you want to update.` (CLI: `-i, --id <id>`)
+    *   `prompt`: `Required. Explain the specific changes or provide the new information Taskmaster should incorporate into this task.` (CLI: `-p, --prompt <text>`)
+    *   `research`: `Enable Taskmaster to use Perplexity AI for more informed updates (requires PERPLEXITY_API_KEY).` (CLI: `-r, --research`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Refine a specific task based on new understanding or feedback. Example CLI: `task-master update-task --id='15' --prompt='Clarification: Use PostgreSQL instead of MySQL.\nUpdate schema details...'`
+*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.
+
+### 10. Update Subtask (`update_subtask`)
+
+*   **MCP Tool:** `update_subtask`
+*   **CLI Command:** `task-master update-subtask [options]`
+*   **Description:** `Append timestamped notes or details to a specific Taskmaster subtask without overwriting existing content. Intended for iterative implementation logging.`
+*   **Key Parameters/Options:**
+    *   `id`: `Required. The specific ID of the Taskmaster subtask (e.g., '15.2') you want to add information to.` (CLI: `-i, --id <id>`)
+    *   `prompt`: `Required. Provide the information or notes Taskmaster should append to the subtask's details. Ensure this adds *new* information not already present.` (CLI: `-p, --prompt <text>`)
+    *   `research`: `Enable Taskmaster to use Perplexity AI for more informed updates (requires PERPLEXITY_API_KEY).` (CLI: `-r, --research`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Add implementation notes, code snippets, or clarifications to a subtask during development. Before calling, review the subtask's current details to append only fresh insights, helping to build a detailed log of the implementation journey and avoid redundancy. Example CLI: `task-master update-subtask --id='15.2' --prompt='Discovered that the API requires header X.\nImplementation needs adjustment...'`
+*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.
+
+### 11. Set Task Status (`set_task_status`)
+
+*   **MCP Tool:** `set_task_status`
+*   **CLI Command:** `task-master set-status [options]`
+*   **Description:** `Update the status of one or more Taskmaster tasks or subtasks (e.g., 'pending', 'in-progress', 'done').`
+*   **Key Parameters/Options:**
+    *   `id`: `Required. The ID(s) of the Taskmaster task(s) or subtask(s) (e.g., '15', '15.2', '16,17.1') to update.` (CLI: `-i, --id <id>`)
+    *   `status`: `Required. The new status to set (e.g., 'done', 'pending', 'in-progress', 'review', 'cancelled').` (CLI: `-s, --status <status>`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Mark progress as tasks move through the development cycle.
+
+### 12. Remove Task (`remove_task`)
+
+*   **MCP Tool:** `remove_task`
+*   **CLI Command:** `task-master remove-task [options]`
+*   **Description:** `Permanently remove a task or subtask from the Taskmaster tasks list.`
+*   **Key Parameters/Options:**
+    *   `id`: `Required. The ID of the Taskmaster task (e.g., '5') or subtask (e.g., '5.2') to permanently remove.` (CLI: `-i, --id <id>`)
+    *   `yes`: `Skip the confirmation prompt and immediately delete the task.` (CLI: `-y, --yes`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Permanently delete tasks or subtasks that are no longer needed in the project.
+*   **Notes:** Use with caution as this operation cannot be undone. Consider using 'blocked', 'cancelled', or 'deferred' status instead if you just want to exclude a task from active planning but keep it for reference. The command automatically cleans up dependency references in other tasks.
+
+---
+
+## Task Structure & Breakdown
+
+### 13. Expand Task (`expand_task`)
+
+*   **MCP Tool:** `expand_task`
+*   **CLI Command:** `task-master expand [options]`
+*   **Description:** `Use Taskmaster's AI to break down a complex task (or all tasks) into smaller, manageable subtasks.`
+*   **Key Parameters/Options:**
+    *   `id`: `The ID of the specific Taskmaster task you want to break down into subtasks.` (CLI: `-i, --id <id>`)
+    *   `num`: `Suggests how many subtasks Taskmaster should aim to create (uses complexity analysis by default).` (CLI: `-n, --num <number>`)
+    *   `research`: `Enable Taskmaster to use Perplexity AI for more informed subtask generation (requires PERPLEXITY_API_KEY).` (CLI: `-r, --research`)
+    *   `prompt`: `Provide extra context or specific instructions to Taskmaster for generating the subtasks.` (CLI: `-p, --prompt <text>`)
+    *   `force`: `Use this to make Taskmaster replace existing subtasks with newly generated ones.` (CLI: `--force`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Generate a detailed implementation plan for a complex task before starting coding.
+*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.
+
+### 14. Expand All Tasks (`expand_all`)
+
+*   **MCP Tool:** `expand_all`
+*   **CLI Command:** `task-master expand --all [options]` (Note: CLI uses the `expand` command with the `--all` flag)
+*   **Description:** `Tell Taskmaster to automatically expand all 'pending' tasks based on complexity analysis.`
+*   **Key Parameters/Options:**
+    *   `num`: `Suggests how many subtasks Taskmaster should aim to create per task.` (CLI: `-n, --num <number>`)
+    *   `research`: `Enable Perplexity AI for more informed subtask generation (requires PERPLEXITY_API_KEY).` (CLI: `-r, --research`)
+    *   `prompt`: `Provide extra context for Taskmaster to apply generally during expansion.` (CLI: `-p, --prompt <text>`)
+    *   `force`: `Make Taskmaster replace existing subtasks.` (CLI: `--force`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Useful after initial task generation or complexity analysis to break down multiple tasks at once.
+*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.
+
+### 15. Clear Subtasks (`clear_subtasks`)
+
+*   **MCP Tool:** `clear_subtasks`
+*   **CLI Command:** `task-master clear-subtasks [options]`
+*   **Description:** `Remove all subtasks from one or more specified Taskmaster parent tasks.`
+*   **Key Parameters/Options:**
+    *   `id`: `The ID(s) of the Taskmaster parent task(s) whose subtasks you want to remove (e.g., '15', '16,18').` (Required unless using `all`) (CLI: `-i, --id <ids>`)
+    *   `all`: `Tell Taskmaster to remove subtasks from all parent tasks.` (CLI: `--all`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Used before regenerating subtasks with `expand_task` if the previous breakdown needs replacement.
+
+### 16. Remove Subtask (`remove_subtask`)
+
+*   **MCP Tool:** `remove_subtask`
+*   **CLI Command:** `task-master remove-subtask [options]`
+*   **Description:** `Remove a subtask from its Taskmaster parent, optionally converting it into a standalone task.`
+*   **Key Parameters/Options:**
+    *   `id`: `Required. The ID(s) of the Taskmaster subtask(s) to remove (e.g., '15.2', '16.1,16.3').` (CLI: `-i, --id <id>`)
+    *   `convert`: `If used, Taskmaster will turn the subtask into a regular top-level task instead of deleting it.` (CLI: `-c, --convert`)
+    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after removing the subtask.` (CLI: `--skip-generate`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Delete unnecessary subtasks or promote a subtask to a top-level task.
+
+---
+
+## Dependency Management
+
+### 17. Add Dependency (`add_dependency`)
+
+*   **MCP Tool:** `add_dependency`
+*   **CLI Command:** `task-master add-dependency [options]`
+*   **Description:** `Define a dependency in Taskmaster, making one task a prerequisite for another.`
+*   **Key Parameters/Options:**
+    *   `id`: `Required. The ID of the Taskmaster task that will depend on another.` (CLI: `-i, --id <id>`)
+    *   `dependsOn`: `Required. The ID of the Taskmaster task that must be completed first (the prerequisite).` (CLI: `-d, --depends-on <id>`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Establish the correct order of execution between tasks.
+
+### 18. Remove Dependency (`remove_dependency`)
+
+*   **MCP Tool:** `remove_dependency`
+*   **CLI Command:** `task-master remove-dependency [options]`
+*   **Description:** `Remove a dependency relationship between two Taskmaster tasks.`
+*   **Key Parameters/Options:**
+    *   `id`: `Required. The ID of the Taskmaster task you want to remove a prerequisite from.` (CLI: `-i, --id <id>`)
+    *   `dependsOn`: `Required. The ID of the Taskmaster task that should no longer be a prerequisite.` (CLI: `-d, --depends-on <id>`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Update task relationships when the order of execution changes.
+
+### 19. Validate Dependencies (`validate_dependencies`)
+
+*   **MCP Tool:** `validate_dependencies`
+*   **CLI Command:** `task-master validate-dependencies [options]`
+*   **Description:** `Check your Taskmaster tasks for dependency issues (like circular references or links to non-existent tasks) without making changes.`
+*   **Key Parameters/Options:**
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Audit the integrity of your task dependencies.
+
+### 20. Fix Dependencies (`fix_dependencies`)
+
+*   **MCP Tool:** `fix_dependencies`
+*   **CLI Command:** `task-master fix-dependencies [options]`
+*   **Description:** `Automatically fix dependency issues (like circular references or links to non-existent tasks) in your Taskmaster tasks.`
+*   **Key Parameters/Options:**
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Clean up dependency errors automatically.
+
+---
+
+## Analysis & Reporting
+
+### 21. Analyze Project Complexity (`analyze_project_complexity`)
+
+*   **MCP Tool:** `analyze_project_complexity`
+*   **CLI Command:** `task-master analyze-complexity [options]`
+*   **Description:** `Have Taskmaster analyze your tasks to determine their complexity and suggest which ones need to be broken down further.`
+*   **Key Parameters/Options:**
+    *   `output`: `Where to save the complexity analysis report (default: 'scripts/task-complexity-report.json').` (CLI: `-o, --output <file>`)
+    *   `threshold`: `The minimum complexity score (1-10) that should trigger a recommendation to expand a task.` (CLI: `-t, --threshold <number>`)
+    *   `research`: `Enable Perplexity AI for more accurate complexity analysis (requires PERPLEXITY_API_KEY).` (CLI: `-r, --research`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Used before breaking down tasks to identify which ones need the most attention.
+*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.
+
+### 22. View Complexity Report (`complexity_report`)
+
+*   **MCP Tool:** `complexity_report`
+*   **CLI Command:** `task-master complexity-report [options]`
+*   **Description:** `Display the task complexity analysis report in a readable format.`
+*   **Key Parameters/Options:**
+    *   `file`: `Path to the complexity report (default: 'scripts/task-complexity-report.json').` (CLI: `-f, --file <file>`)
+*   **Usage:** Review and understand the complexity analysis results after running analyze-complexity.
+
+---
+
+## File Management
+
+### 23. Generate Task Files (`generate`)
+
+*   **MCP Tool:** `generate`
+*   **CLI Command:** `task-master generate [options]`
+*   **Description:** `Create or update individual Markdown files for each task based on your tasks.json.`
+*   **Key Parameters/Options:**
+    *   `output`: `The directory where Taskmaster should save the task files (default: in a 'tasks' directory).` (CLI: `-o, --output <directory>`)
+    *   `file`: `Path to your Taskmaster 'tasks.json' file (default relies on auto-detection).` (CLI: `-f, --file <file>`)
+*   **Usage:** Run this after making changes to tasks.json to keep individual task files up to date.
+
+---
+
+## Environment Variables Configuration
+
+Taskmaster's behavior can be customized via environment variables. These affect both CLI and MCP server operation:
+
+*   **ANTHROPIC_API_KEY** (Required): Your Anthropic API key for Claude.
+*   **MODEL**: Claude model to use (default: `claude-3-opus-20240229`). 
+*   **MAX_TOKENS**: Maximum tokens for AI responses (default: 8192).
+*   **TEMPERATURE**: Temperature for AI model responses (default: 0.7).
+*   **DEBUG**: Enable debug logging (`true`/`false`, default: `false`).
+*   **LOG_LEVEL**: Console output level (`debug`, `info`, `warn`, `error`, default: `info`).
+*   **DEFAULT_SUBTASKS**: Default number of subtasks for `expand` (default: 5).
+*   **DEFAULT_PRIORITY**: Default priority for new tasks (default: `medium`).
+*   **PROJECT_NAME**: Project name used in metadata.
+*   **PROJECT_VERSION**: Project version used in metadata.
+*   **PERPLEXITY_API_KEY**: API key for Perplexity AI (for `--research` flags).
+*   **PERPLEXITY_MODEL**: Perplexity model to use (default: `sonar-medium-online`).
+
+Set these in your `.env` file in the project root or in your environment before running Taskmaster.
+
+---
+
+For implementation details:
+*   CLI commands: See [`commands.mdc`](mdc:.cursor/rules/commands.mdc)
+*   MCP server: See [`mcp.mdc`](mdc:.cursor/rules/mcp.mdc)
+*   Task structure: See [`tasks.mdc`](mdc:.cursor/rules/tasks.mdc)
+*   Workflow: See [`dev_workflow.mdc`](mdc:.cursor/rules/dev_workflow.mdc)
diff --git a/.env.example b/.env.example
index c310312..24d671f 100644
--- a/.env.example
+++ b/.env.example
@@ -8,10 +8,10 @@ DATABASE_URL=sqlite:///db.sqlite3
 # For PostgreSQL, use:
 # DATABASE_URL=postgres://user:password@localhost:5432/social_cube
 
-# Discord Bot Settings
+# Discord OAuth2 and Bot Settings
 DISCORD_CLIENT_ID=your-discord-client-id
 DISCORD_CLIENT_SECRET=your-discord-client-secret
-DISCORD_REDIRECT_URI=http://localhost:8000/auth/discord/callback
+DISCORD_REDIRECT_URI=http://localhost:8000/accounts/discord/login/callback/
 DISCORD_BOT_TOKEN=your-discord-bot-token
 BOT_TOKEN_KEY=your-fernet-encryption-key
 
diff --git a/.windsurfrules b/.windsurfrules
new file mode 100644
index 0000000..c253460
--- /dev/null
+++ b/.windsurfrules
@@ -0,0 +1,474 @@
+Below you will find a variety of important rules spanning:
+- the dev_workflow
+- the .windsurfrules document self-improvement workflow
+- the template to follow when modifying or adding new sections/rules to this document.
+
+---
+DEV_WORKFLOW
+---
+description: Guide for using meta-development script (scripts/dev.js) to manage task-driven development workflows
+globs: **/*
+filesToApplyRule: **/*
+alwaysApply: true
+---
+
+- **Global CLI Commands**
+  - Task Master now provides a global CLI through the `task-master` command
+  - All functionality from `scripts/dev.js` is available through this interface
+  - Install globally with `npm install -g claude-task-master` or use locally via `npx`
+  - Use `task-master <command>` instead of `node scripts/dev.js <command>`
+  - Examples:
+    - `task-master list` instead of `node scripts/dev.js list`
+    - `task-master next` instead of `node scripts/dev.js next`
+    - `task-master expand --id=3` instead of `node scripts/dev.js expand --id=3`
+  - All commands accept the same options as their script equivalents
+  - The CLI provides additional commands like `task-master init` for project setup
+
+- **Development Workflow Process**
+  - Start new projects by running `task-master init` or `node scripts/dev.js parse-prd --input=<prd-file.txt>` to generate initial tasks.json
+  - Begin coding sessions with `task-master list` to see current tasks, status, and IDs
+  - Analyze task complexity with `task-master analyze-complexity --research` before breaking down tasks
+  - Select tasks based on dependencies (all marked 'done'), priority level, and ID order
+  - Clarify tasks by checking task files in tasks/ directory or asking for user input
+  - View specific task details using `task-master show <id>` to understand implementation requirements
+  - Break down complex tasks using `task-master expand --id=<id>` with appropriate flags
+  - Clear existing subtasks if needed using `task-master clear-subtasks --id=<id>` before regenerating
+  - Implement code following task details, dependencies, and project standards
+  - Verify tasks according to test strategies before marking as complete
+  - Mark completed tasks with `task-master set-status --id=<id> --status=done`
+  - Update dependent tasks when implementation differs from original plan
+  - Generate task files with `task-master generate` after updating tasks.json
+  - Maintain valid dependency structure with `task-master fix-dependencies` when needed
+  - Respect dependency chains and task priorities when selecting work
+  - Report progress regularly using the list command
+
+- **Task Complexity Analysis**
+  - Run `node scripts/dev.js analyze-complexity --research` for comprehensive analysis
+  - Review complexity report in scripts/task-complexity-report.json
+  - Or use `node scripts/dev.js complexity-report` for a formatted, readable version of the report
+  - Focus on tasks with highest complexity scores (8-10) for detailed breakdown
+  - Use analysis results to determine appropriate subtask allocation
+  - Note that reports are automatically used by the expand command
+
+- **Task Breakdown Process**
+  - For tasks with complexity analysis, use `node scripts/dev.js expand --id=<id>`
+  - Otherwise use `node scripts/dev.js expand --id=<id> --subtasks=<number>`
+  - Add `--research` flag to leverage Perplexity AI for research-backed expansion
+  - Use `--prompt="<context>"` to provide additional context when needed
+  - Review and adjust generated subtasks as necessary
+  - Use `--all` flag to expand multiple pending tasks at once
+  - If subtasks need regeneration, clear them first with `clear-subtasks` command
+
+- **Implementation Drift Handling**
+  - When implementation differs significantly from planned approach
+  - When future tasks need modification due to current implementation choices
+  - When new dependencies or requirements emerge
+  - Call `node scripts/dev.js update --from=<futureTaskId> --prompt="<explanation>"` to update tasks.json
+
+- **Task Status Management**
+  - Use 'pending' for tasks ready to be worked on
+  - Use 'done' for completed and verified tasks
+  - Use 'deferred' for postponed tasks
+  - Add custom status values as needed for project-specific workflows
+
+- **Task File Format Reference**
+  ```
+  # Task ID: <id>
+  # Title: <title>
+  # Status: <status>
+  # Dependencies: <comma-separated list of dependency IDs>
+  # Priority: <priority>
+  # Description: <brief description>
+  # Details:
+  <detailed implementation notes>
+  
+  # Test Strategy:
+  <verification approach>
+  ```
+
+- **Command Reference: parse-prd**
+  - Legacy Syntax: `node scripts/dev.js parse-prd --input=<prd-file.txt>`
+  - CLI Syntax: `task-master parse-prd --input=<prd-file.txt>`
+  - Description: Parses a PRD document and generates a tasks.json file with structured tasks
+  - Parameters: 
+    - `--input=<file>`: Path to the PRD text file (default: sample-prd.txt)
+  - Example: `task-master parse-prd --input=requirements.txt`
+  - Notes: Will overwrite existing tasks.json file. Use with caution.
+
+- **Command Reference: update**
+  - Legacy Syntax: `node scripts/dev.js update --from=<id> --prompt="<prompt>"`
+  - CLI Syntax: `task-master update --from=<id> --prompt="<prompt>"`
+  - Description: Updates tasks with ID >= specified ID based on the provided prompt
+  - Parameters:
+    - `--from=<id>`: Task ID from which to start updating (required)
+    - `--prompt="<text>"`: Explanation of changes or new context (required)
+  - Example: `task-master update --from=4 --prompt="Now we are using Express instead of Fastify."`
+  - Notes: Only updates tasks not marked as 'done'. Completed tasks remain unchanged.
+
+- **Command Reference: generate**
+  - Legacy Syntax: `node scripts/dev.js generate`
+  - CLI Syntax: `task-master generate`
+  - Description: Generates individual task files in tasks/ directory based on tasks.json
+  - Parameters: 
+    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
+    - `--output=<dir>, -o`: Output directory (default: 'tasks')
+  - Example: `task-master generate`
+  - Notes: Overwrites existing task files. Creates tasks/ directory if needed.
+
+- **Command Reference: set-status**
+  - Legacy Syntax: `node scripts/dev.js set-status --id=<id> --status=<status>`
+  - CLI Syntax: `task-master set-status --id=<id> --status=<status>`
+  - Description: Updates the status of a specific task in tasks.json
+  - Parameters:
+    - `--id=<id>`: ID of the task to update (required)
+    - `--status=<status>`: New status value (required)
+  - Example: `task-master set-status --id=3 --status=done`
+  - Notes: Common values are 'done', 'pending', and 'deferred', but any string is accepted.
+
+- **Command Reference: list**
+  - Legacy Syntax: `node scripts/dev.js list`
+  - CLI Syntax: `task-master list`
+  - Description: Lists all tasks in tasks.json with IDs, titles, and status
+  - Parameters: 
+    - `--status=<status>, -s`: Filter by status
+    - `--with-subtasks`: Show subtasks for each task
+    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
+  - Example: `task-master list`
+  - Notes: Provides quick overview of project progress. Use at start of sessions.
+
+- **Command Reference: expand**
+  - Legacy Syntax: `node scripts/dev.js expand --id=<id> [--num=<number>] [--research] [--prompt="<context>"]`
+  - CLI Syntax: `task-master expand --id=<id> [--num=<number>] [--research] [--prompt="<context>"]`
+  - Description: Expands a task with subtasks for detailed implementation
+  - Parameters:
+    - `--id=<id>`: ID of task to expand (required unless using --all)
+    - `--all`: Expand all pending tasks, prioritized by complexity
+    - `--num=<number>`: Number of subtasks to generate (default: from complexity report)
+    - `--research`: Use Perplexity AI for research-backed generation
+    - `--prompt="<text>"`: Additional context for subtask generation
+    - `--force`: Regenerate subtasks even for tasks that already have them
+  - Example: `task-master expand --id=3 --num=5 --research --prompt="Focus on security aspects"`
+  - Notes: Uses complexity report recommendations if available.
+
+- **Command Reference: analyze-complexity**
+  - Legacy Syntax: `node scripts/dev.js analyze-complexity [options]`
+  - CLI Syntax: `task-master analyze-complexity [options]`
+  - Description: Analyzes task complexity and generates expansion recommendations
+  - Parameters:
+    - `--output=<file>, -o`: Output file path (default: scripts/task-complexity-report.json)
+    - `--model=<model>, -m`: Override LLM model to use
+    - `--threshold=<number>, -t`: Minimum score for expansion recommendation (default: 5)
+    - `--file=<path>, -f`: Use alternative tasks.json file
+    - `--research, -r`: Use Perplexity AI for research-backed analysis
+  - Example: `task-master analyze-complexity --research`
+  - Notes: Report includes complexity scores, recommended subtasks, and tailored prompts.
+
+- **Command Reference: clear-subtasks**
+  - Legacy Syntax: `node scripts/dev.js clear-subtasks --id=<id>`
+  - CLI Syntax: `task-master clear-subtasks --id=<id>`
+  - Description: Removes subtasks from specified tasks to allow regeneration
+  - Parameters:
+    - `--id=<id>`: ID or comma-separated IDs of tasks to clear subtasks from
+    - `--all`: Clear subtasks from all tasks
+  - Examples:
+    - `task-master clear-subtasks --id=3`
+    - `task-master clear-subtasks --id=1,2,3`
+    - `task-master clear-subtasks --all`
+  - Notes: 
+    - Task files are automatically regenerated after clearing subtasks
+    - Can be combined with expand command to immediately generate new subtasks
+    - Works with both parent tasks and individual subtasks
+
+- **Task Structure Fields**
+  - **id**: Unique identifier for the task (Example: `1`)
+  - **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
+  - **description**: Concise summary of what the task involves (Example: `"Create a new repository, set up initial structure."`)
+  - **status**: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
+  - **dependencies**: IDs of prerequisite tasks (Example: `[1, 2]`)
+    - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
+    - This helps quickly identify which prerequisite tasks are blocking work
+  - **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
+  - **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`)
+  - **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`)
+  - **subtasks**: List of smaller, more specific tasks (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`)
+
+- **Environment Variables Configuration**
+  - **ANTHROPIC_API_KEY** (Required): Your Anthropic API key for Claude (Example: `ANTHROPIC_API_KEY=sk-ant-api03-...`)
+  - **MODEL** (Default: `"claude-3-7-sonnet-20250219"`): Claude model to use (Example: `MODEL=claude-3-opus-20240229`)
+  - **MAX_TOKENS** (Default: `"4000"`): Maximum tokens for responses (Example: `MAX_TOKENS=8000`)
+  - **TEMPERATURE** (Default: `"0.7"`): Temperature for model responses (Example: `TEMPERATURE=0.5`)
+  - **DEBUG** (Default: `"false"`): Enable debug logging (Example: `DEBUG=true`)
+  - **LOG_LEVEL** (Default: `"info"`): Console output level (Example: `LOG_LEVEL=debug`)
+  - **DEFAULT_SUBTASKS** (Default: `"3"`): Default subtask count (Example: `DEFAULT_SUBTASKS=5`)
+  - **DEFAULT_PRIORITY** (Default: `"medium"`): Default priority (Example: `DEFAULT_PRIORITY=high`)
+  - **PROJECT_NAME** (Default: `"MCP SaaS MVP"`): Project name in metadata (Example: `PROJECT_NAME=My Awesome Project`)
+  - **PROJECT_VERSION** (Default: `"1.0.0"`): Version in metadata (Example: `PROJECT_VERSION=2.1.0`)
+  - **PERPLEXITY_API_KEY**: For research-backed features (Example: `PERPLEXITY_API_KEY=pplx-...`)
+  - **PERPLEXITY_MODEL** (Default: `"sonar-medium-online"`): Perplexity model (Example: `PERPLEXITY_MODEL=sonar-large-online`)
+
+- **Determining the Next Task**
+  - Run `task-master next` to show the next task to work on
+  - The next command identifies tasks with all dependencies satisfied
+  - Tasks are prioritized by priority level, dependency count, and ID
+  - The command shows comprehensive task information including:
+    - Basic task details and description
+    - Implementation details
+    - Subtasks (if they exist)
+    - Contextual suggested actions
+  - Recommended before starting any new development work
+  - Respects your project's dependency structure
+  - Ensures tasks are completed in the appropriate sequence
+  - Provides ready-to-use commands for common task actions
+
+- **Viewing Specific Task Details**
+  - Run `task-master show <id>` or `task-master show --id=<id>` to view a specific task
+  - Use dot notation for subtasks: `task-master show 1.2` (shows subtask 2 of task 1)
+  - Displays comprehensive information similar to the next command, but for a specific task
+  - For parent tasks, shows all subtasks and their current status
+  - For subtasks, shows parent task information and relationship
+  - Provides contextual suggested actions appropriate for the specific task
+  - Useful for examining task details before implementation or checking status
+
+- **Managing Task Dependencies**
+  - Use `task-master add-dependency --id=<id> --depends-on=<id>` to add a dependency
+  - Use `task-master remove-dependency --id=<id> --depends-on=<id>` to remove a dependency
+  - The system prevents circular dependencies and duplicate dependency entries
+  - Dependencies are checked for existence before being added or removed
+  - Task files are automatically regenerated after dependency changes
+  - Dependencies are visualized with status indicators in task listings and files
+
+- **Command Reference: add-dependency**
+  - Legacy Syntax: `node scripts/dev.js add-dependency --id=<id> --depends-on=<id>`
+  - CLI Syntax: `task-master add-dependency --id=<id> --depends-on=<id>`
+  - Description: Adds a dependency relationship between two tasks
+  - Parameters:
+    - `--id=<id>`: ID of task that will depend on another task (required)
+    - `--depends-on=<id>`: ID of task that will become a dependency (required)
+  - Example: `task-master add-dependency --id=22 --depends-on=21`
+  - Notes: Prevents circular dependencies and duplicates; updates task files automatically
+
+- **Command Reference: remove-dependency**
+  - Legacy Syntax: `node scripts/dev.js remove-dependency --id=<id> --depends-on=<id>`
+  - CLI Syntax: `task-master remove-dependency --id=<id> --depends-on=<id>`
+  - Description: Removes a dependency relationship between two tasks
+  - Parameters:
+    - `--id=<id>`: ID of task to remove dependency from (required)
+    - `--depends-on=<id>`: ID of task to remove as a dependency (required)
+  - Example: `task-master remove-dependency --id=22 --depends-on=21`
+  - Notes: Checks if dependency actually exists; updates task files automatically
+
+- **Command Reference: validate-dependencies**
+  - Legacy Syntax: `node scripts/dev.js validate-dependencies [options]`
+  - CLI Syntax: `task-master validate-dependencies [options]`
+  - Description: Checks for and identifies invalid dependencies in tasks.json and task files
+  - Parameters:
+    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
+  - Example: `task-master validate-dependencies`
+  - Notes: 
+    - Reports all non-existent dependencies and self-dependencies without modifying files
+    - Provides detailed statistics on task dependency state
+    - Use before fix-dependencies to audit your task structure
+
+- **Command Reference: fix-dependencies**
+  - Legacy Syntax: `node scripts/dev.js fix-dependencies [options]`
+  - CLI Syntax: `task-master fix-dependencies [options]`
+  - Description: Finds and fixes all invalid dependencies in tasks.json and task files
+  - Parameters:
+    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
+  - Example: `task-master fix-dependencies`
+  - Notes: 
+    - Removes references to non-existent tasks and subtasks
+    - Eliminates self-dependencies (tasks depending on themselves)
+    - Regenerates task files with corrected dependencies
+    - Provides detailed report of all fixes made
+
+- **Command Reference: complexity-report**
+  - Legacy Syntax: `node scripts/dev.js complexity-report [options]`
+  - CLI Syntax: `task-master complexity-report [options]`
+  - Description: Displays the task complexity analysis report in a formatted, easy-to-read way
+  - Parameters:
+    - `--file=<path>, -f`: Path to the complexity report file (default: 'scripts/task-complexity-report.json')
+  - Example: `task-master complexity-report`
+  - Notes: 
+    - Shows tasks organized by complexity score with recommended actions
+    - Provides complexity distribution statistics
+    - Displays ready-to-use expansion commands for complex tasks
+    - If no report exists, offers to generate one interactively
+
+- **Command Reference: add-task**
+  - CLI Syntax: `task-master add-task [options]`
+  - Description: Add a new task to tasks.json using AI
+  - Parameters:
+    - `--file=<path>, -f`: Path to the tasks file (default: 'tasks/tasks.json')
+    - `--prompt=<text>, -p`: Description of the task to add (required)
+    - `--dependencies=<ids>, -d`: Comma-separated list of task IDs this task depends on
+    - `--priority=<priority>`: Task priority (high, medium, low) (default: 'medium')
+  - Example: `task-master add-task --prompt="Create user authentication using Auth0"`
+  - Notes: Uses AI to convert description into structured task with appropriate details
+
+- **Command Reference: init**
+  - CLI Syntax: `task-master init`
+  - Description: Initialize a new project with Task Master structure
+  - Parameters: None
+  - Example: `task-master init`
+  - Notes: 
+    - Creates initial project structure with required files
+    - Prompts for project settings if not provided
+    - Merges with existing files when appropriate
+    - Can be used to bootstrap a new Task Master project quickly
+
+- **Code Analysis & Refactoring Techniques**
+  - **Top-Level Function Search**
+    - Use grep pattern matching to find all exported functions across the codebase
+    - Command: `grep -E "export (function|const) \w+|function \w+\(|const \w+ = \(|module\.exports" --include="*.js" -r ./`
+    - Benefits:
+      - Quickly identify all public API functions without reading implementation details
+      - Compare functions between files during refactoring (e.g., monolithic to modular structure)
+      - Verify all expected functions exist in refactored modules
+      - Identify duplicate functionality or naming conflicts
+    - Usage examples:
+      - When migrating from `scripts/dev.js` to modular structure: `grep -E "function \w+\(" scripts/dev.js`
+      - Check function exports in a directory: `grep -E "export (function|const)" scripts/modules/`
+      - Find potential naming conflicts: `grep -E "function (get|set|create|update)\w+\(" -r ./`
+    - Variations:
+      - Add `-n` flag to include line numbers
+      - Add `--include="*.ts"` to filter by file extension
+      - Use with `| sort` to alphabetize results
+    - Integration with refactoring workflow:
+      - Start by mapping all functions in the source file
+      - Create target module files based on function grouping
+      - Verify all functions were properly migrated
+      - Check for any unintentional duplications or omissions
+
+---
+WINDSURF_RULES
+---
+description: Guidelines for creating and maintaining Windsurf rules to ensure consistency and effectiveness.
+globs: .windsurfrules
+filesToApplyRule: .windsurfrules
+alwaysApply: true
+---
+The below describes how you should be structuring new rule sections in this document.
+- **Required Rule Structure:**
+  ```markdown
+  ---
+  description: Clear, one-line description of what the rule enforces
+  globs: path/to/files/*.ext, other/path/**/*
+  alwaysApply: boolean
+  ---
+
+  - **Main Points in Bold**
+    - Sub-points with details
+    - Examples and explanations
+  ```
+
+- **Section References:**
+  - Use `ALL_CAPS_SECTION` to reference files
+  - Example: `WINDSURF_RULES`
+
+- **Code Examples:**
+  - Use language-specific code blocks
+  ```typescript
+  // ✅ DO: Show good examples
+  const goodExample = true;
+  
+  // ❌ DON'T: Show anti-patterns
+  const badExample = false;
+  ```
+
+- **Rule Content Guidelines:**
+  - Start with high-level overview
+  - Include specific, actionable requirements
+  - Show examples of correct implementation
+  - Reference existing code when possible
+  - Keep rules DRY by referencing other rules
+
+- **Rule Maintenance:**
+  - Update rules when new patterns emerge
+  - Add examples from actual codebase
+  - Remove outdated patterns
+  - Cross-reference related rules
+
+- **Best Practices:**
+  - Use bullet points for clarity
+  - Keep descriptions concise
+  - Include both DO and DON'T examples
+  - Reference actual code over theoretical examples
+  - Use consistent formatting across rules 
+
+---
+SELF_IMPROVE
+---
+description: Guidelines for continuously improving this rules document based on emerging code patterns and best practices.
+globs: **/*
+filesToApplyRule: **/*
+alwaysApply: true
+---
+
+- **Rule Improvement Triggers:**
+  - New code patterns not covered by existing rules
+  - Repeated similar implementations across files
+  - Common error patterns that could be prevented
+  - New libraries or tools being used consistently
+  - Emerging best practices in the codebase
+
+- **Analysis Process:**
+  - Compare new code with existing rules
+  - Identify patterns that should be standardized
+  - Look for references to external documentation
+  - Check for consistent error handling patterns
+  - Monitor test patterns and coverage
+
+- **Rule Updates:**
+  - **Add New Rules When:**
+    - A new technology/pattern is used in 3+ files
+    - Common bugs could be prevented by a rule
+    - Code reviews repeatedly mention the same feedback
+    - New security or performance patterns emerge
+
+  - **Modify Existing Rules When:**
+    - Better examples exist in the codebase
+    - Additional edge cases are discovered
+    - Related rules have been updated
+    - Implementation details have changed
+
+- **Example Pattern Recognition:**
+  ```typescript
+  // If you see repeated patterns like:
+  const data = await prisma.user.findMany({
+    select: { id: true, email: true },
+    where: { status: 'ACTIVE' }
+  });
+  
+  // Consider adding a PRISMA section in the .windsurfrules:
+  // - Standard select fields
+  // - Common where conditions
+  // - Performance optimization patterns
+  ```
+
+- **Rule Quality Checks:**
+  - Rules should be actionable and specific
+  - Examples should come from actual code
+  - References should be up to date
+  - Patterns should be consistently enforced
+
+- **Continuous Improvement:**
+  - Monitor code review comments
+  - Track common development questions
+  - Update rules after major refactors
+  - Add links to relevant documentation
+  - Cross-reference related rules
+
+- **Rule Deprecation:**
+  - Mark outdated patterns as deprecated
+  - Remove rules that no longer apply
+  - Update references to deprecated rules
+  - Document migration paths for old patterns
+
+- **Documentation Updates:**
+  - Keep examples synchronized with code
+  - Update references to external docs
+  - Maintain links between related rules
+  - Document breaking changes
+
+Follow WINDSURF_RULES for proper rule formatting and structure of windsurf rule sections.
\ No newline at end of file
diff --git a/README-task-master.md b/README-task-master.md
new file mode 100644
index 0000000..08f3f2e
--- /dev/null
+++ b/README-task-master.md
@@ -0,0 +1,645 @@
+# Task Master
+
+### by [@eyaltoledano](https://x.com/eyaltoledano)
+
+A task management system for AI-driven development with Claude, designed to work seamlessly with Cursor AI.
+
+## Requirements
+
+- Node.js 14.0.0 or higher
+- Anthropic API key (Claude API)
+- Anthropic SDK version 0.39.0 or higher
+- OpenAI SDK (for Perplexity API integration, optional)
+
+## Configuration
+
+The script can be configured through environment variables in a `.env` file at the root of the project:
+
+### Required Configuration
+
+- `ANTHROPIC_API_KEY`: Your Anthropic API key for Claude
+
+### Optional Configuration
+
+- `MODEL`: Specify which Claude model to use (default: "claude-3-7-sonnet-20250219")
+- `MAX_TOKENS`: Maximum tokens for model responses (default: 4000)
+- `TEMPERATURE`: Temperature for model responses (default: 0.7)
+- `PERPLEXITY_API_KEY`: Your Perplexity API key for research-backed subtask generation
+- `PERPLEXITY_MODEL`: Specify which Perplexity model to use (default: "sonar-medium-online")
+- `DEBUG`: Enable debug logging (default: false)
+- `LOG_LEVEL`: Log level - debug, info, warn, error (default: info)
+- `DEFAULT_SUBTASKS`: Default number of subtasks when expanding (default: 3)
+- `DEFAULT_PRIORITY`: Default priority for generated tasks (default: medium)
+- `PROJECT_NAME`: Override default project name in tasks.json
+- `PROJECT_VERSION`: Override default version in tasks.json
+
+## Installation
+
+```bash
+# Install globally
+npm install -g task-master-ai
+
+# OR install locally within your project
+npm install task-master-ai
+```
+
+### Initialize a new project
+
+```bash
+# If installed globally
+task-master init
+
+# If installed locally
+npx task-master-init
+```
+
+This will prompt you for project details and set up a new project with the necessary files and structure.
+
+### Important Notes
+
+1. **ES Modules Configuration:**
+
+   - This project uses ES Modules (ESM) instead of CommonJS.
+   - This is set via `"type": "module"` in your package.json.
+   - Use `import/export` syntax instead of `require()`.
+   - Files should use `.js` or `.mjs` extensions.
+   - To use a CommonJS module, either:
+     - Rename it with `.cjs` extension
+     - Use `await import()` for dynamic imports
+   - If you need CommonJS throughout your project, remove `"type": "module"` from package.json, but Task Master scripts expect ESM.
+
+2. The Anthropic SDK version should be 0.39.0 or higher.
+
+## Quick Start with Global Commands
+
+After installing the package globally, you can use these CLI commands from any directory:
+
+```bash
+# Initialize a new project
+task-master init
+
+# Parse a PRD and generate tasks
+task-master parse-prd your-prd.txt
+
+# List all tasks
+task-master list
+
+# Show the next task to work on
+task-master next
+
+# Generate task files
+task-master generate
+```
+
+## Troubleshooting
+
+### If `task-master init` doesn't respond:
+
+Try running it with Node directly:
+
+```bash
+node node_modules/claude-task-master/scripts/init.js
+```
+
+Or clone the repository and run:
+
+```bash
+git clone https://github.com/eyaltoledano/claude-task-master.git
+cd claude-task-master
+node scripts/init.js
+```
+
+## Task Structure
+
+Tasks in tasks.json have the following structure:
+
+- `id`: Unique identifier for the task (Example: `1`)
+- `title`: Brief, descriptive title of the task (Example: `"Initialize Repo"`)
+- `description`: Concise description of what the task involves (Example: `"Create a new repository, set up initial structure."`)
+- `status`: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
+- `dependencies`: IDs of tasks that must be completed before this task (Example: `[1, 2]`)
+  - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
+  - This helps quickly identify which prerequisite tasks are blocking work
+- `priority`: Importance level of the task (Example: `"high"`, `"medium"`, `"low"`)
+- `details`: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`)
+- `testStrategy`: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`)
+- `subtasks`: List of smaller, more specific tasks that make up the main task (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`)
+
+## Integrating with Cursor AI
+
+Claude Task Master is designed to work seamlessly with [Cursor AI](https://www.cursor.so/), providing a structured workflow for AI-driven development.
+
+### Setup with Cursor
+
+1. After initializing your project, open it in Cursor
+2. The `.cursor/rules/dev_workflow.mdc` file is automatically loaded by Cursor, providing the AI with knowledge about the task management system
+3. Place your PRD document in the `scripts/` directory (e.g., `scripts/prd.txt`)
+4. Open Cursor's AI chat and switch to Agent mode
+
+### Setting up MCP in Cursor
+
+To enable enhanced task management capabilities directly within Cursor using the Model Control Protocol (MCP):
+
+1. Go to Cursor settings
+2. Navigate to the MCP section
+3. Click on "Add New MCP Server"
+4. Configure with the following details:
+   - Name: "Task Master"
+   - Type: "Command"
+   - Command: "npx -y task-master-ai"
+5. Save the settings
+
+Once configured, you can interact with Task Master's task management commands directly through Cursor's interface, providing a more integrated experience.
+
+### Initial Task Generation
+
+In Cursor's AI chat, instruct the agent to generate tasks from your PRD:
+
+```
+Please use the task-master parse-prd command to generate tasks from my PRD. The PRD is located at scripts/prd.txt.
+```
+
+The agent will execute:
+
+```bash
+task-master parse-prd scripts/prd.txt
+```
+
+This will:
+
+- Parse your PRD document
+- Generate a structured `tasks.json` file with tasks, dependencies, priorities, and test strategies
+- The agent will understand this process due to the Cursor rules
+
+### Generate Individual Task Files
+
+Next, ask the agent to generate individual task files:
+
+```
+Please generate individual task files from tasks.json
+```
+
+The agent will execute:
+
+```bash
+task-master generate
+```
+
+This creates individual task files in the `tasks/` directory (e.g., `task_001.txt`, `task_002.txt`), making it easier to reference specific tasks.
+
+## AI-Driven Development Workflow
+
+The Cursor agent is pre-configured (via the rules file) to follow this workflow:
+
+### 1. Task Discovery and Selection
+
+Ask the agent to list available tasks:
+
+```
+What tasks are available to work on next?
+```
+
+The agent will:
+
+- Run `task-master list` to see all tasks
+- Run `task-master next` to determine the next task to work on
+- Analyze dependencies to determine which tasks are ready to be worked on
+- Prioritize tasks based on priority level and ID order
+- Suggest the next task(s) to implement
+
+### 2. Task Implementation
+
+When implementing a task, the agent will:
+
+- Reference the task's details section for implementation specifics
+- Consider dependencies on previous tasks
+- Follow the project's coding standards
+- Create appropriate tests based on the task's testStrategy
+
+You can ask:
+
+```
+Let's implement task 3. What does it involve?
+```
+
+### 3. Task Verification
+
+Before marking a task as complete, verify it according to:
+
+- The task's specified testStrategy
+- Any automated tests in the codebase
+- Manual verification if required
+
+### 4. Task Completion
+
+When a task is completed, tell the agent:
+
+```
+Task 3 is now complete. Please update its status.
+```
+
+The agent will execute:
+
+```bash
+task-master set-status --id=3 --status=done
+```
+
+### 5. Handling Implementation Drift
+
+If during implementation, you discover that:
+
+- The current approach differs significantly from what was planned
+- Future tasks need to be modified due to current implementation choices
+- New dependencies or requirements have emerged
+
+Tell the agent:
+
+```
+We've changed our approach. We're now using Express instead of Fastify. Please update all future tasks to reflect this change.
+```
+
+The agent will execute:
+
+```bash
+task-master update --from=4 --prompt="Now we are using Express instead of Fastify."
+```
+
+This will rewrite or re-scope subsequent tasks in tasks.json while preserving completed work.
+
+### 6. Breaking Down Complex Tasks
+
+For complex tasks that need more granularity:
+
+```
+Task 5 seems complex. Can you break it down into subtasks?
+```
+
+The agent will execute:
+
+```bash
+task-master expand --id=5 --num=3
+```
+
+You can provide additional context:
+
+```
+Please break down task 5 with a focus on security considerations.
+```
+
+The agent will execute:
+
+```bash
+task-master expand --id=5 --prompt="Focus on security aspects"
+```
+
+You can also expand all pending tasks:
+
+```
+Please break down all pending tasks into subtasks.
+```
+
+The agent will execute:
+
+```bash
+task-master expand --all
+```
+
+For research-backed subtask generation using Perplexity AI:
+
+```
+Please break down task 5 using research-backed generation.
+```
+
+The agent will execute:
+
+```bash
+task-master expand --id=5 --research
+```
+
+## Command Reference
+
+Here's a comprehensive reference of all available commands:
+
+### Parse PRD
+
+```bash
+# Parse a PRD file and generate tasks
+task-master parse-prd <prd-file.txt>
+
+# Limit the number of tasks generated
+task-master parse-prd <prd-file.txt> --num-tasks=10
+```
+
+### List Tasks
+
+```bash
+# List all tasks
+task-master list
+
+# List tasks with a specific status
+task-master list --status=<status>
+
+# List tasks with subtasks
+task-master list --with-subtasks
+
+# List tasks with a specific status and include subtasks
+task-master list --status=<status> --with-subtasks
+```
+
+### Show Next Task
+
+```bash
+# Show the next task to work on based on dependencies and status
+task-master next
+```
+
+### Show Specific Task
+
+```bash
+# Show details of a specific task
+task-master show <id>
+# or
+task-master show --id=<id>
+
+# View a specific subtask (e.g., subtask 2 of task 1)
+task-master show 1.2
+```
+
+### Update Tasks
+
+```bash
+# Update tasks from a specific ID and provide context
+task-master update --from=<id> --prompt="<prompt>"
+```
+
+### Generate Task Files
+
+```bash
+# Generate individual task files from tasks.json
+task-master generate
+```
+
+### Set Task Status
+
+```bash
+# Set status of a single task
+task-master set-status --id=<id> --status=<status>
+
+# Set status for multiple tasks
+task-master set-status --id=1,2,3 --status=<status>
+
+# Set status for subtasks
+task-master set-status --id=1.1,1.2 --status=<status>
+```
+
+When marking a task as "done", all of its subtasks will automatically be marked as "done" as well.
+
+### Expand Tasks
+
+```bash
+# Expand a specific task with subtasks
+task-master expand --id=<id> --num=<number>
+
+# Expand with additional context
+task-master expand --id=<id> --prompt="<context>"
+
+# Expand all pending tasks
+task-master expand --all
+
+# Force regeneration of subtasks for tasks that already have them
+task-master expand --all --force
+
+# Research-backed subtask generation for a specific task
+task-master expand --id=<id> --research
+
+# Research-backed generation for all tasks
+task-master expand --all --research
+```
+
+### Clear Subtasks
+
+```bash
+# Clear subtasks from a specific task
+task-master clear-subtasks --id=<id>
+
+# Clear subtasks from multiple tasks
+task-master clear-subtasks --id=1,2,3
+
+# Clear subtasks from all tasks
+task-master clear-subtasks --all
+```
+
+### Analyze Task Complexity
+
+```bash
+# Analyze complexity of all tasks
+task-master analyze-complexity
+
+# Save report to a custom location
+task-master analyze-complexity --output=my-report.json
+
+# Use a specific LLM model
+task-master analyze-complexity --model=claude-3-opus-20240229
+
+# Set a custom complexity threshold (1-10)
+task-master analyze-complexity --threshold=6
+
+# Use an alternative tasks file
+task-master analyze-complexity --file=custom-tasks.json
+
+# Use Perplexity AI for research-backed complexity analysis
+task-master analyze-complexity --research
+```
+
+### View Complexity Report
+
+```bash
+# Display the task complexity analysis report
+task-master complexity-report
+
+# View a report at a custom location
+task-master complexity-report --file=my-report.json
+```
+
+### Managing Task Dependencies
+
+```bash
+# Add a dependency to a task
+task-master add-dependency --id=<id> --depends-on=<id>
+
+# Remove a dependency from a task
+task-master remove-dependency --id=<id> --depends-on=<id>
+
+# Validate dependencies without fixing them
+task-master validate-dependencies
+
+# Find and fix invalid dependencies automatically
+task-master fix-dependencies
+```
+
+### Add a New Task
+
+```bash
+# Add a new task using AI
+task-master add-task --prompt="Description of the new task"
+
+# Add a task with dependencies
+task-master add-task --prompt="Description" --dependencies=1,2,3
+
+# Add a task with priority
+task-master add-task --prompt="Description" --priority=high
+```
+
+## Feature Details
+
+### Analyzing Task Complexity
+
+The `analyze-complexity` command:
+
+- Analyzes each task using AI to assess its complexity on a scale of 1-10
+- Recommends optimal number of subtasks based on configured DEFAULT_SUBTASKS
+- Generates tailored prompts for expanding each task
+- Creates a comprehensive JSON report with ready-to-use commands
+- Saves the report to scripts/task-complexity-report.json by default
+
+The generated report contains:
+
+- Complexity analysis for each task (scored 1-10)
+- Recommended number of subtasks based on complexity
+- AI-generated expansion prompts customized for each task
+- Ready-to-run expansion commands directly within each task analysis
+
+### Viewing Complexity Report
+
+The `complexity-report` command:
+
+- Displays a formatted, easy-to-read version of the complexity analysis report
+- Shows tasks organized by complexity score (highest to lowest)
+- Provides complexity distribution statistics (low, medium, high)
+- Highlights tasks recommended for expansion based on threshold score
+- Includes ready-to-use expansion commands for each complex task
+- If no report exists, offers to generate one on the spot
+
+### Smart Task Expansion
+
+The `expand` command automatically checks for and uses the complexity report:
+
+When a complexity report exists:
+
+- Tasks are automatically expanded using the recommended subtask count and prompts
+- When expanding all tasks, they're processed in order of complexity (highest first)
+- Research-backed generation is preserved from the complexity analysis
+- You can still override recommendations with explicit command-line options
+
+Example workflow:
+
+```bash
+# Generate the complexity analysis report with research capabilities
+task-master analyze-complexity --research
+
+# Review the report in a readable format
+task-master complexity-report
+
+# Expand tasks using the optimized recommendations
+task-master expand --id=8
+# or expand all tasks
+task-master expand --all
+```
+
+### Finding the Next Task
+
+The `next` command:
+
+- Identifies tasks that are pending/in-progress and have all dependencies satisfied
+- Prioritizes tasks by priority level, dependency count, and task ID
+- Displays comprehensive information about the selected task:
+  - Basic task details (ID, title, priority, dependencies)
+  - Implementation details
+  - Subtasks (if they exist)
+- Provides contextual suggested actions:
+  - Command to mark the task as in-progress
+  - Command to mark the task as done
+  - Commands for working with subtasks
+
+### Viewing Specific Task Details
+
+The `show` command:
+
+- Displays comprehensive details about a specific task or subtask
+- Shows task status, priority, dependencies, and detailed implementation notes
+- For parent tasks, displays all subtasks and their status
+- For subtasks, shows parent task relationship
+- Provides contextual action suggestions based on the task's state
+- Works with both regular tasks and subtasks (using the format taskId.subtaskId)
+
+## Best Practices for AI-Driven Development
+
+1. **Start with a detailed PRD**: The more detailed your PRD, the better the generated tasks will be.
+
+2. **Review generated tasks**: After parsing the PRD, review the tasks to ensure they make sense and have appropriate dependencies.
+
+3. **Analyze task complexity**: Use the complexity analysis feature to identify which tasks should be broken down further.
+
+4. **Follow the dependency chain**: Always respect task dependencies - the Cursor agent will help with this.
+
+5. **Update as you go**: If your implementation diverges from the plan, use the update command to keep future tasks aligned with your current approach.
+
+6. **Break down complex tasks**: Use the expand command to break down complex tasks into manageable subtasks.
+
+7. **Regenerate task files**: After any updates to tasks.json, regenerate the task files to keep them in sync.
+
+8. **Communicate context to the agent**: When asking the Cursor agent to help with a task, provide context about what you're trying to achieve.
+
+9. **Validate dependencies**: Periodically run the validate-dependencies command to check for invalid or circular dependencies.
+
+## Example Cursor AI Interactions
+
+### Starting a new project
+
+```
+I've just initialized a new project with Claude Task Master. I have a PRD at scripts/prd.txt.
+Can you help me parse it and set up the initial tasks?
+```
+
+### Working on tasks
+
+```
+What's the next task I should work on? Please consider dependencies and priorities.
+```
+
+### Implementing a specific task
+
+```
+I'd like to implement task 4. Can you help me understand what needs to be done and how to approach it?
+```
+
+### Managing subtasks
+
+```
+I need to regenerate the subtasks for task 3 with a different approach. Can you help me clear and regenerate them?
+```
+
+### Handling changes
+
+```
+We've decided to use MongoDB instead of PostgreSQL. Can you update all future tasks to reflect this change?
+```
+
+### Completing work
+
+```
+I've finished implementing the authentication system described in task 2. All tests are passing.
+Please mark it as complete and tell me what I should work on next.
+```
+
+### Analyzing complexity
+
+```
+Can you analyze the complexity of our tasks to help me understand which ones need to be broken down further?
+```
+
+### Viewing complexity report
+
+```
+Can you show me the complexity report in a more readable format?
+```
diff --git a/README.md b/README.md
index 5af4897..a5b87cc 100644
--- a/README.md
+++ b/README.md
@@ -102,6 +102,8 @@ Refer to each app's `models.py` for detailed schema information.
    python scripts/setup_env.py
    ```
    Edit the `.env` file to add your Discord OAuth2 credentials.
+   
+   > **Important**: For Discord OAuth2 setup, follow the detailed instructions in [Discord Application Setup Guide](docs/discord_app_setup.md).
 
 4. Run migrations:
    ```bash
@@ -115,7 +117,11 @@ Refer to each app's `models.py` for detailed schema information.
 
 6. Run the development server:
    ```bash
-   python scripts/run_dev.py
+   # On Windows
+   run_dev.bat
+   
+   # On macOS/Linux
+   ./run_dev.sh
    ```
    Or directly:
    ```bash
diff --git a/bot_manager/__pycache__/__init__.cpython-311.pyc b/bot_manager/__pycache__/__init__.cpython-311.pyc
deleted file mode 100644
index 414d1ca763949d3ea40fc52345005f72a12aa166..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 155
zcmZ3^%ge<81oj)5GZ=yNV-N=hKms7}nGHxxXGmcPX3%8xTggzw1QG<v{L*u=iYX|{
z&q_@$i3!e6&P>dScP>pzjY-NciO)^UOH5BKiiwZU%*!l^kJl@x{Ka9Do1apelWJGQ
Z3e*m=pqL*>d|+l|Wc<JYBZ`=TVgShQBQyX2

diff --git a/bot_manager/__pycache__/__init__.cpython-313.pyc b/bot_manager/__pycache__/__init__.cpython-313.pyc
deleted file mode 100644
index 59183176b1a3f7e414ca83f33bf96d61643da931..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 143
zcmey&%ge<81S(C;8H_;sF^B^LAOR5g%mO5)GNdzTGWxA#C}IK$fy8g=xmd*%6y;~7
zCYQtn=O<?-=EOUfCZ)zC<(I_gCgvrkrxwM;$7kkcmc+;F6;$5hu*uC&Da}c>D`Ev|
S2N_=sVtiy~WMnL22C@J$%OJA=

diff --git a/bot_manager/__pycache__/__init__.cpython-39.pyc b/bot_manager/__pycache__/__init__.cpython-39.pyc
deleted file mode 100644
index cb6fbf41c52aa1479e29b396d05976f70239d8ec..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 137
zcmYe~<>g`k0+lA_3`QXR7{oyaAVCKpE@lA|DGb33nv8xc8Hzx{2;!HXi&acPQGQlx
za!E{ZesX4FPP}tzQff?6eo1_8VqRi;YEevld}dx|NqoFsLFFwDo80`A(wtN~kU5`$
Gm;nF?h#p1&

diff --git a/bot_manager/__pycache__/apps.cpython-311.pyc b/bot_manager/__pycache__/apps.cpython-311.pyc
deleted file mode 100644
index e1368d1f0aa862faa0a10b21ddc05c16e1cf3806..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 753
zcmZuvPixdb6n~RH>)LHaiWCKf_9PL>S+oe<7Cnf2=`Ab_vpcgfWwJ>plfxE-J@f;3
z>o-tD{4RT3auPgwTUk#%`ChUuTkA{aH*e<U{ocQP+1lCwl)dlnho=nSCmpWDUn$EF
zl?#v{nTC`_jDZ7hK|1FkUBy1T0N-#m5;@X4hQR+t$ADFL5Aysl8;_EBxcZ{rFjg(g
z$GBa9f`~~#UlzI2i9G3^L*zG1)%|W}-;1$`m1&sHp2!n1j<Zk>!Zedg7hyMv4@#T8
zNtBjVXOLN*HXg&PNEFV&MVT(|Az(!qQ^Q9@%-HD}GGofm*W5#^(p(FxtcZ(n&A>;A
zw#pQNQ+b8bBhy0Xf*5vpFP|N~?B^ysQA685&W4H5{IDFT{+fSZ<arV1lgc+r$jRAG
z_n#ue`u+~FK0uhlkM^tC&3B3S&<k2soAa?q73b9k=h%@_lfKFMX({x|vMtp}l-hEE
zeZuUiQ6AY$2U)&?*~HDz-(YC)HBhe#n*Q|qnLm0l^LFN)hts2l=lJ^zxD5>zvGfAB
z>a2!E1sh^)__s;Bj(OSMZ}NU^s9G9Y@eX0(GREexH@o>RycWaIx8c*|H{JgEkEss!
E7kt;gumAu6

diff --git a/bot_manager/__pycache__/bot.cpython-311.pyc b/bot_manager/__pycache__/bot.cpython-311.pyc
deleted file mode 100644
index ac180414675293976d817c193e4115edc49e8ce8..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 11715
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
E0u50F$p8QV

diff --git a/bot_manager/__pycache__/bot.cpython-313.pyc b/bot_manager/__pycache__/bot.cpython-313.pyc
deleted file mode 100644
index f87dd0ae352a0836519a87c53f35ead1f0f62d21..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2956
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
ZrSukQ`-LbVZ;|#tgkd^#kAMiA{{<$-J%IoK

diff --git a/bot_manager/__pycache__/bot.cpython-39.pyc b/bot_manager/__pycache__/bot.cpython-39.pyc
deleted file mode 100644
index def814c22e1f126ae9c29ef40580a801a3511c12..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 5728
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

diff --git a/bot_manager/__pycache__/forms.cpython-311.pyc b/bot_manager/__pycache__/forms.cpython-311.pyc
deleted file mode 100644
index 34ebc6d2e38e8cdfc898727248b8fce1a0fb1dcb..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1598
zcmb7EJ8u&~5Z=9)ABhnpSR&?S3PcVNP=Q1cLOex5K!P-<NT-W;<6O9h**){BC@3P)
z1St{}R1`rdDe_Z{l)~ByiHgpVQ>9|&E{<^=A+fjnX?A9IW_EVwzLiQv0;BRlUpTK3
z@(VY;VeS&$2#8OF5k><NQioE)G^Phys5^RSI0hvec|e%)o-mWs#ojrxsuQvXD;tiL
zYFVI_`-fJJ<)0F}@EZ@=RGIU!2<2~zJ53dC$H|>In)mCfn37@WMXZ)N$k5o`bSHuM
zL^yFMBaW8(rr=v!g?p~S%7&ve9sC)pv}gK0cpNa<yHJ-6nB=-+)FCNfsbgw{TZ_4#
zQKqfys}S-UhMkU7p6~6L!Azg7TZ1|*_eFCG+4XnE2Ew`Yh$o({D<kqkuFNEU&LdT<
zEqGDH1J`HIAXB4)M~n;ir57~08fgSxjW5Iju-;yL+(`U5@`CHtdr`tgb@ycT;oU0a
zx0-O7R6{PMSLYIw?j?zkwkAd)Vo?H^wu>t7y6E0@Rnc|Bm^A~WM_u<t(+e_*z*H#{
zggj8zyw3wB1y+D6J@KS`6$|z-YBUp7c*b8R8JT<KvpP@YchUt#vUB0?_1T7q7kMq2
zeHzz%FL3WP=lJYgoVf7X5Tck(i{et_jWRGX0&5sO%Nc-odtdwT#FE)Qa;25dCF^H-
za(QO6Jh{PI<*6U#sm=0KyJCMn`{nY+$=0o?btP_98b2zH%}S$V>f^-@0a(i6Cn{iB
zoB){qZipke8ABNFvBd;Zsn&6%@U2t8dXzT+`f+tM%LL=Yu!X$s0|c32v^h|iXdB1>
z*7~7-?+g`tuQR%Mmwx~JUF=MQj?s6<2d(VZs2G8BYJ_oF6MkBDs_09XN8Vh(*|cr#
z&z=SP;wVBHVP76G<>Cy$Az1PhKtGS|!xenrtF3e{S@`|+P~s$>-DmGK@({49hu%dq
zuXV^UY$0#^072#r%}v{RWwAvss>fNuTWJ%>v?B!GQ57CxTVTSo>PSNw3~wiYBWtXi
z;v5{o--rAN(9tQSZE~zNINQW-9W*;ejzWPA!}7hA$6LtX?hD6s3YQ*+<(U<C3;Ejz
I2-A!I0k-&RsQ>@~

diff --git a/bot_manager/__pycache__/forms.cpython-313.pyc b/bot_manager/__pycache__/forms.cpython-313.pyc
deleted file mode 100644
index 8a9bc5a15a579f306634dd03dc7d2719f84073ec..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1312
zcmbVM&rcIU6rTOrcA;9RHGmok7ub-17bO0O2SF1dfU<JiWU}o}*TwB_eY=(T4-gVA
za3J_E;K@Hly+|f8nt1Asq%~fhw_DI6iHUpo=1u3l@4flnn|6vtgNSc(TY2$LBIG-6
zPCu<@bP{145Q|vSGFg&98Yh-)Da-Pb0?LvK>Npu86U0)-h^5)mddhf8lC5(}wt}8|
z>cTVk56_&JHw$eHGbOIoBWT2JQ6Vv9UU(QK3sG42J#M6Cqv3>ZElZK1+S_!dgmFM@
z0+K~Qwj@x}3S?1%GACzVpjs+uo@VO2ct-tLWNaf%AMcqai+}Ojf&+D#l|i=@JGWlS
z*#AUS$<ppfw<IW7Iv8Hg%=6*CoHHvdaoU)NtD)0iTuY*tEPO6h7z7r&4CreoXt5)*
zY7X!`rRYQ{Hz;jHZYw~0kkVHzC+MAArnK%uoCJQz!iZ8x$u;540<PD67Pv8BgLv_&
z6USQ-xKF}nE8)2<-}P7$^9rSL;v{~JI!OY4wUw|~@ZbeIcs)M7c-L-1w8?6TZACTT
z3Ftzr%Is>CP|+L5V_>H(oN2z{D&7zVL>v|pV~4iMacOi%J02c+JNaQ~Vn_crSl-+C
zT$%b*nR@SjtlT?M<g&4wgE8R@*AX!J>X8mZxEV$$BV0j99Y)bYuPo>qTKQAJ#>RsJ
zw#iRf(~K?=kU64HU(f${mM;CC&2*SBT_168{77e9ob(SV4%4i7X3r!XCdhfJsqu0@
zVKym65o;=d3m<S<Tm!$E_)*9WKc*~nssVE|vCRC1V(B6hDhO8*E|M+Pb3&YAmY!_K
zrLi5258d9?&o>2bAkR7FZ{lwVsKS}@vNqo(0x}9bUKI~QcQ>8Ti?W&2(>aaPp#`j!
z7glg`QPQlRDRqB3p1+?xh6iAZ5d7bWrv;oSk|cd0BVUQxRdvbOdvv(Azt$zf?3NU1
QesAND?$aMcm}yDB01f;Rh5!Hn

diff --git a/bot_manager/__pycache__/forms.cpython-39.pyc b/bot_manager/__pycache__/forms.cpython-39.pyc
deleted file mode 100644
index 9f357f135901b23aff9c8fc842f3b1907735ab25..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1119
zcma)5OK;RL5VrG9+AXDs=V`A2)FX!qp^6qz4_%PjQ?!!huH9`GCs}MSg<i`I^&fEJ
z*1zN{r~U;Fh?%61E$snI`QjO8W<1|~;k{l)U_JTnA3XI4`Gv;(3cy&0$7})!BB&x2
zEhr_z6Tb2)zwoP|2q<|+L?FU%M1+z~!ehUPz!QlWJn^|F7Re6D(=*6Ka_YkUMpx#H
zqUE{tbz?W0dcPdItld@>uf+(zonJl}>+qN-0Fo3`kivsXRCrLyJN61+_)sNqy~~7e
zq0Ws&myNxcOC<dw7(=q3v<PK1iLuEO3cCcGE2)T1sEB`fMcTD;v~sP;>bA5z_gzr)
zO1jWCA7$;b(E+b(saPp?q3cC0YauoJ%+*Y~g{k5rdC(|u9X)?PwPjOtwbp-ATdDi!
zk^QaBK5*5y(%60_jp1WykU(y&Ho2!0XhEj{gFJHyV_2RsmoZi~Vy1Av$k?YDSKW!m
z=3NMfQn_fqlu8&4(<iR?fg5w!Xt7mKXV#^=@{8@Z@nI>((wbAE?_)WH-_JJJhEv^4
z<j4+pno-FW+nDXi;a+1Ij1TUqhwYSCr(a!w?1T_zP;v<kXyRpb>5qO0=HN8YJ$UOS
zggXf6zN*#j9-uD*zzz&vIian6W4`|{l%*@V-KrF<vX12*0bEFKUMa!@!TCq`uID)y
zgN`A}EeL5wx@_m`veGbF^F1ZSAdmiS8yV8e2zL=K$(|zsnL(ZmvVcT(6l%QStpShW
z0NK4@4DCUlxJXQRJ#M<$N39-AD-MmfaOpNG1W9Q*));nMewV!Lg!T%5W`pxtq|4q)
F`WG_&^{xN_

diff --git a/bot_manager/__pycache__/models.cpython-311.pyc b/bot_manager/__pycache__/models.cpython-311.pyc
deleted file mode 100644
index a5d776b1ae0a9b81f651de45a01e58006d8bdb59..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2112
zcma)7&rjn<6t?61w9OJ{t8}-ZHb53Nz_P0dRj8^e?Iy5dSIePrAwsoGW`JZJn~t4!
zK|SQK2c-7E0f|agrEOJFR?C4y|A-zP$%n|-_Cilo^t7kGXD0zne@)`gGvm*1zIl1y
z<fnlFk%N~0O4$5f;J9CL&}*@7=loOX9B_mqyv{ZF3eR&9?h!{KFE}Dlz8>kla0n4z
z!xglO;IpE@iv0^KO5#ggA#sW?6?iY+FbUPIYBz{~>kIh}h6fzwDm>vTkqAeHdbCF*
z{Bh)v2LW&etrGiBMm)q2NR-5m<Drctd{(j-mn4ppp_NiT!%ro$Nc1=rVo28*Vu&FV
z=>=CAATp$5z)L+e?UHG%*EUWGM0~}2Vnchb>eSe<H&5S!spXw~xn@;OMsn3n%`m8*
zTPWw&O_sB%W#<~yva}6q6$FOLz1W(r8PB}bCe^o8n?ASaA!dTmb*-t}(3Q2OZK{U(
zg{lz(<797K?I#q%U>|?s^EAK#_a#?{d(c2OzgXbCsG&6|1c+KxU$^ju+?%QLhpSu6
ztkbH!x@1;sny!|bYjkzZwAF@YfKIj={P5FT+g?IdEt{$8j?z!UbazUEa2Dpd#dQX6
ze!cA^Z=K`vi-j9rQdMzjRrN$wg=kG3`?9Kj*3|Ui2}A8(s<f%G`5M&;yNTnNZ9b!h
zCw9}Q)`%xRG)<jqhR^a+HA~g1cI|WO4U{#TF4r0~cp_FAg$bf+wkI~XNVm`4hPbad
zb_;GSi-0xk11hi%0b2b}M;hAwz?FtxT8=c?mL^?kvQ_TL!@KjYJbWZL@>E-%a^<Pk
zTt^w%%eu<Q(I+Ri^Qhq{Mq4pl#b`b5q{sH+ZhGu!&Pf;B>7tu1wiY_d9i-nmnQ@fa
zwleD~v%u_59@&mE(^h6&Wv2D`EXv1jpK;eA*aE8mdrSTfPyWf0GzJEZ1Ho^;L1Fio
zPKdCvgyU$)6d_|_-d=a(aa<)ZmE4=~tqTQr=?EC`ZFl1mBN19*@ERj*?leh(F%=?0
zg-f33*JJ~#mUzjk>36I`#7mim3MUt}sV6h4`-Ol-cUpwSSps00p;Cro7~1EGv9K)g
zI-dr(YOH$SfZxIq43@hz{!Rc<k;NS$cQ*$j1Td6e(+p3Dz<fddVL|R>F0}Uyg~e$N
z1Aw72+5PwT?>d9`;QO-t<3iALlK1=~SS)1NZ6LCD5QY#?uqV!&jMg@cCv@8{a4%7M
zuvB_bo?}zU!PtS#Qp<SipzS<~P^-#nTXxMf*n55yuoyM8HJuVRg0GAsj3J<OmPfd-
z(>M+hFq_s70GI3}4(*P+;?Oq>C)uCh{iW`RD{XPb6<1oNzSEc^O|+#6SDFB)Wk&bL
z-OOk^lXo-u){~BsN7v+!mK~+oR*J4tyl~C`v(kOEQWygHD0;CF^HQX)85`y_Sqst_
zdy0R2!8zgY?&^-;BtHs{w2#>gM8FcTwgJurp65H<uygf$7ESTs=j*T+-<SWu`9Cin
WW>Y+9y$*ZX{bA(ZM{bzm@8&PsEaN2r

diff --git a/bot_manager/__pycache__/models.cpython-313.pyc b/bot_manager/__pycache__/models.cpython-313.pyc
deleted file mode 100644
index ab4346ebbdde911e279c4be8a65023120ca167dc..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1908
zcma)7%}*Og6rW}Nxn6_UA%qW?P#_g<1Ee&m`lU*V0SRb1uvAqgOQXd*n5FAoI=gN|
zPgW0=dMX?cJ<?OjEj?B0U(h3V4@M*P)DyQ#CilL#Ynu<Hq$Bya@6B)K&6}C`8@JMF
zg+QDAPTqQ3Cgg8)IxX5ZS|%6=L?^nmLY5^ijgdhzPV}B(qRT~TEz+5A@qGlbuyHvU
z8G(_}SB#95WBK?QPRdInR&h;cdnI%`t+Pz)cj!4FMZzVW@E%>_axt<NY@;(Y{9=l_
z{Jz9vui)drXRgjg59UYoD9ld+-~UoRrpJL#-M}Y+SM}sD;b~prz2#J170D;AUvQmG
zt9*v%bcW~qOcF}PcuH;Nl>MzmaN{Q1G^)104z_AkeV01!H`Fjq@Dm-sBwfl2Z4B5N
z1~?#}k+n-?$DD-oUCm1(;usYMp&}l$H$9v>ChpIFP~73}HY@o>-7Q&$O$*fxR@`uX
zS}`1>%y==pnVFqk5vSDiIi*7D?q{amg}33U05x*jck9R9A9ha?gDp(q8ClKui3Fv%
zJj_)ng@{!fZI#lms)pTW`Y7GBxaZrJ!yK1Vj$0GS!j{1oEoPfsLqF=fUouCiPh8h#
zh7&L%X?fHr`PSD=q~{Hvty>iqGD?Xv=rF0_3#GbawrzeJW8KE=4c{sO>vL<P>N5}4
z9R!ZwLBJy5D2o6vAMbO3@5yOOYo<mTsgWbEo_eb`f2wAiYObN?j^(;~zqW9i8E9rE
z8kvdXg?eVLwsfl9X=?Wx+P&uw>)Ly@<*tA1*R_YW<rfhtIux#n%a!2QZLzl1ItSzb
z>7a-T=<P=68i77!o&Yx6?d%%e`d5G-=yrFFaq_5ba}`El(Oqj0Ayh~&@T1pAa04C{
zlDUCT0<Y-`C@8C^_^q;<PYWfexC+#yd6tGiB2jV!&&&6Sr0Y<4J($mg%9$NpG1k=C
z9E{`%fOU=q%CSH>9?KOK;kDwg^$Ea#sc5YS$ZM?^9!SvKOPP0M&|S~!xANHZ7^EnJ
zqJsM6c<!P4!s-eNF?+GSj-s&Ny9)q{$_^Y(?N1#}?@#aDJ(7>+e_8r@>FC3gzS)z+
zY*;i{va9)iJ_KKm7sE#oatOFLp)9(bS!HL1?FO|h;)Tb0;qm+epT;q-Aq4tLuCu3p
zsGXF_yb`x|e9Lt>rXm#38FP#co0<G|oHC9ufq?n)NrY?ic?0_p@ZP)%0LVwlG?kHt
zGV;^X^MT(+e;xf}yRLjuD_qEm*HdqTtg?g6?06$P{%3Zwwi1YDvY|~Luh+G?OCq{K
zR1d=Q!Sz@3QIRya4X5nRm>c1-L_fv<olxRIqF0j_iI2j^>SO*cM8HSWn*#VpmL%yf
ik~@ziq@lgop}Mc06EM&FlhT8|fy3N>?gareSo~ik+K5g7

diff --git a/bot_manager/__pycache__/models.cpython-39.pyc b/bot_manager/__pycache__/models.cpython-39.pyc
deleted file mode 100644
index cc4ba99744b529b5275a36415b3a891b9b43ff45..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1314
zcmZ`(OOF#d5VpJX>P}~v86L|Dv6}-NBJIv$#R(w<Bn(2Uoy*LrHCnIJ<w-hp+F9G-
zG2#X{#4kWdaO5xf%4z<>o~Uv%O9aA^D_^<FWxMLDmc3reaBRPcrypa+K9jOJ8mQdE
zX>Xwb2E1Z(o^#F~F^C|3%^+5M7QKq|7*`t5#FgfHr2(x&HfW#WPB!4aHP@gjTadar
znyB2vY5zf?Sk8gvk&0&x;1Ip#d2<7|0*>h*XuXZ|HtHQ{LkIm5#3@=5#N9Pc5ogea
z>@~}K(8KF&`Q(9iLtUSglQX~*KXISV<#SP~dg7*MmvHIm^v0;Pg*MPHrn0V8)qgzd
zpJ>x}%DVnsSt}>X4r0?nZ{HkOvVP)|sj3#jspoDVW41w^$YtdaW^(DYsP!`;0Z{Lp
z>jlT{=YufKAx=wiU$Pm)3-f~k_l;W46>e=<Rh@id<|5kv`)zdlcwzKR74G;@7p1Jk
za5+}TW9`IT)_6s8yvq6B;)QPuVVx18OYtKVjGylOpNhS;^#Bvp5rU2r!ly!DfMrEE
z6XM^ctX3970emu?O0!?83d}a?O{brzI#1V06D9cUf!39hb@1{@X@x9Y`BeGdNIG>?
z&eh727DnL$2<d#fT)-Ne%NRGjc0*8!43d@6v|A`TJj361kXaOLKc?B=xM7oKiU`&U
zWIHDm5^P1N59vo1$dm=b@w|t=TZr3ezp%zczHLY#MUw467i*UJG-P&;WdPqPbO3e`
z`9#+OyFfYRGoz~TOiJn5A9yQ6t#D+hBTYtv-u4|y=+#4<mhwO(nelhnn27NIeT>IP
z2d8oW_dXsMBNsw#%nmw#n?p+O6^gW`!|vBhf91ojAs6!#iK`?+>C=5}R5_{tR4+oh
zeS3KSaCm?8(A*@SpGgExBuCT`#1Y>GWeZa-T&Zhw4Ly8{d{DI<R|?E^+VTsDUrGG1
z@O`vWUe<-*#iFmukA)}O!Jz3An8|vg_h7ubZSybs^n{BBpN&LNCmG75@7!5&{VsK(
Lr4L^g?RLKaJR315

diff --git a/bot_manager/__pycache__/urls.cpython-311.pyc b/bot_manager/__pycache__/urls.cpython-311.pyc
deleted file mode 100644
index efe512726828f3a53779edf04b1e2c7168d4b2d3..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 977
zcmbV~zi-+=6vyxI0R}@TBtwRjrK(g?K_-?6r4r48RCS56AXDUUCt~Cu=zOFq>X0!*
z_h!u0rfP?F>z`pu9+1_oQ#Pb*nR*WcRT@t{-#z(#-{<_!@7?EOF^}YU@k2RnrV#oK
z&T44Om)j~v=p&+tVhh>0i!q`ps#qyo=_(kd5W|!(WkgmRY5H5{lY-D!x#F>4vXV)!
z6sjgNImu+!Og@p(B$Hh;g+!((8FkHUBr+w*<krliM5Zj6MTLN)m4BIGwyV+2BUIbE
z0icE>GB(8NjVu^A=`)kP^&%9hC$8vQrYC@K44X|gsq76nGX&d<@(_-lX&C}7(-He1
zn)F~9rc4;7HQjy?o{Z_=kHk&_MVZCcsbVLA67Fzltqv4B)9Qnaf_b8DGtV=Ik}Z48
zp?%Q$OYL>75NUK|I77EF;g-kY9&l(YhyHVD9*4?vC@qJ3#tUGIU^b+QG`UY!QZVj#
zU(l_T(B1CgzCPyehz*2(<PJ>3>c5<vFdgb-8;(2-*CAbF{O(R|*)E+}?0|2{t<Vnd
zmo#$)V?0AU{{1;aoBsVd&!BYf{P3c3as1)U)vizK0jY<iJ|n7BA77@!?Pu5TebNd@
zD<rLj?B{kaSy*j+*L~6sNIN9$rT*mVIDFdt`N}7qfOJCA`A@xe-3*_%{f<n~3rH^{
Qy?IG3rOq{Yct!r;AA33iegFUf

diff --git a/bot_manager/__pycache__/urls.cpython-313.pyc b/bot_manager/__pycache__/urls.cpython-313.pyc
deleted file mode 100644
index 2d0f9680ff8e960f342deb9c98964141b74233cc..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 781
zcma))F;Ck-6vyvkJ8@zRBrF*Kp;kx)iDY5`MGUk{p<?I>se=VF@yQrDc67dgh*)3>
zQ>RLdjP2I3AETb4T0*MS38@2BzChngh@+|=dc*U3@Be##ckga!nk543{f%<^gA(!+
zgUK?Uo#8KVJ`zS4-6wlg&=taROxe%vDMDEx7JWgOYANsZN#XR%G?w2|MnnOKQLm|r
z9@A5z2*k|a>WC<%gaO2C1~HQoCJ^%(#B55;0a3{y=8<URMaeDKDvt=%Xrgv(dHM*0
z!9Y9r_(hbEL_Z1TvF}9^iNJ32o&lLgOK@BAMp8m~9Q4X4G`&D>W72bWo@Iwi+w*(X
zf8=h*nf_!PWKa(GdD?0mWKc46U4OEnad1#G62m#O12?R9g&zq8&L;9`G&BV?MKpL<
z0-u1uI}s+B#DEf*h~y%OK9eD&NV5KV+v<q$jJKr4!j@<I$FI64+`{v=?Z9@qu&`6T
zbD8MPcIb3{z9SZ(6vrCffO%3Vr4MBBfh_#a6Rp^<^bbEA-5%Yq$Lhv+Rqrp|X@lxo
zTwVKg6{}6id@C;A@xgLEUao(!Vs&?vdU=01Slx_QH^07()i?i_dNK=hxobm|VH<w{
Diju*|

diff --git a/bot_manager/__pycache__/urls.cpython-39.pyc b/bot_manager/__pycache__/urls.cpython-39.pyc
deleted file mode 100644
index 9aac981466e168baab4087f8313a98533813bb02..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 618
zcmZvZ!A`<J5I}cnfzlQQ^x(-mCc?oRA%sNFUbqnwvM`%cvTe!kqLHIl<A?Z5y?Wvk
z^yExhl?1lwOWw@1GuaW%rqA%)y*aCKg|SbP!xNy4@ingqV89hi_>^-76>wA~ai$Ju
zl7lOqwF_0Ky*p@iv?_R|HPC9{mlmMaAuO$l=D}HM=V%RRmDWb{p+gqcrvY3{Sod;|
zbFePY-HouTJujsC6w7Cmv)o%`cCKP$sUj7L+yxlvFSQg__H&=oh3wjt7{;j`P%ws3
znFeV^taevN>Foyoe^SVaDv(P4wJPL9mCd3^{SH*f?)s>smB!vC(ijn8ZQIBc<`kQk
zvBz$h2e1}tl=Ze+8I2ocx=L^fHG)TI5NOky7OF!+6Ojk_9p0psIyE0mw<tmQzIhnT
zHac6&rJYT(Wh~VEe!Gw}x~xQ`IFX)F&)()G_l8LZTO~)d4%0z|Jao?Z!SnS45VWji

diff --git a/bot_manager/__pycache__/views.cpython-311.pyc b/bot_manager/__pycache__/views.cpython-311.pyc
deleted file mode 100644
index 217608a9985f5f2390b67bf986bb6fc17b5e2596..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 11371
zcmb_iYiu0FmhPVSqsP-8JAM<lA0(N?c#{Q!F?l(DCUKmAO)Q4MFqv-K<DG};ZYMCZ
zAwsNVqDXjAq(r(Pd9_#EMEI`qgC9WxDQrNX`>Q8vDWhIly3&dt_s2?u015GH&#9j2
z>7JRqSjy!yRbADmPF0;c^_{BzOCaE*AiVqU_J#j#rKtbGOer{viJ#u1De5Z4Q#_rd
zQgnn)*&?=-Jz}TvnJwu^IU`O;+j&RQm2yYiDNn>h^3J3;<%{@8+LiRDm<U7OaVG<j
z0KDr-)}?}xAbI9ZvZ?w=JxTkLp;SYpfu#M(#?-dRHj-wNO{wNcGf4-MEveQ>D@oTS
z+fwb3cABzLLSV6@)B)j%PeJm};9n1s?R@ZkD$>cbKsml1Xcr#>+RZlr?cp1N_VU|+
zK53)IDZc4_if<NzpW1;7{1>_GAZ0C3)>>7zla#eVS$kF4E|9L7@0h2pQVFg66Yo=>
z0`t#GO;qF}VctDWg}46$%foifB?@U?5H*h|@Ci|f%Ub=sAV)Lj79kzYh|y>EJ`<)j
zPfC!a*t{V914kfi)4WGB@^B_SmzdXlB$-OZ(md1*7zJY)F$E8NBMB*<5qWq%1zBcB
zNG&B}vT!CLT)_NsDU*Ilkd`uONr1dp0)e8bSRx4-k0i))B0Vobx=|F~Tm})N3$nZv
zO$qWshR5ejToUJ^OJYU_i6PJGMNwXWR%3ETj2n{%qPyT9hyN!Y$W=-PS_+Fsy$xIG
znfcc`tgE!_E|;!=Li4s2Izd|}7>3$Dm2Ewjk)caz7(nr#Fr7?Da{q#yN@@<sN@0iS
z0bZJ0A9hKz$C61A#e|V|W4{GS78@Zip=2EQ+n$lZv(ROnq_fkRcp{dJ4lkb*&YBuJ
zdmaW@>R)<W^OTwtVOdi3$mS^^7pX0Oqw4Rt=jZPFxtzaS^><$!+49$~?^N3N-)g$u
zc&jewA6Nb3ievmIc!7$W#|3*&Msf`jFp|dTQIu?|w?c2ypF;jK<Jqch#kOeVHjKr9
zEtEpVSleZ9sf40ntbxOdowt8%s~T;`)D2p*CHQQ+X(-5;^MVXYMMfP))egm)C!Qf{
zD}|jRS|~CLVkf4WkdPU0h|Q4JT*xoMi`%gPt4IzY90aii%Y9g`w;^`HgKb!43J46d
zul<u_*LNtseL3Gg)wl2Ba6TBiymBwtc{kXZ3wEi&u8R}JaUX!9d}Bw!X@9|0pn&{H
z*%|lGNFeKUi*3NtqS3}Y^uY{Vh0$4r8hYUAe<9;6F36@)h8o7`Tg}HRy+S|Ae29mk
z9(KPfRLq-A_Lr+H;@TqtXV9t>G$jX1r4*Qd&=6b^By2jYb*HIxow+|1ZPIc>=}n?5
z&J~(>@$MSB;+fJMr%z4KWOp9T$XuLQvt=+DiA<V{ivrjvo|Bg2aWH*z%gN;1{bXWq
z&>{y7{8qK7=fK|Si`q3z-o9be9QaUk#p1{`?9*JjaT0N-6nlVZo`e)VA4?{9%^}6k
z3nC7Z<}NlX;vkDpAR)SFC%P!^!Uw2`5<a!6pf0%B4+Z$1v<~DVm3P;@|IW3hyY5cK
z-MJO)xHkLo*<5h98r;3+$oqpI9=vq$gTt2(gNk{d&xe|>hCd4b+ny_X)`qv3MwNl;
z%8pYx=CsP3R+!UU4ei$^Z#I11q%;iV8V1yc0fiYTxZ%}bd=&e{2k%~fcg^ub(T?11
zR9<{V8Hhm4`CnE2uPTmLbtN{G5F|8|_zj}Ok7Z0u>df1U3cqMI&Wnb!uGlv1R&`pn
zuh=(A_yj~L2diR%(%Ux-6)xAJDt1__Dwow5l)gfdp{7Yyc_%16K~Tth(`A(sl%BQp
z3Ht$KRYoMMb{P#-F+gi>Fp(bKTSM`EQz8NzqJXetdJ<_#j-}&5t%b0>#NTHjh`q?;
zNg$f*Wl~Gr37IfsvZcGRilOY{9?bS3!GRQU7phco-Q1ETrrTOn_FA@97fk$TC=O$l
z{{&Lg*49w{o5M<QAQv1^g9A16pJ6{dcIns$CoZ2@JMla8e<Q90cb68|<1GWUdAOv1
z`t^@l2H$xpP%7j|g1F1Pk1iTYzhbLYrAJlu725_b-Kt<+I-ux?I*MV@*vmmlD;6V7
zrC;x%WQ01!&`XIgt~zAgkBec0DW%N6ykmv_69tRN@h9pN2k+W+TNhA;3<eL7!6Ubq
zIjuOXV*%W%_NrIFSy^?w<4Ak--wX5w>Mi>#)CF2bn_CRL*UD*{k`Xr)1GMYo{VTQ_
zh><ZZ&ss~87m`BN-jr<^6~&CmkwSpX9N-b|H`^dL1AxdQycLfo(sP+?V|A@Tj^M&<
z4<Z;dN+mm@m;zLT?UAjGEXgoivBEVkY+|^_!TyCCzQ&*rQL-wqvB{Yw&84#`uYAor
z`c_<6!ktlbB{TB?jy0!%ozUz6cXh*nx_iT^Z+jf1i2$0P*L{j8h^*0qgqjT7U<DRK
zsl}sEv>*PZ7FbdbwGRcG$2&?RJX<YLwm{F;_Fd}sXK%)H+XvO{gX{i0+kTJb?y_8t
z?N-@th3(EW!4HpLI{v}r<;k_lTGj$K%wM;HEx-;qo9Px4`f&2nq|$oe`gtG_Z`JF+
zx8=3T95bmhlL~`8FHc>2PU#)~>gii=ezE_{{g8y1V@6bFM5&6uLMS+~F-ZL4qS%&e
zzFe?J4fZIWo}xKAa{Jludv5pT{HIj^DaCP0LdW1ghFXRWP+uSL4L95W%QfU44%zR7
zoRG1=e#1ol4fgNHg#9&k>UCP|^HS!W&AeAz7ZB{!wzAQZPRYh1rl{Ix2!JFS1;-~9
zdnHYQfy16ug-XMPyK>Ypl;-`qyjR0guGp=?j7>d)bnXX8X9CV;A*-bGJd$+YN>d1C
z+cb9f=TD3=dK|@2G{&ZPH|k1d=3m}Ndgd=0W9KGQDS>4q4IVI(0gI9R{~6=1vP^s(
z=#H@oZ3eCKfSb;mjc#CCj){2iK&)ui-rwIplWj#W0f3TNZF`}9W@)KZf2>p$o>jUK
zB{MC9y-Su}5T5}-#b<&1<|g(TOft$&5LP%;VQq<t6$h~VIV1;wXb!aQnv;lEHnHOK
zSfLNe3rG$kIfMiOvF=zLhEz=hN<<XIaVQ_dI_Dp1Ky&WSf-UGB*lO!l+xFe;$+hiQ
z+xD-W$Tu`yIar{)fpL0^ZMy3J$ggxfcYO?q9&_w~$_^;(05Pv!ciFBS+oQ5Q3fq(C
zde`k&0$Xg0%5odc%I?t|JEpQ@3W+~FoSW5Hb5Gun8`|-SOA{X)zkGZR{z@i$04=so
z9@k#)|7-ka*NwT&Ii(j&_Wm66oXR|>RK=3L9zb*Lp_s<?$?FZ9O^SbS&c9dn?^PUo
ziFy9>Ff+W5y0gzW%GmF`FytO}+rM=?A!9Mmh^+{Md>xF|A7Gws;(05ElqO`8;jHaA
z>1G#j6KG7?K>-970O^Wh(ZG$c=&KzgW2wSv06InnW~_FMpww`i9!WZ4b{|7JkJVUM
zk>o?AqZSQQUfbyMUfySIVZ$^|rSYnCGtq682!dQR%qL=1a0AWrV>(qSbK)6do&)BQ
zL)2U~UnT=uHl9`9f@8(85h`;pr_B6Us*t`#8w^Jnw4u&A8Z@;|r=JF|U{{$lY(!^Q
zotB;&`c$q3x)UTlWo7g{i($oS?PtxNn`XeGsr3)xRNGf@zT-^a1z!Pv!AC%QTnvxg
zkI*07kA~mfkF?Q`{!%X}3i|Q-Bh5$SqxFN|w%Jsv1r~iVW*hXS`FHmP{WmfvhX3{$
zb|>6oh75f}vJ5vHhz;ZnhnE;!@y>+1kdPO+L|S){bVLzGERkB4WbT~6iOcCULV?nI
zGMx68UY5#0Ap7ito5(D~A?89XofeYZu@MeV9`&}44woM$Bra__>lFBY?sQU!Ndl)I
zr*QIuK;E*PhW2ajVqY{W8=5hR$IXeE6qnsql<a=JC=0`2FH2HpJ1x9m&;VeW4_vby
z`W;j0RF-&$1~USivfFA@8RW7}FD<9#L`vW)-WdU<&9=Ur7T#Kd%M+L_YxxX;VcAe+
zg+VUdQi;RL=*xW}CgK$8$cvyX17K;sVt4WOpa)vl?BE?ER1*_Rnj;-c3F0U`F2g#l
zp4@?<8o)glxpyN+Wt#6yEV(QYgh)`F#uPiLKSGEXc2)YyjD^n;Y-tFH<N`u`X8i&~
zJdGtt&SL3*gLn5}Z<&C-4(~8sM0fVUK?HYoAJr+HXTF~U0x`$Vs_d-7&H{kDQg`iw
zvTHiW&Zz8+!p>|pcWy8@r$0ZVG#|({A5fbQDC~j115`W&$IvEbQDycur85dK$G)Mm
zZz${=2DfC6O{r{3VN<oawReAf;9mQlyX||fAG;~$+6UG4!F%mT?zSJvwI5a6kFHJT
z8#)UV9XOotJalvT^9iN%5X5!n2XM|$Tson&%-`M*1mkQ(ofY(Sj#*Hd1%+9tLb^=z
zJtlmY319Eo?7!8QW5!ixTw%t`2Lt0dW<q5q6lMYvzy1(xMSwX*4hBlp0Gh{dxs=x9
z5WnrY9s7F6H#_uPjya(+Clm$`C-tL&k*|ht(_f5zIi~cEK+G|tDl@87MTDAL!S*tw
zB`Kr1k(<!K2t<P$$r;>?<{kst7EeBgNe4^RXmR}J8Krd`;#bn`eP5ja63#&|r@V9q
z4?t#BW>#Tljb?|wYPj{{7foL_DZN7wbIehdIjU4e>?Iz643h(p`ygsu0)HN=8{I*D
z{WSTxV>{Xnxo>y)jyKuA-8&Q-ciX>n2O#rZ<4|Z~kNx{SnE8HSsPTBc{crV7$i#t(
z5diCw@DoCztCT=RXr7ALcsgR|ZFmo?c_uO`a_yb<E<lPLs7>8)Xr5>ktw1!Y`J&NO
zhF?x%nu$i=T#hA+B>~)A@Y<YIy+M&H6ms(@z6|XV@-8GK1X34`zkFlo#gq7_*T<@l
zDYSR!9BeFjS)cXAFsX|zp21dMMS|x8x+Je*3dwu$UnL1=mIP}(rX+qa^fGLsL>2}%
zD9k)SnkY(x<X>w^(`}Z9R7Kltxmh)QsXlVl1%8m}ZgrzH-|$vB@D(3qz>Vs|->LAE
z;C}q!?^GOUfj98*cPjAxssnr%JRWnc*nq-y5l{~v+3?;^ynyD6V=utbJ}mvjw&Ij=
z-zbLiQJv+f@!mYm`{C#Z@}C*c9^eHAst}(Ujn(l%I4g%yFME{J6nF(D&jV2Cp;ea!
zCmNn1;6(O;{QZ{eGncg`z8<d8EN#ba<QBm7j%ylk1K_uO3lI)XiKk$U;5ZvUWWnoP
z@;!}s3?60=`t)s=<EDfQc<qdOjG!h3;OAT_AxUr|K4?@j5>sF!0NAj`gHdD-PeR6%
zX}ukI)@D3AsUwIo!>rdR%hnaw6gLLV4{~F08yJ`au2CtG1T>a>JG<+Z%(7TQqufGF
z0>mn$5#U;}S{H#RGugqJ1wj<J3s5nZE`lqBGYAdeHnB2*r!2nB#pYv)bbr{U-v}ap
zf?GsfkK#!r=-`Uz$!ejI(XpYICugE#FP%CW9X&a8Y*O<Njhs9-rDse>U+BSAoO*@b
zIyl0)5o1WsA;DSE0%WQTyfp;RBy=*0bESXe(NLVND9%=t%$6+9L#;KeJ`W0Vkt(=4
zokMVi&{X=uW5bmT?o@+2;ii#ozQXAD2OG^fHmtJYHD^B5dZq7PsQYfHd*k_B=qWYy
z)SA2I!-C7x$`s&4zp>!P6ote?)i)KqM%G6)v=#hDwvO`E7lK9>-&hO$(nNVfd1eRP
z>N7ha=9yN4Pj+qvwyA+Gh3U?>br$?CukS|+$j?X$NPb}{Z@ubixz?<7Pv$%)RnJMq
za}p56wO6h?l#Zuz!G1N^uXy@@{lVV|*aF7EOt(Dj<+}9?3U@Z=c}?}arg&b1cdt9Y
zvfmo|!u6#~={O8A7d)Z{k0_qXSlrfuC!{3&`r*A{&#<4m<M)j;*zat6dZf<&jfaNx
zH+4>+;oTa`FUHdInSN;@Bg*k*St4Ii=x3j3khHpD1)NqfagJyYe4~+pt13zV7zp<O
z&56@3>G#;=`yX=2<;FWJP;0HR$VLC)YF<bSVj?c$Avs)B=@Q^KYa(i-ArpL@CiLS1
zCfaRO1WD#}RqwEHHNIw(V8;VqEb_W<75pSlMB}M77r89UiKNtD<|3lm)V$z{Op=>7
zaTfCAD4ARa>Ru;0_~e3}+@g__VBJk1kb~^@Waq>cP=N)0^BmBT%pq|ZN?~PC(h=B3
z3wD~O^VAXL{xMJWDAt&#!b+`}r#QtL^HjTHjd`l>BKgZxPbt=zr+O7@%u_oQYpm78
zL4~r!JoT(%jd|)B#Tx(aZCh(ry=~V9a^7Cm+k4SfaM<VxTpwlXanbOVmqAz`eHJR1
zXp5gbG10a<`ZUxrQLd5RSD*~i*M(VwjKT18;P6zDwUr<7>CfdN7fp9z%}TP)V9hS9
zSuBE@Jy^4ntoLEf9;{g`a#6M>h2FM)etjWFcdB$}o(>dj9F2wo>5q2GR`-4f{%}xQ
MaFmPm3IuKbA7~fZ4*&oF

diff --git a/bot_manager/__pycache__/views.cpython-313.pyc b/bot_manager/__pycache__/views.cpython-313.pyc
deleted file mode 100644
index 60526db3351b49c994452f80fb9b67afdea75eba..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 4049
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

diff --git a/bot_manager/__pycache__/views.cpython-39.pyc b/bot_manager/__pycache__/views.cpython-39.pyc
deleted file mode 100644
index 632c5fd4a206b582fff7e6da401d0b398287b923..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 4240
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
NEX#7Ns#Ukv{s$6V13~}*

diff --git a/bot_manager/migrations/__pycache__/0001_initial.cpython-311.pyc b/bot_manager/migrations/__pycache__/0001_initial.cpython-311.pyc
deleted file mode 100644
index 154829dc6a852cd7b116cef5bb066d7a844d7a86..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2093
zcmcIl%}?V-6dya^CO{HCmSjsz(Xxy8kcF@-0oztUXiz_P4~0{NWI35ha5k}1$Dzxf
zI8;@Sdn?BtDyj+&d*s+Z!I6B3=Co1|D{e+`+Ed@yG0=rW)m6v#^Lu`8{NC^9H{;(2
z2L%LU^QXWL7e(kVX80r2SI*Z#`2}Hwxdtk6aOWF*Gf)aNgQXycc(j3V;75dmBvAL~
zpu+${M{s$g6vEsll0v7<d@k`+XsR_sF;!h_({NMAq|vVQW8GV#Z=6?omYcYFOFZUE
zff_0Wc|=0>us;FwH~>!~bwJ<^%)t@Fq2usj5bA)-8&w`h+{l>!1V@i!haAMfbr~c4
zi<kj7#$}Jq!@=YDjrR<?F$4V<1AoUuH)4iw#3Vk9sfCY|hrq)TT;6~=*YT%50{_S@
z_($EE;(oS6P>y^90f%F*{|Y<z|6#}DZmvN;JsGMG`+7Zcsrmha>Pi0@zJn)@)Bo(l
zDqo9y$YqT$rEmti^Dd1&^Sg43#@2MRplemNMtKz%DgV{F6r^#bW9o9nAc{#a9cUS9
zQ!)1B7i5pd+Qd+mhWd)o_%1QZdYj0a(j+v<<SB-_Bn}#1c_}xDRx@{K$kbmDjmFfr
ztW->Omw-QlNmc1IOe*w~$chP%y}X+KgREdog-#2z0z6;TtqFV*Zwx^e8m_9Of!kDY
zAvBwchEMa%F@Q<CVyG>)?x+B1iKdhr03=Y>O&YD}ZfyJ27??6lQ)<M>fnITWkODNO
zYci}=Vgg2kG~60ojJ&Bomqut*b|K3$6=WHfb*Di<kIVA+9i_nn!HTGwY64L-j!BDX
zm}nK1v<<db(1C)>>@&6@7;M$j_?lW<1<s2M5{(sh6vI>FYr5Vbiso5^>rl&<+9dtB
zE%MUzRH3LFM6GGxz$Xghx}w!|%HuMPx;PjSk;3X`VRijWD(EfJ-<1A9=a3z}|9pLU
zyJhHgQZctT^$L_N7dmCKeT|^)tF3H%Zf<T~?&Hg~_6)W~xq@|S`yK2t`<KVtq167y
z+mW&TZ=EoTi9ZW=G}}vl0>)UnH~Qdp(H?!!n~{3=W_#02ablsd@iPSCf(a)SO{Sa_
zN=;a4>0sPWOK&!<^insyWT%&`#Bwh=VPzg3+_y6i-&Cy3ayPSVXO^wRQ^;Xu=MSoO
zcK&3>%C2;?D|U9pO04#hla{z}uxpD8e~wyWu`3pBv1lbWt~pM&EOD(XuG!+6l_)rq
z!=pn^C>0aV5QqyVocmW`CO-nqcUF3_n_jfji&kQ(m&{sIbH9e|sk!b{-k!=^i3PW+
zJS#VU^4Jnry5fp0{x=+NM}hGf#`sKcdiFQTp3d9TPwnYKZ{|_&Zr+Im8S@}6m~cW7
zU|zh#pl29#5Eo21(xX&(|7&&_kNqz%g=yMryBsd(ykA|;?>!?2VKjE>cUOVi_+INQ
zu(!CcdIH+}=x5%V`odTQll`&UWe`q)<2az2`_w{H-q}O5)@`Q~e!_(vbW^+*?8Ln@
L=D4`U>(=l$Ha#J#

diff --git a/bot_manager/migrations/__pycache__/0001_initial.cpython-313.pyc b/bot_manager/migrations/__pycache__/0001_initial.cpython-313.pyc
deleted file mode 100644
index aa05bb6d81e9fcd905d0af1405472e92e436cbf7..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1997
zcmb_d&2Jh<6yIH7fi<=PgJXzoTxuuY9Q=V}HP~%c8`n|orU%AHq|w5T@g}fKXBRh)
zdazU}=UyuL*q*B1a`dr(0?-3!E{)WaZ&+^ceX|R#rI3C|S&5nV-u&jh_j~hZxEUW;
z1o+TP--#F!gx|O_`~m~vW*>y_1SBBwP@p2r(xG(VqrL+_^)CoBLRLV&w1E62U(xk8
zbl}aKK5wRhs;CC8xblT6F{N%)spc4#X*0QQ>7-^?JfJtm2FlIX5|3VTBU1^9)Q2SM
zUlnMeBo`-cZ}DWF4dfCk#z(G6NJ0T5qhQ|uP(mTVB}U@HNXd(U82eX51Q63BeFV_B
z>tg~CGb0fansgD-e?Y`IVpT@*y!2MaQ}2LrV!${Fxui#ByE!mIRi@v{S$cPz(H)2~
zJ1UdXWO3n5doen~mK|YReA9+zPzt5<KB#n%S9(>VQ|K;DRA<#W7Jf49)vF+EJ!0Wq
z%PCmqu~B7`q3<*4vpv<%B3je2aD@`hAvzmtP@}HVGyII4v9L|3q1B8RghfsXEn7Ch
zrdB7+&&Mkrys9GH3GF$q5wq%?uz+JdBPI(QHr6VRaY|r4sFP!@S#y{&2!b^S%wAm6
z`U-2h&Xi_D=LvXgAvY&jQzbeHQJ8#ekeY5Y#idZMYo>mc;|pUtu`ASQ@GHp_2un<@
zTmvG$vgNQ)#d5LsizKKRwrN#DS3s_~bx?gQY?&CYF>!z+B{eq(m!srZKf#?(vJiGj
zW6Ttc;m$W}1mp<DUpBQGhk`bV@v%W|r)HSMw7?KFOv8cNv4~C@#MFsdF^En1tHQ<#
zZn2;6=Y#sWC9-Q&ci<TIIZGBUoM_Y&BfFMWBbw=H<9m?akx?fD+!1;1c%rgzQDRih
zLpU{Af2x^Pi%EK!g<NX9Ho?LUD(vii$`q?XhEG@$W7~n}tO8|ss8Mb@#KxGu4>{ey
zPhcPIZIv3-dP*uz30V~&gbU3wDc!1O>F+18w6?akjt9(F8fR1nAMU^#&^{Lh;id3;
zB7Xk(^;Giw^S&&Er@Eo}PH4Utn*}YI>Lt?M#Qjd<es4+bEiU)6T(}MglGFV_C>HO>
zh4{?HbT_4TQtB(zPUTzCtzK;A;$AoXpp$;^s?ttxwW8bL?&7#RzuuW&zg%k1f6|KX
z^kQ=tr`^m(C$sT$qMg}qMIYZXT^_YFyRB%UKR20}xDLd_O8?%i<mUc=a>aJ)Q7fA7
z#pb`4y9;Zbg|%N6a;@mbAZV_W$z48dXa0L?uM=K%mO6>0UUvCM^#`?^&9$?+Zg#t!
z-R@=!?QEg9wA#CyyAJw!!Gch*%pJ}r4Sdwqxctol{a|<`s?1Ver>yAZ74N@nW!Nrs
zou7XAuXVR^-Cp(1ly`{d>JbNqKJ@Oz$8;N1IA+1lz|i-JqIe?<;(Nae%fHK;qWrDW
PjV`vMi+>29xDNgV`%~ux

diff --git a/bot_manager/migrations/__pycache__/0001_initial.cpython-39.pyc b/bot_manager/migrations/__pycache__/0001_initial.cpython-39.pyc
deleted file mode 100644
index 812ba6573ac1b529e3f064a7ae8d41b877906ad6..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1212
zcmah|&u`R56t>6S^^bUyKuTNaU$9cO3LFt2k`1X4f=hBhtCdExelN}#+p~<lK)8Z>
z%m2_G`IqL}Q>0$X5f#)o<D~=%wKMYbeDmJZ_r5nXVl+xU8b`kdr+(~te^_vNgaq!>
z*G|ZQ2Y%(veEPGB)xj*N!&&HizjzQp_|}6EgL3dDm<_-`^2UP;%JH6znMrF|Xwga4
zv}RZ<z^cuy@AB9paG$>R0~vHIGY0-FD7;ySgK`KA0*uNSe3~H)V0a#$Fo<X`ff$l=
zpHTW0+8~rtZ039;LK~F3>Co01ZCg|f;mSF4ELZ=7WoOOu9Y()pzk9@Y%`y1@&j8<3
z<Ony*tuiXN%Pa5${0P_21LBS>cfn>?;Rbc>CzCw>+^u7i?5l37niE+VCgISqhX>=(
zWMb7Ro@*2xg4tMVSqpu}pW&HFTGUch@->?51?q)rkvF176Iy!#)ZDR82O?ha3Y(%k
zHG@t)!^R}C<s$Fo3nYI8cp_F+XVNtZ7aeW)yp4Lv1%OFcORxp>zSz}7zA@7ov6$hB
z#0pxIItg_x8o0P+9UFjcuI19+2a^&lHeykckYJ%Y6X(jswy&=d<dh}~)Dv3gt`FnD
zB&y+bhp;1!8Y@?W)5tpYWV~Zy?j&<=QqJkRttzB-#`*J=sB9piNH(&gMwtw7i49<r
zOKdfB1x{UOAKQzn1G|&$%VLjuerP3`WO^!ezs&ZPs!%jN8XZtA$FjzC+%dlD`ek~k
zG|HlRL`O7)QZ$7!3>GGKI&34N>E6+F@8E$+)e_f_<(;Q*61_7Y?jGEpFSRN$@8(A;
zr`q{+wZQqMF3rEZv-$4s?oGZHIa!`*`;sI2+NWe<7P2r1eHJjEY(M`FKe1%fU(fgK
zQ@Hc(h_sJkHaE4oA1U)MivQEGjEClWFL45kN&nm@pLOb=iQXjt`d!CelU?o?z5U8v
TnD|bAi1+MSv{p#$ZwLPX0fAbF

diff --git a/bot_manager/migrations/__pycache__/0002_botconfig_channel_id.cpython-311.pyc b/bot_manager/migrations/__pycache__/0002_botconfig_channel_id.cpython-311.pyc
deleted file mode 100644
index e3192533a4b7e70c58b0dba1007a320755de4fed..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 882
zcmZuuzi-n(6uz?^$2Ki$Lj@usQWRCFUaG)|Dg<f;qJj#kh{1|D9N)!p@Q+|SQen!#
zfW*?R{{aZmKZYSgbSqOgN6FNQcW#_g6`%e2efQqI`|i6RtE&cr=k+(aw=N;{N08zv
zErQt&1Sg0hihUGd3kQ-VVI-mFh)Q1&l^O2K#iH*J{aP|hrph5QOJ^c&O56xMH?~tR
z3KOmd5oLbj6f4DFUy#{52u=_~7N*FOD0Z<WONc4`LKJLG#f;i7FV-Nc&=OTo%U30w
zYF9aQ(x?ui46eT_)PS@bohT)N9ojC7`AVzRdO*C;OFi4?I;5N^?0POYoSq$q%qJdw
z^Lca6OPnaCjm2c+#a^Qu#f_9DX(M1s0=<&64bW%GywvgS@B`O-%pZ`H9i?D~eMEc~
zx@iycMs5cQ?SOG5$5Pj0K0PpXu91A65N;3xbwi&)yh6ywq3w%W!6+NBkh0M6SQ3jH
z;M!A4pNSr^BB;LGv*Vm|BO0*9J^Vy7Vc_}x-lO&)j{3|=+lP?@=O(+u4r~8oOZ)Qn
z+F;N_vh;;q+Oj?P6syoM2N5Li0Y=M_sYu_-WNAYkz03@x-}`Eewc6xPbFyBaRGP>4
z$Cc*fc6CyHGO5+GvU2O@6amZyWMxe^rU+mzAd`)XI@%W_t`=J!m<rcv-wxeqn|5*|
z^5b8Kx+}`^+8RXX+RlZWkK;N}3}5mVAd@l1AQYRw(bn}hQ`fMXq3dvLjMp}&A~F9@
HHsALz4rt}w

diff --git a/bot_manager/migrations/__pycache__/0002_botconfig_channel_id.cpython-39.pyc b/bot_manager/migrations/__pycache__/0002_botconfig_channel_id.cpython-39.pyc
deleted file mode 100644
index 04d3d238a09add8ba5b16fa493777e0652ed9dc8..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 656
zcmYjO&ui2`6rN-z+a$K2AnGv(5ppT3M-i!XQ4}mfJ%zw9oA)-Em`t{rEL5+0ll~$8
zOLO(qe?chqC0pHn!~2+TzQ_AD>gXtDWS@TW>VePL?~&}AAaX)(pAi59uVJm1d99!M
z9(%{Y2mXTrN3Z7JdB#DUvoyG-SeE)OZgttKL3hTwS=#|Nwiu;-3yGYN+c^QU%mbGB
z;FVs+QPja$0B7|92nb*X2Ui@zD^6+%5tWKv^zmN}DtK?%4YE~6mDsz(`F#FdYNH3O
znk*uz=*&u&E-or%3^r23=WkCJ+7?|8$=ze}evz!YJ{iysNsHD}E_?lunoGG0mW?uB
zTvTDRmIGc6G@`nc4VrSONROu>rBN+9F=4RM*uYsDxlm5;Qo2}5irX|u_d_W!HmVt8
zM+Ue?18543wx|DKE_?&<cFfW9kw&ML>L>2vZjE=_{l)r6q)zbX!{TMW?z<X`AwTa5
z8eX1mmYDDDCf|KbPFs2*|1U@Gc5}S`+K=BqBezcoLhj#+KzKf#E&4a&M%+$OXQ^-z
j)XJ3IF)XLvr;aCa*WLE^n6kO>)piT7$HDA4?0x<h=s>f4

diff --git a/bot_manager/migrations/__pycache__/__init__.cpython-311.pyc b/bot_manager/migrations/__pycache__/__init__.cpython-311.pyc
deleted file mode 100644
index 6f775b6ce1a6e2f0038ac46aa64c2bf9e3a788a4..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 166
zcmZ3^%ge<81i@|086f&Gh=2h`DC095kTIPhg&~+hlhJP_LlF~@{~09t%hJUvrl2T4
zD>b<!COAJiGchOLxil#?CMmxpJ~uHhF+H^?CO0#^D6u3nKd(3@K0Y%qvm`!Vub}c5
khfQvNN@-52T@fqLB#>Rj{6OLZGb1D82L>2X#0(Sz0MIxmzyJUM

diff --git a/bot_manager/migrations/__pycache__/__init__.cpython-313.pyc b/bot_manager/migrations/__pycache__/__init__.cpython-313.pyc
deleted file mode 100644
index 1e6c0121d0aa62d62d838165fba466f0aadbf9b7..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 154
zcmey&%ge<81i@|086f&Gh=2h`DC08=kTI1Zok5e)ZzV$!6Oi{ABz4Qu#VV$tC_gJT
zxg;hyKRGioC*HX<DK#c3za&04F)uMawJ0VxGrcIWBr`v+I3_+mGcU6wK3=b&@)n0p
dZhlH>PO4oIE6^m6O~oL_M`lJw#v*1Q3ji_fC5Zq4

diff --git a/bot_manager/migrations/__pycache__/__init__.cpython-39.pyc b/bot_manager/migrations/__pycache__/__init__.cpython-39.pyc
deleted file mode 100644
index c0375a92539d6956a8ca56ee635138c27ac9622d..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 148
zcmYe~<>g`kg5Wmh3=sVoL?8o3AjbiSi&=m~3PUi1CZpd<h9ZzKg7{_WVii+Rl%JKF
zToMzUpPZSP6YpG_lp2$iUlO02n3tHIS`?F;nO>Awl9``Z91|a(nU`4-AFo$Xd5gm)
RH$SB`C)EyQ<Yype006a{BOCw#

diff --git a/bot_manager/templatetags/__pycache__/__init__.cpython-311.pyc b/bot_manager/templatetags/__pycache__/__init__.cpython-311.pyc
deleted file mode 100644
index 0dfe8922bab6d3974c3eb4f3bb7c0cb4e211a760..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 168
zcmZ3^%ge<81UJ_(XD|Zk#~=<2fCNC`GaHbY&XB?o%%I8Wx00cV2_y)T`DN{56;n`@
zpOu<i5)+)CoSB#t?_8Rc8k3Y?5}%uxmzbVf6jPF#Tac4jl3J3OUK|r2pP83g5+AQu
nQ2C3)CO1E&G$+-rh!toS$hKmBAn}2jk&*EO1B@tQ28sayp%p1T

diff --git a/bot_manager/templatetags/__pycache__/bot_manager_filters.cpython-311.pyc b/bot_manager/templatetags/__pycache__/bot_manager_filters.cpython-311.pyc
deleted file mode 100644
index 70af1e9fa3a33a0e81abfcee3a26ad5a57f1798a..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 721
zcmZ8eL2DC16n?XljY+p9B#M_%U8{%grN<&7UTQs65u!p%AWX88beG-iGCQ%R<WQuC
z2p+r@!Gc~YQm_6C4=MCe1_}jF-Xgh#o_w2hW8!1?<GuI2_w6@3Ul$hU0ORL(x}7Ef
zzv3bZ?J5~O$K(KPu!#pg*&+lq;KWUMI70q7*@7*~shdhlTigGi*KJw?EA=}bv53k@
z?uQ<eyfzU;A{L<d4g|shWI>|6Bsy?})$yb=!;x8TR|hD;U651ia$*mluH6HXBCv_a
zE5Q!Dp_{NnENyq`Y0HyN=(SC`&CS=$YjLwWE|_SveBP7_EUNUn7ci;jUd0pZLIgr(
zU$nz<YH3OzttyI3QS8AqFP}VqP!2`l@|rA{f||p;%37<+%hf<ueAZ+QF3QPYk*pC-
z6P3E-NiL$5u&pxwl|?a+!gx@K))DrgpQd`@Ja^;6%XgjkokRY4?W6n2J;^QiGRwpB
z`J0E?p0U&iq8I+bSuWodUD2o59S(<4Ecy1<9r%)8r9a3jeP*Rq+ICs95s3I^)U^$#
zDwseUf;XH9O{w(Q+{n&17~m8L1K~3B&=2gE#~+F7SjHC@Z6M&s2swjdZ}zz`irxFC
iM)Aa0JT(^gG8ZJff4i^g1nnaHp`hib8>6l$px|GeFsyn2

diff --git a/config/settings_base.py b/config/settings_base.py
index 8590751..e7fa0b8 100644
--- a/config/settings_base.py
+++ b/config/settings_base.py
@@ -37,6 +37,10 @@ THIRD_PARTY_APPS = [
     'crispy_bootstrap5',
     'corsheaders',
     'rest_framework',
+    'allauth',
+    'allauth.account',
+    'allauth.socialaccount',
+    'allauth.socialaccount.providers.discord',
 ]
 
 # Project apps
@@ -60,6 +64,7 @@ MIDDLEWARE = [
     'django.contrib.auth.middleware.AuthenticationMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
     'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    'allauth.account.middleware.AccountMiddleware',  # Django-allauth middleware
 ]
 
 # URL configuration
@@ -79,7 +84,7 @@ TEMPLATES = [
         'OPTIONS': {
             'context_processors': [
                 'django.template.context_processors.debug',
-                'django.template.context_processors.request',
+                'django.template.context_processors.request',  # Required by allauth
                 'django.contrib.auth.context_processors.auth',
                 'django.contrib.messages.context_processors.messages',
             ],
@@ -129,10 +134,32 @@ CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
 CRISPY_TEMPLATE_PACK = "bootstrap5"
 
 # Discord OAuth2 base settings (without credentials)
-DISCORD_REDIRECT_URI = env('DISCORD_REDIRECT_URI', default='http://localhost:8000/oauth2/callback/')
+DISCORD_REDIRECT_URI = env('DISCORD_REDIRECT_URI', default='http://localhost:8000/accounts/discord/login/callback/')
+
+# Discord OAuth scope
+DISCORD_SCOPE = ['identify', 'email', 'guilds']
 
 # Authentication settings
-LOGIN_URL = 'dashboard:oauth2_login'
+AUTHENTICATION_BACKENDS = [
+    # Django default backend
+    'django.contrib.auth.backends.ModelBackend',
+    # Django-allauth backend
+    'allauth.account.auth_backends.AuthenticationBackend',
+]
+
+# Django-allauth settings
+ACCOUNT_EMAIL_VERIFICATION = 'none'
+ACCOUNT_LOGIN_METHODS = {'username'}
+ACCOUNT_SIGNUP_FIELDS = ['username*', 'password1*', 'password2*', 'email']
+SOCIALACCOUNT_AUTO_SIGNUP = True
+SOCIALACCOUNT_STORE_TOKENS = True
+
+# Discord OAuth2 settings
+DISCORD_CLIENT_ID = env('DISCORD_CLIENT_ID', default='')
+DISCORD_CLIENT_SECRET = env('DISCORD_CLIENT_SECRET', default='')
+
+# URLs
+LOGIN_URL = '/accounts/login/'
 LOGIN_REDIRECT_URL = 'dashboard:index'
 LOGOUT_REDIRECT_URL = 'dashboard:index'
 
diff --git a/dashboard/templates/dashboard/index.html b/dashboard/templates/dashboard/index.html
index 70a711c..e98714b 100644
--- a/dashboard/templates/dashboard/index.html
+++ b/dashboard/templates/dashboard/index.html
@@ -16,7 +16,7 @@
             <div class="text-center">
                 <h1 class="text-3xl font-bold mb-4">Discord Bot Dashboard</h1>
                 <p class="text-gray-600 mb-6">Login to manage your Discord bot settings and configurations.</p>
-                <a href="{% url 'dashboard:oauth2_login' %}" 
+                <a href="{% url 'account_login' %}" 
                    class="inline-block bg-indigo-500 text-white px-6 py-2 rounded-lg hover:bg-indigo-600 transition-colors">
                     Login with Discord
                 </a>
diff --git a/db.sqlite3 b/db.sqlite3
index 9eec8d1f568159400dd19ce28795799f34c8638e..24473540c7d0ebcf1c9a73ee4f8b0f9e4ff998b3 100644
GIT binary patch
literal 327680
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
I*p<Nl1=<9p00000

delta 9843
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

diff --git a/discord_manager/__pycache__/__init__.cpython-311.pyc b/discord_manager/__pycache__/__init__.cpython-311.pyc
deleted file mode 100644
index b583c0f19250df43bc64a70d02b6e2aa09d33095..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 159
zcmZ3^%ge<81PV>e8EioMF^B^Lj8MjBkj!+36oz01O-8?!3`I;p{%4TnFC!PLn1Z7G
ztkmR^nBe^6%*32{=hCFqn3T-o<ou$P_}s+2#PrmnnE3e2yv&mLc)fzkUmP~M`6;D2
dsdh!IKqEkw6!Qa#56p~=j2{?aL=iJk3;<YjB$5CC

diff --git a/discord_manager/__pycache__/__init__.cpython-313.pyc b/discord_manager/__pycache__/__init__.cpython-313.pyc
deleted file mode 100644
index 8fc450468ecc88ba4a9f157edcf951523fd9b741..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 147
zcmey&%ge<81PV>e8EioMF^B^Lj8MjB79e9PLpp;dqu)w~A|@d3Gf3)|k&9JKK~a8I
zYH~?TaDH-TVotnsX;NxTN@j6#eo;z%Zem_ydTLQje0*kJW=VX!UP0w84x8Nkl+v73
XyCPPg5g;pyL5z>gjEsy$%s>_Z+g>7D

diff --git a/discord_manager/__pycache__/__init__.cpython-39.pyc b/discord_manager/__pycache__/__init__.cpython-39.pyc
deleted file mode 100644
index b1098cbc7a1a82fde034bef0de9dbccf887e0d4c..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 141
zcmYe~<>g`k0)-~#3^pMB7{oyaj6jY95Erumi4=xl22Do4l?+87VFdBZ$i*tApeR2p
zHMt}vI6pZvF(=-+G$}PEC9^m=zbGX>H!&|UJ+&w%K0Y%qvm`!Vub}c4hfQvNN@-52
L9muTDK+FIDlsF&m

diff --git a/discord_manager/__pycache__/settings.cpython-311.pyc b/discord_manager/__pycache__/settings.cpython-311.pyc
deleted file mode 100644
index d972fe48fd470c58dbe4b63e7beb2ca180bc57e7..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 5023
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
Um4Tklb^;?2M>9zOx&j;PzsWf>kN^Mx

diff --git a/discord_manager/__pycache__/settings.cpython-313.pyc b/discord_manager/__pycache__/settings.cpython-313.pyc
deleted file mode 100644
index 4c56746282cd4f0a29827c868639e6e3084a9d84..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3129
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

diff --git a/discord_manager/__pycache__/settings.cpython-39.pyc b/discord_manager/__pycache__/settings.cpython-39.pyc
deleted file mode 100644
index afdb38f651c2bf8945131d3a31a32dc30aa8d1ae..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3449
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

diff --git a/discord_manager/__pycache__/urls.cpython-311.pyc b/discord_manager/__pycache__/urls.cpython-311.pyc
deleted file mode 100644
index 00cc6a55b1dabefae66d508256d94e173915be2c..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2468
zcmb7F%WoS+7~i$W@w<ubxNg!4ZD^_O;CR)PRNy{C(o(BH+av{KB5l{+iL=o@tl2fR
zmMZ0dP>w!Sf+ME@Y7ZRy4{+eNmiA!nl><WJU{p>$@y$L|r*e6WXFh-X&G-DxH@n}b
z(+LK~&%cCsf16^MU+F_I(mwP2Qix%`VI-!(NURi6ST)oLv6K%hVHGuy8fiq_XQWK2
z(MHteBT7t-H{vcor6km3BkA%{C8eetX_t>F$JFV@v^vw6Q8SH<nr&oRCd6PQ#et^x
zazQFmLP|bO9YP*YV0q){lWUa*8j+42vY-cRl3qL1n8mZ8mvk+racD0eXzm>kxCy>z
zK!4_CMu(vKBv5Ch%+u^)7$mT~;d;*j&AirTcA`xlXQks4cM9MwBAxiB>Hwv=LpaAL
zu)NWOQ-q46dxbzkF1Yo_L3SdL0Y4Y;Pv?(T?|Yz_QJeWd5BQS-KiNh)xyjH~J|%t)
z$CkLa@gdjJwH>+LC88<o8n>epPLhq5P9#AUHL;Be*CF~IZkg3YVrv(3_q#;th^C2&
zX58l#*)TbxcTH??;LYGno%=$@Um8{J2Dnmnf;m|Oud3(2qhQg%oPlvI!NJ%y&5lvy
zc}Z^>RcTMu+IkSKrK>#F_;;$yys3BOmcdhH9>N=Z;`#$o1z$!jaigoX+|=E$uG4c>
zZdH;vQR8H_qZ6~naXUm;IrX6+b~?V$OVia~_VsB6w1BY+!4!(!EftFuzph<f#T8By
zReZTf`C>V-rig~I)P%yMF|V)7LN|9Yp@~%8jDvJ;g0KIR4b`uThCrQ^%CBTp*IG(f
zlC?H~;Krk+(UT7Fsk^{%kO~|R)y1VUx8p-u^WgH1qe=k}lJs>eE-3#w+oqzoc>pko
zRHOpeZ?RlX{7!qe%sLTKQe~|iau7w_iTc{G6Em=BLNNyLQ-%qh)B-LopL<smf>s1U
zY6D9$flmDdASoj!Mj@iS6JKpYi@I!bP1j7(({XYD34IV~g9=8ssmi9q^dfvyH~AZo
zN*IcF;vEd_t6|OTMQBXEm-nHeh`M!Dsk}GkR=~qQ4aY-8^dB-qv|V~JKN{~ueXf@h
zJ2D@L34Oo!5RKiN0UBIDHv)JmbO_#&9|#iO5xa^hC~#Z4a6>5;aDTcgWGE0_H$N_)
za-xC&GC^>Tz0B1la+A;(qLUmuTY^ABBI9CO7ol$~r|{C+uhhezMCtBi97v4r&H9$K
zKaFY|YnaF_5~o|4@#5TlLO*&WNlA(lii8vOyW2^QT}THRvWXo;yV8lQUw{AJ2To#h
zYjvx>CP0rnNuS@ieS6D^e{_AlzUs;o9!tePGS9(1^P;+5+xA~J+nahz78PNw+r-<i
zy#KaosA}ioi`XSqm%0kRLKeZCe$I?PfR4f}%Z@_REE+MCyveW&7Q>CtA@i0sX%3I7
zfyt0rw2sap!&^t^kXf>h&LOjD{o5SHm`Hqo{UB?l7Y?@V^ul-TXL&1qb&$Sl14Y+t
zbZv-Ypi$@-`$cR1+#tJbXO{=)yp7I}BH`)KesYvz*wn$JgGZj`iT=vt+G8+2ZKKn^
z$jY7Rzh~#p4031f+}R&Kwb04{t=MSA+n=}crT*u3zBI@$+WEzw<}7q^fG*nTqPPEs
zHCM6D-?UJDfa*4?d(z|mLcd_my*<cO>`Y~VmTa^%Jhd=NM`uERGC=;K1UQx^Im@8b
zS64<%h`q}W(RBYp|H8K=dw%KJXZGd0R&HaE+pvM6js06=+m&ZG?Mt_<+?_%0jtvyu
S*}p}9qX_lmc_Sq_^}hiGo5DW;

diff --git a/discord_manager/__pycache__/urls.cpython-313.pyc b/discord_manager/__pycache__/urls.cpython-313.pyc
deleted file mode 100644
index 2219d30b154804263bd5610a4aea6fe5bffba0af..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1104
zcmb7D&ui2`6rN<0?lx<GAP64Eiev*d!D27LTBKTRD<WOROCZiBv%6E0OqiLdEnf5>
z^=1#!zrp`T=*e6>c=Fa#ygQRk=u!}L4#~^Qd*A!MZ)VQt<}4sr_d{#^tOdYN_0g<$
z9h|?D!57d64D_|WzN2mHOou9N?X<QHW^9|xgdi}MK;H=T-75{i#d~-DB5tBpeG*lD
zW?;(hnN@9)YyNpU>x|k?2Yr;q){EUIFrwLzj0%PXp&1-f24lh_%Hl9Z85&^*b4K@Y
zBwWjSKF07>!IB&afmz01!Gv%D87&0nP@-`tD11%u8}7nQ36)ZYA;~0aI>FBqj5vlI
zW8Z>ujfKd$?|CtexEt@GY($%J5luaud3W6vPtcr1+*8G#9M3)L(OZ;CEbd#IMHW@m
ztFaa69Tz@`V~8?H(ws8kLpWqKh3S5X^1Mz?Xjb(rb-hxc1WYNEty1i`XWPrQt}#vV
zGR#nl*K8Hrj<t~>&TkK-uy_jfZ!D-7W2T6>72}4^V~O=YY*f9Ac&I>n&Lu`$S(Fqp
z$wtzIYMzp&cDnIrt1<>kDsp>NE$%sRSX=2&?3!$cs|;^Q*0sx(DgVrNkkFAQ4QwXa
zDpBFuj${2&C)CkO6U8aX9KAG@<7K<9KA5TUUI`8s2UIktvTA?o%$Dsil!qq_%lVqG
zlqnb)FnRkx*_{%>44Gl3N*kOATpCJR*`3<%ui#w%2BrJZ59)Im^l3y;5^fX&99+5@
zfdX*z{jzf}rE!tq`)pCRt2@Wn<m0rZY1)~-pc%iHfOg{txOFxI%-O^1pI49lBma2)
iX#K>v`Q7LoUj6j)+co=Su6JTMr)FzGf8S;5ivIypYDRki

diff --git a/discord_manager/__pycache__/urls.cpython-39.pyc b/discord_manager/__pycache__/urls.cpython-39.pyc
deleted file mode 100644
index cabd8efdcc6d9f1509c177fe8d52298abe1b68c1..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1236
zcmb7D!EVz)5VajAPMoB)P^s5FAf-md78R!m5LKa~5~89F9IOa;<J}~Vyk2W}4Q;QL
zxb*}01b)d^PW%D_iCM=HQ6(hU$gA1O?3*`lc5uJ%8nEz}#{8{q7~k|^eYN2596osg
z8!<wIn8Zp=W`&li?MB*Qc4)I^*sRWW+G0-VRCY6MvrgEl>{jZsZrC*qY7>WAi{7Gt
zZP6xaQ)jV3I>fy(udSIyyR@^o1K%d;-dH<ExJ7zrhS$fREyHl%oxVmf&!)+&5LhKV
zLsKpgNo33gi5SlCj0%(szM!%4U3WC6=)4eVj+LS!ljkT+q(Xuhib@1%5-E;8CiIi^
z(Gfr~E+|SeKxIq(Jf&DtBq<%b2-aMwTn>YP@L2j}fwLK3rHeTWXcj#7_XEZAB$j~=
z4j{b@+?N-a0hS!PM@1G_)T^`==p!E;5Q1=q5|(qJh6qgsXNX-!IL~Y6l4cdZU&reT
zbOCD>!c{1CzB?G~)pgA|qkAaBj6NM`d*Hc;DVFl#1PUW-sDER@)tm}V#IG2y=)3}~
z|6!x!eJmplvg_SqbezR$L6U3+B2@WwX}Z%ZeU2+(5Kw{k=vcbzp=mAUa4FZa9ljQP
zMY4|Ft3>%{wv&|40uXSOX`mey?!fch?=T34XO>M&Sdw{GX=}wxN6<(c@K0|<q1jl`
z_fRXG+mb2;#YwPRQo+lLuUggZ;L85sKe&I@(arGZilq?JSM~KscTGFswH1tJDiWNl
zH{RXSi6ZbtQMgeT4O%IYOax4cQFhmq5DoAMm~125uH97|{Ta=uNMg}kzo8`;dgQ~M
zKfu$fbbm=)I6B^ziK3;gr7oSisik{1Iv5=vM$o#lTid56C!?~v_CUWH;vOJW+YkT6
za9oei_>9L1PNTzOLdUlzdaU#K`DNLD!Z;~X`pg6fxec4W)iXEEp8hp@*5)tE-uU?&
D6GVO#

diff --git a/discord_manager/__pycache__/wsgi.cpython-311.pyc b/discord_manager/__pycache__/wsgi.cpython-311.pyc
deleted file mode 100644
index da6c91af958eea1e47aca4b2d01021499358b3d1..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 697
zcmZ8f&ubGw6n?XtHoCPziY*?8(n~;hwRkEbh^ZlsriWCN5ZFw2UXl&7JIl@_wLKN_
zfAH$5Mf%UAQV{lHz>~K?Z#_BNG*J6y=FN{c@B6-a%<1y71IAXq*!@!i@F(BQt#Grr
z?3=|m;Lrk2xFtx7nAsLqWVdVrNCxwp@O@#Pe0$~vzHnjzoS88*0v4csVm4><BWNvh
zs|n@Bqu<WQX0=8G8F#}T?aGw$Pz5sOe#Bzd!;~he9AKbb$Ej(GpA)H2QQb#6OJqW@
zeSwrI%4j6{P~cO6BNTMR((pPIvj{oubXbyzFkm{Aai?SO-Ws+@rbxrs5J%SmDq{m4
zD%uSNKA{TH>1&;+EzjdJP%a;^xF_eD0vUN2doSEguP+a@^f)F$9!3~z??ClJ&-t4_
zxltzBqaJEMKl5+N$kr-5uN&1}zq!4)S8G(8{`=j^hj-gYkMC5$Rj73s_f)x<6@A}G
z@%_w_DtkB+<eHM9o5QEJA<T*xkHS>OnPU<;cG*zqZ0Q#B54g;gUAdL5_RVYBO&Nqt
z_-}^$*uKNx&Y|7p@ao>nS&d(%C6jJ`5vWhbO>IKR)GCs~6mqu$#5um7w+TES|KBHI
reRY1p>Q7i5uesxAJLgcpfchBflhXRQw0>UNxF~HLFXb(LV8H(YW%kYO

diff --git a/discord_manager/__pycache__/wsgi.cpython-313.pyc b/discord_manager/__pycache__/wsgi.cpython-313.pyc
deleted file mode 100644
index 5f13dddced782b8070efed4756101906574ff41e..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 651
zcmZ8fPiqrF6rb6RP1)EW#TJi4@e<J8D($6+Af|>SnnJhYC9s+7zHFw<&MY&N)b>^{
zegZ#(_-!f*!d_IwgEu8#z}Y6DrSCBF-aLMP-eYEKYaX(({>~kL#0dQ=i)B<6$!uto
z4=6+mg*bG&SYdm+U8mzJm!LjATwOx0?!($uzRbc(cx%_0R~F}Pq1{DGt)xz4<?Orn
zCTz7yEX9bWWF!?yn2x1NqKpcff+D$+#}FIe^V){M+gxhU#EgN=fs}JP<Upt<lw>lQ
zaCpdJ3Y<)-VwWvJGf2o_K=Yilm>MR<U|{)PShY+lAWT@{?6N_mu;fgW5##WHXaH|)
zOs@BWAd#{5lVd7Ux%3pvEC3Pg_>Y6JJTWpzAm{Ql17U&_owC6DQ;yqf;NoryCMw^e
zYc`6_X6IS2br6O7M@Q{mD~w(pG+)2mKf8Bh3%&+pm`HV_T2!ORT8W~<k-E4uH{{!u
zfnU-q*9sO@5L2e4C_D>HU_>X}6t!#0pU|vyR`|`m{$iSbC}T!>^n5ae{tf+pN$uyS
z#p;v!j-RT!h1>sw^tL_zx)|esP8C;X>j-<l(W4*8dGDQj-_XWqv~jWNUu<{2qVCW7
O)|dMI^P0MCLH_}^ZN6Rr

diff --git a/discord_manager/__pycache__/wsgi.cpython-39.pyc b/discord_manager/__pycache__/wsgi.cpython-39.pyc
deleted file mode 100644
index 582267c020becce52c51b9cb57e525cae2cc5896..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 560
zcmZ8f!EO^V5cTe+O;{*G2%#Q*jRd<0ajH-SA|(of^sq%pQ6$G*Pd1Lco|WySw8!>G
z;Dq=kUwYugFL1(}fE0Bkk2N06d(Y422L~w$@%TDf{D=to)fT(a3B{YR?2C{DnGg|)
zSVfa4?1_r&WRgS#qGjjXp6H0Z?{TP-8#37!aY6d~SGVbxVmP8D>bb1w91RuHmS_a4
zx#krZ+8A6y>9RB(ISOAJv|y=Q0NoC9rTDo5$}Q!zMzK=xT)`R?U2`KhEzN5XbT;En
zqh!gQL_M1Yy!U~vMgvspKwNJc6m<ZXmd>SuXVe0u3+Ebpl;;9Vn~5dY75>*$Vx5D|
zUu7@z1ztGJ1vCmTYtSygu$9cy-@z6#?nnMf1&+06Y)6KFI{5H*JUnH^$=TUxJS^C!
z)4}JDCs&7eT*xdqCv|1}UEgIaNMX#!X#JzDpe$GhSqpFCK<K-m*V3T&X&4kR=PTv>
z{T=3?#Iz5)Nq@4z(e&SyrUjOgEB0=64%0g#rY(NfT>9SYt<lHfM-bZ!sdKLvKZqa3
Fe*t!2uYv#o

diff --git a/docs/discord_app_setup.md b/docs/discord_app_setup.md
new file mode 100644
index 0000000..b95ce9e
--- /dev/null
+++ b/docs/discord_app_setup.md
@@ -0,0 +1,68 @@
+# Discord Application Setup Guide
+
+This guide will walk you through setting up a Discord application for OAuth2 authentication in Social Cube.
+
+## Creating a Discord Application
+
+1. Go to the [Discord Developer Portal](https://discord.com/developers/applications)
+2. Click the "New Application" button
+3. Enter a name for your application (e.g., "Social Cube")
+4. Accept the terms of service and click "Create"
+
+## Configuring OAuth2
+
+1. In your application dashboard, click on the "OAuth2" tab in the left sidebar
+2. Add the following redirect URL: `http://localhost:8000/accounts/discord/login/callback/`
+   - For production, you'll need to add your production URL as well
+3. Note down your "Client ID" and "Client Secret" - you'll need these for configuration
+
+## Required Scopes
+
+When setting up OAuth2, ensure your application requests the following scopes:
+
+- `identify` - Access to user's username, avatar, etc.
+- `email` - Access to user's email address
+- `guilds` - Access to list the servers the user is in
+
+## Bot Configuration (Optional)
+
+If you're also setting up a bot:
+
+1. Go to the "Bot" tab in the left sidebar
+2. Click "Add Bot"
+3. Configure your bot preferences
+4. Under "Privileged Gateway Intents", enable:
+   - SERVER MEMBERS INTENT
+   - MESSAGE CONTENT INTENT
+   - PRESENCE INTENT
+5. Save changes
+6. Note down your bot token - you'll need this for configuration
+
+## Setting Up Environment Variables
+
+1. Copy the `.env.example` file to `.env`
+2. Set the following variables:
+   ```
+   DISCORD_CLIENT_ID=your_client_id
+   DISCORD_CLIENT_SECRET=your_client_secret
+   DISCORD_REDIRECT_URI=http://localhost:8000/accounts/discord/login/callback/
+   DISCORD_BOT_TOKEN=your_bot_token (if using a bot)
+   ```
+
+## Running the Setup Script
+
+After configuring your Discord application and setting the environment variables, run:
+
+```bash
+python scripts/setup_discord_oauth.py
+```
+
+This will create the necessary database records for Discord OAuth2 authentication.
+
+## Testing the Authentication
+
+1. Start your Django development server
+2. Go to http://localhost:8000/
+3. Click "Login with Discord"
+4. You should be redirected to Discord's authorization page
+5. After authorizing, you should be redirected back to your application and logged in
\ No newline at end of file
diff --git a/manage.py b/manage.py
index 1fab618..d2b3fc1 100644
--- a/manage.py
+++ b/manage.py
@@ -6,7 +6,16 @@ import sys
 
 def main():
     """Run administrative tasks."""
-    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'social_cube.settings')
+    # Check for DJANGO_ENV environment variable to determine which settings to use
+    django_env = os.environ.get('DJANGO_ENV', 'development').lower()
+    
+    if django_env == 'production':
+        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_prod')
+    elif django_env == 'test':
+        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_test')
+    else:  # Default to development
+        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_dev')
+    
     try:
         from django.core.management import execute_from_command_line
     except ImportError as exc:
diff --git a/requirements.txt b/requirements.txt
index 535fd7f..1c43073 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -10,4 +10,6 @@ django-cors-headers>=4.3.1
 django-crispy-forms>=2.1
 crispy-bootstrap5>=2023.10
 gunicorn>=21.2.0
-cryptography>=42.0.7
\ No newline at end of file
+cryptography>=42.0.7
+django-allauth>=0.65.0
+requests>=2.32.0
\ No newline at end of file
diff --git a/scripts/setup_discord_oauth.py b/scripts/setup_discord_oauth.py
new file mode 100644
index 0000000..ecec81c
--- /dev/null
+++ b/scripts/setup_discord_oauth.py
@@ -0,0 +1,59 @@
+#!/usr/bin/env python
+"""
+Script to setup Discord OAuth2 configuration in the database.
+This creates a SocialApp record for the Django-allauth integration.
+"""
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.contrib.sites.models import Site
+
+# Add the project root to the path
+sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
+
+# Setup Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_dev')
+django.setup()
+
+def setup_discord_oauth():
+    """Configure Discord OAuth2 in the database."""
+    from allauth.socialaccount.models import SocialApp
+    
+    # Get the site
+    site, _ = Site.objects.get_or_create(pk=1)
+    site.domain = 'localhost:8000'
+    site.name = 'Social Cube'
+    site.save()
+    
+    # Get Discord credentials from environment
+    client_id = settings.DISCORD_CLIENT_ID
+    client_secret = settings.DISCORD_CLIENT_SECRET
+    
+    if not client_id or not client_secret:
+        print("Error: DISCORD_CLIENT_ID or DISCORD_CLIENT_SECRET environment variables are not set.")
+        print("Please set these variables in your .env file and try again.")
+        sys.exit(1)
+    
+    # Create or update the Discord SocialApp
+    social_app, created = SocialApp.objects.update_or_create(
+        provider='discord',
+        defaults={
+            'name': 'Discord',
+            'client_id': client_id,
+            'secret': client_secret,
+            'key': '',  # Discord doesn't use this field
+        }
+    )
+    
+    # Connect the SocialApp to the site
+    social_app.sites.add(site)
+    
+    if created:
+        print(f"Successfully created Discord OAuth2 configuration in the database.")
+    else:
+        print(f"Successfully updated Discord OAuth2 configuration in the database.")
+
+if __name__ == '__main__':
+    setup_discord_oauth()
\ No newline at end of file
diff --git a/social_cube/urls.py b/social_cube/urls.py
index 6e1b465..bdc865e 100644
--- a/social_cube/urls.py
+++ b/social_cube/urls.py
@@ -26,6 +26,7 @@ path('bots/', include(('bot_management.urls', 'bot_management'), namespace='bot_
 path('api/', include(('api.urls', 'api'), namespace='api')),
     
     # Authentication
+    path('accounts/', include('allauth.urls')),  # Django-allauth URLs
     path('auth/', include([
         path('discord/', include(('dashboard.auth_urls', 'discord_auth'), namespace='discord_auth')),
         path('accounts/', include('django.contrib.auth.urls')),
diff --git a/templates/account/login.html b/templates/account/login.html
new file mode 100644
index 0000000..68f0581
--- /dev/null
+++ b/templates/account/login.html
@@ -0,0 +1,115 @@
+{% extends 'dashboard/base.html' %}
+{% load i18n %}
+{% load account socialaccount %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-8">
+    <div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-8">
+        <div class="text-center">
+            <h1 class="text-3xl font-bold mb-4">{% trans "Sign In" %}</h1>
+            
+            <p class="text-gray-600 mb-6">
+                {% blocktrans %}Log in to your Social Cube account to manage your Discord bots.{% endblocktrans %}
+            </p>
+            
+            {% get_providers as socialaccount_providers %}
+            
+            {% if socialaccount_providers %}
+                <div class="socialaccount_providers mb-6">
+                    <p class="text-sm text-gray-500 mb-3">{% trans "Sign in with one of your existing accounts:" %}</p>
+                    
+                    <div class="flex flex-col space-y-3">
+                        {% for provider in socialaccount_providers %}
+                            {% if provider.id == "discord" %}
+                                <a href="{% provider_login_url provider.id process='login' %}" 
+                                   class="inline-block bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors flex items-center justify-center">
+                                    <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
+                                        <path d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286z" />
+                                    </svg>
+                                    {% trans "Sign in with Discord" %}
+                                </a>
+                            {% else %}
+                                <a href="{% provider_login_url provider.id process='login' %}" 
+                                   class="inline-block bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors">
+                                    {% trans "Sign in with" %} {{provider.name}}
+                                </a>
+                            {% endif %}
+                        {% endfor %}
+                    </div>
+                </div>
+            {% endif %}
+            
+            <div class="login-or py-3 border-t border-b border-gray-300 my-4">
+                <span class="block text-center text-sm text-gray-500 -mt-3 bg-white w-8 mx-auto">{% trans "or" %}</span>
+            </div>
+            
+            <form class="login space-y-4" method="POST" action="{% url 'account_login' %}">
+                {% csrf_token %}
+                
+                {% if form.errors %}
+                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
+                        <p class="font-bold">{% trans "Please correct the errors below:" %}</p>
+                        {{ form.non_field_errors }}
+                        {% for field in form %}
+                            {% if field.errors %}
+                                <p>{{ field.label }}: {{ field.errors|striptags }}</p>
+                            {% endif %}
+                        {% endfor %}
+                    </div>
+                {% endif %}
+                
+                <div>
+                    <label class="block text-sm font-medium text-gray-700 mb-1" for="id_login">
+                        {% trans "Username or Email:" %}
+                    </label>
+                    <input type="text" name="login" id="id_login" 
+                           class="w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" 
+                           required>
+                </div>
+                
+                <div>
+                    <label class="block text-sm font-medium text-gray-700 mb-1" for="id_password">
+                        {% trans "Password:" %}
+                    </label>
+                    <input type="password" name="password" id="id_password" 
+                           class="w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" 
+                           required>
+                </div>
+                
+                <div class="flex items-center">
+                    <input type="checkbox" name="remember" id="id_remember" 
+                           class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
+                    <label class="ml-2 block text-sm text-gray-700" for="id_remember">
+                        {% trans "Remember Me" %}
+                    </label>
+                </div>
+                
+                {% if redirect_field_value %}
+                    <input type="hidden" name="{{ redirect_field_name }}" value="{{ redirect_field_value }}" />
+                {% endif %}
+                
+                <div>
+                    <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors">
+                        {% trans "Sign In" %}
+                    </button>
+                </div>
+                
+                <div class="text-sm mt-3 text-center">
+                    <a class="text-indigo-600 hover:text-indigo-800" href="{% url 'account_reset_password' %}">
+                        {% trans "Forgot Password?" %}
+                    </a>
+                </div>
+            </form>
+            
+            <div class="text-center mt-6">
+                <p class="text-sm text-gray-600">
+                    {% trans "Don't have an account?" %}
+                    <a href="{% url 'account_signup' %}" class="text-indigo-600 hover:text-indigo-800">
+                        {% trans "Sign up" %}
+                    </a>
+                </p>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/templates/base.html b/templates/base.html
deleted file mode 100644
index 4adb6c6..0000000
--- a/templates/base.html
+++ /dev/null
@@ -1,168 +0,0 @@
-{% load static %}
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="Social Cube - Your All-in-One Discord Bot Management Dashboard">
-    <meta name="theme-color" content="#4F46E5">
-    <title>{% block title %}Social Cube{% endblock %}</title>
-    <script src="https://cdn.tailwindcss.com"></script>
-    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
-</head>
-<body class="bg-gray-50 min-h-screen flex flex-col">
-    <!-- CSRF Token for AJAX requests -->
-    {% csrf_token %}
-    
-    <nav class="bg-white shadow-sm border-b border-gray-200">
-        <div class="container mx-auto px-4">
-            <div class="flex justify-between items-center py-4">
-                <!-- Logo and Desktop Navigation -->
-                <div class="flex items-center space-x-8">
-                    <a href="{% url 'dashboard:index' %}" class="flex items-center space-x-2">
-                        <i class="fas fa-cube text-indigo-600 text-2xl"></i>
-                        <span class="text-xl font-bold text-gray-900">Social Cube</span>
-                    </button></form>
-                    {% if user.is_authenticated %}
-                    <nav class="hidden md:flex space-x-6">
-                        <a href="{% url 'dashboard:index' %}" class="text-gray-600 hover:text-indigo-600 {% if request.resolver_match.url_name == 'index' %}text-indigo-600{% endif %}">
-                            <i class="fas fa-home mr-1"></i>Dashboard
-                        </a>
-                        <a href="{% url 'dashboard:home' %}" class="text-gray-600 hover:text-indigo-600 {% if request.resolver_match.url_name == 'home' %}text-indigo-600{% endif %}">
-                            <i class="fas fa-server mr-1"></i>Servers
-                        </a>
-                        <a href="{% url 'dashboard:bot:list' %}" class="text-gray-600 hover:text-indigo-600 {% if 'bot' in request.resolver_match.namespaces %}text-indigo-600{% endif %}">
-                            <i class="fas fa-robot mr-1"></i>Bots
-                        </a>
-                        <a href="{% url 'dashboard:analytics:overview' %}" class="text-gray-600 hover:text-indigo-600 {% if 'analytics' in request.resolver_match.namespaces %}text-indigo-600{% endif %}">
-                            <i class="fas fa-chart-line mr-1"></i>Analytics
-                        </a>
-                    </nav>
-                    {% endif %}
-                </div>
-
-                <!-- User Menu (Desktop) -->
-                {% if user.is_authenticated %}
-                <div class="hidden md:flex items-center space-x-4">
-                    <a href="{% url 'dashboard:bot:add' %}" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors">
-                        <i class="fas fa-plus mr-1"></i>Add Bot
-                    </a>
-                    <div class="relative" x-data="{ open: false }">
-                        <button @click="open = !open" class="flex items-center space-x-2 text-gray-700 hover:text-indigo-600">
-                            <span class="text-sm font-medium">{{ user.username }}</span>
-                            <i class="fas fa-chevron-down text-xs"></i>
-                        </button>
-                        <div x-show="open" @click.away="open = false" class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2">
-                            <a href="{% url 'dashboard:home' %}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-indigo-50">
-                                <i class="fas fa-user mr-2"></i>Profile
-                            </a>
-                            <form method="post" action="{% url 'dashboard:logout' %}" class="block">{% csrf_token %}<button type="submit" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50">
-                                <i class="fas fa-sign-out-alt mr-2"></i>Logout
-                            </a>
-                        </div>
-                    </div>
-                </div>
-                {% else %}
-                <div class="hidden md:block">
-                    <a href="{% url 'dashboard:oauth2_login' %}" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors">
-                        <i class="fab fa-discord mr-1"></i>Login with Discord
-                    </a>
-                </div>
-                {% endif %}
-
-                <!-- Mobile Menu Button -->
-                <button type="button" onclick="toggleMobileMenu()" class="md:hidden text-gray-600 hover:text-indigo-600">
-                    <i class="fas fa-bars text-xl"></i>
-                </button>
-            </div>
-
-            <!-- Mobile Menu -->
-            <div id="mobileMenu" class="hidden md:hidden">
-                <nav class="py-4">
-                    {% if user.is_authenticated %}
-                    <a href="{% url 'dashboard:home' %}" class="block py-2 px-4 text-gray-600 hover:bg-indigo-50 hover:text-indigo-600 {% if request.resolver_match.url_name == 'home' %}text-indigo-600 bg-indigo-50{% endif %}">
-                        <i class="fas fa-home mr-2"></i>Dashboard
-                    </a>
-                    <a href="{% url 'dashboard:bot:list' %}" class="block py-2 px-4 text-gray-600 hover:bg-indigo-50 hover:text-indigo-600 {% if 'bot' in request.resolver_match.namespaces %}text-indigo-600 bg-indigo-50{% endif %}">
-                        <i class="fas fa-robot mr-2"></i>Bots
-                    </a>
-                    <a href="{% url 'dashboard:analytics:overview' %}" class="block py-2 px-4 text-gray-600 hover:bg-indigo-50 hover:text-indigo-600 {% if 'analytics' in request.resolver_match.namespaces %}text-indigo-600 bg-indigo-50{% endif %}">
-                        <i class="fas fa-chart-line mr-2"></i>Analytics
-                    </a>
-                    <a href="{% url 'dashboard:bot:add' %}" class="block py-2 px-4 text-indigo-600 hover:bg-indigo-50 {% if request.resolver_match.url_name == 'add' %}bg-indigo-50{% endif %}">
-                        <i class="fas fa-plus mr-2"></i>Add Bot
-                    </a>
-                    <hr class="my-2 border-gray-200">
-                    <a href="{% url 'logout' %}" class="block py-2 px-4 text-red-600 hover:bg-red-50">
-                        <i class="fas fa-sign-out-alt mr-2"></i>Logout
-                    </a>
-                    {% else %}
-                    <a href="{% url 'dashboard:oauth2_login' %}" class="block py-2 px-4 text-indigo-600 hover:bg-indigo-50">
-                        <i class="fab fa-discord mr-2"></i>Login with Discord
-                    </a>
-                    {% endif %}
-                </nav>
-            </div>
-        </div>
-    </nav>
-
-    <main class="flex-grow">
-        {% if messages %}
-        <div class="container mx-auto px-4 mt-4">
-            {% for message in messages %}
-            <div class="p-4 mb-4 rounded-lg {% if message.tags == 'success' %}bg-green-100 text-green-700{% elif message.tags == 'error' %}bg-red-100 text-red-700{% else %}bg-blue-100 text-blue-700{% endif %}">
-                {{ message }}
-            </div>
-            {% endfor %}
-        </div>
-        {% endif %}
-        
-        {% block content %}{% endblock %}
-    </main>
-
-    <footer class="bg-white border-t border-gray-200 mt-8 py-6">
-        <div class="container mx-auto px-4">
-            <div class="flex flex-col md:flex-row justify-between items-center">
-                <div class="flex items-center space-x-2 mb-4 md:mb-0">
-                    <i class="fas fa-cube text-indigo-600"></i>
-                    <span class="text-gray-600">&copy; 2024 Social Cube</span>
-                </div>
-                <div class="flex space-x-6">
-                    <a href="https://github.com" target="_blank" rel="noopener noreferrer" class="text-gray-600 hover:text-indigo-600">
-                        <i class="fab fa-github"></i>
-                    </a>
-                    <a href="https://discord.com" target="_blank" rel="noopener noreferrer" class="text-gray-600 hover:text-indigo-600">
-                        <i class="fab fa-discord"></i>
-                    </a>
-                </div>
-            </div>
-        </div>
-    </footer>
-
-    <script>
-    function toggleMobileMenu() {
-        const menu = document.getElementById('mobileMenu');
-        menu.classList.toggle('hidden');
-    }
-
-    // Add CSRF token to all AJAX requests
-    document.addEventListener('DOMContentLoaded', function() {
-        const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;
-        
-        // Add CSRF token to all fetch requests
-        const originalFetch = window.fetch;
-        window.fetch = function() {
-            let [resource, config] = arguments;
-            if(config === undefined) {
-                config = {};
-            }
-            if(config.headers === undefined) {
-                config.headers = {};
-            }
-            config.headers['X-CSRFToken'] = csrfToken;
-            return originalFetch(resource, config);
-        };
-    });
-    </script>
-</body>
-</html> 
\ No newline at end of file
-- 
2.49.0.windows.1


From bf35fa8334df9c45501962c6edacf7fc667eaa30 Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 26 Apr 2025 22:03:53 +0800
Subject: [PATCH 03/10] feat: Implement OAuth2 authorization flow endpoints

---
 config/settings_base.py                    |  10 ++
 dashboard/adapters/__init__.py             |   1 +
 dashboard/adapters/discord.py              |  98 +++++++++++++++
 dashboard/templates/dashboard/base.html    |   6 +-
 dashboard/templates/dashboard/profile.html |  90 +++++++++++++
 dashboard/tests/__init__.py                |   1 +
 dashboard/tests/test_oauth.py              | 140 +++++++++++++++++++++
 dashboard/urls.py                          |   1 +
 dashboard/views.py                         |  25 +++-
 templates/account/signup.html              | 118 +++++++++++++++++
 10 files changed, 486 insertions(+), 4 deletions(-)
 create mode 100644 dashboard/adapters/__init__.py
 create mode 100644 dashboard/adapters/discord.py
 create mode 100644 dashboard/templates/dashboard/profile.html
 create mode 100644 dashboard/tests/__init__.py
 create mode 100644 dashboard/tests/test_oauth.py
 create mode 100644 templates/account/signup.html

diff --git a/config/settings_base.py b/config/settings_base.py
index e7fa0b8..e3cb418 100644
--- a/config/settings_base.py
+++ b/config/settings_base.py
@@ -153,6 +153,16 @@ ACCOUNT_LOGIN_METHODS = {'username'}
 ACCOUNT_SIGNUP_FIELDS = ['username*', 'password1*', 'password2*', 'email']
 SOCIALACCOUNT_AUTO_SIGNUP = True
 SOCIALACCOUNT_STORE_TOKENS = True
+SOCIALACCOUNT_ADAPTER = 'dashboard.adapters.discord.DiscordSocialAccountAdapter'
+
+# Discord OAuth2 provider settings
+SOCIALACCOUNT_PROVIDERS = {
+    'discord': {
+        'SCOPE': DISCORD_SCOPE,
+        'AUTH_PARAMS': {'prompt': 'consent'},
+        'VERIFIED_EMAIL': True
+    }
+}
 
 # Discord OAuth2 settings
 DISCORD_CLIENT_ID = env('DISCORD_CLIENT_ID', default='')
diff --git a/dashboard/adapters/__init__.py b/dashboard/adapters/__init__.py
new file mode 100644
index 0000000..16583fd
--- /dev/null
+++ b/dashboard/adapters/__init__.py
@@ -0,0 +1 @@
+# Dashboard adapters package
\ No newline at end of file
diff --git a/dashboard/adapters/discord.py b/dashboard/adapters/discord.py
new file mode 100644
index 0000000..23924bd
--- /dev/null
+++ b/dashboard/adapters/discord.py
@@ -0,0 +1,98 @@
+"""
+Discord OAuth2 adapter for Django-allauth.
+Handles Discord-specific authentication logic.
+"""
+
+import requests
+import logging
+from allauth.socialaccount.adapter import DefaultSocialAccountAdapter
+from allauth.socialaccount.models import SocialAccount
+from django.conf import settings
+
+logger = logging.getLogger(__name__)
+
+class DiscordSocialAccountAdapter(DefaultSocialAccountAdapter):
+    """
+    Custom adapter for Discord OAuth2 authentication.
+    Extends the functionality of allauth's DefaultSocialAccountAdapter.
+    """
+    
+    def save_user(self, request, sociallogin, form=None):
+        """
+        Save the user and retrieve additional Discord profile information.
+        
+        Args:
+            request: The HTTP request
+            sociallogin: The social login being processed
+            form: Form with user input
+            
+        Returns:
+            User: The user instance that was created or connected
+        """
+        # First, save the user with the default adapter behavior
+        user = super().save_user(request, sociallogin, form)
+        
+        # Get the Discord account data
+        discord_account = SocialAccount.objects.get(user=user, provider='discord')
+        discord_data = discord_account.extra_data
+        
+        # Additional user profile setup could go here
+        # For example, setting a profile image from Discord avatar
+        
+        # Log successful authentication
+        logger.info(f"Discord user {discord_data.get('username')} authenticated successfully")
+        
+        return user
+    
+    def populate_user(self, request, sociallogin, data):
+        """
+        Populate user fields based on Discord profile data.
+        
+        Args:
+            request: The HTTP request
+            sociallogin: The social login being processed
+            data: The data from the social provider
+            
+        Returns:
+            User: The populated user instance
+        """
+        user = super().populate_user(request, sociallogin, data)
+        
+        # Set username to Discord username if empty
+        if 'username' in data and not user.username:
+            user.username = data['username']
+        
+        # Set email from Discord profile if available
+        if 'email' in data and data['email'] and not user.email:
+            user.email = data['email']
+        
+        return user
+    
+    def get_discord_guilds(self, discord_account):
+        """
+        Retrieve the Discord servers (guilds) for a user.
+        
+        Args:
+            discord_account: SocialAccount instance for a Discord user
+            
+        Returns:
+            list: List of guild data or empty list if error
+        """
+        if not discord_account or discord_account.provider != 'discord':
+            return []
+        
+        access_token = discord_account.socialtoken_set.first().token
+        
+        try:
+            headers = {'Authorization': f'Bearer {access_token}'}
+            response = requests.get('https://discord.com/api/v10/users/@me/guilds', headers=headers)
+            
+            if response.status_code == 200:
+                return response.json()
+            else:
+                logger.error(f"Failed to fetch Discord guilds: {response.status_code} - {response.text}")
+                return []
+                
+        except Exception as e:
+            logger.exception(f"Error fetching Discord guilds: {e}")
+            return []
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/base.html b/dashboard/templates/dashboard/base.html
index 16f9361..cba8e44 100644
--- a/dashboard/templates/dashboard/base.html
+++ b/dashboard/templates/dashboard/base.html
@@ -68,7 +68,7 @@
                         {{ user.username }}
                     </button>
                     <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenu">
-                        <li><a class="dropdown-item" href="{% url 'dashboard:index' %}">
+                        <li><a class="dropdown-item" href="{% url 'dashboard:profile' %}">
                             <i class="fas fa-user me-2"></i>個人資料
                         </a></li>
                         <li><a class="dropdown-item" href="{% url 'dashboard:index' %}">
@@ -82,8 +82,8 @@
                 </div>
                 {% else %}
                 <div class="d-flex">
-                    <a href="{% url 'dashboard:oauth2_login' %}" class="btn btn-outline-primary me-2">登入</a>
-                    <a href="{% url 'dashboard:oauth2_login' %}" class="btn btn-primary">註冊</a>
+                    <a href="{% url 'account_login' %}" class="btn btn-outline-primary me-2">登入</a>
+                    <a href="{% url 'account_signup' %}" class="btn btn-primary">註冊</a>
                 </div>
                 {% endif %}
                 
diff --git a/dashboard/templates/dashboard/profile.html b/dashboard/templates/dashboard/profile.html
new file mode 100644
index 0000000..1afdb57
--- /dev/null
+++ b/dashboard/templates/dashboard/profile.html
@@ -0,0 +1,90 @@
+{% extends 'dashboard/base.html' %}
+{% load static %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-8">
+    <div class="max-w-3xl mx-auto bg-white rounded-lg shadow-md p-8">
+        <h1 class="text-3xl font-bold mb-6 text-center">Your Profile</h1>
+        
+        {% if user.is_authenticated %}
+            <div class="flex flex-col md:flex-row items-center md:items-start mb-8">
+                <div class="flex-shrink-0 mb-4 md:mb-0 md:mr-6">
+                    {% if discord_account.extra_data.avatar %}
+                        <img src="https://cdn.discordapp.com/avatars/{{ discord_account.extra_data.id }}/{{ discord_account.extra_data.avatar }}.png" 
+                             alt="{{ user.username }}" 
+                             class="w-32 h-32 rounded-full border-4 border-indigo-500">
+                    {% else %}
+                        <img src="{% static 'img/default-avatar.png' %}" 
+                             alt="{{ user.username }}" 
+                             class="w-32 h-32 rounded-full border-4 border-gray-300">
+                    {% endif %}
+                </div>
+                
+                <div class="flex-grow text-center md:text-left">
+                    <h2 class="text-2xl font-semibold mb-2">{{ user.username }}</h2>
+                    
+                    {% if discord_account %}
+                        <div class="mb-4">
+                            <span class="text-gray-600">Discord:</span>
+                            <span class="font-medium">{{ discord_account.extra_data.username }}#{{ discord_account.extra_data.discriminator }}</span>
+                        </div>
+                    {% endif %}
+                    
+                    {% if user.email %}
+                        <div class="mb-4">
+                            <span class="text-gray-600">Email:</span>
+                            <span class="font-medium">{{ user.email }}</span>
+                        </div>
+                    {% endif %}
+                    
+                    <div class="mb-4">
+                        <span class="text-gray-600">Joined:</span>
+                        <span class="font-medium">{{ user.date_joined|date:"F j, Y" }}</span>
+                    </div>
+                </div>
+            </div>
+            
+            {% if discord_guilds %}
+                <div class="mt-8">
+                    <h3 class="text-xl font-semibold mb-4 border-b pb-2">Your Discord Servers</h3>
+                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
+                        {% for guild in discord_guilds %}
+                            <div class="border rounded-lg p-4 hover:shadow-md transition-shadow">
+                                {% if guild.icon %}
+                                    <img src="https://cdn.discordapp.com/icons/{{ guild.id }}/{{ guild.icon }}.png" 
+                                         alt="{{ guild.name }}" 
+                                         class="w-16 h-16 rounded-full mx-auto mb-2">
+                                {% else %}
+                                    <div class="w-16 h-16 rounded-full bg-gray-200 flex items-center justify-center mx-auto mb-2">
+                                        <span class="text-gray-500 text-xl font-bold">{{ guild.name|slice:":1" }}</span>
+                                    </div>
+                                {% endif %}
+                                <h4 class="text-center font-medium">{{ guild.name }}</h4>
+                                {% if guild.owner %}
+                                    <span class="block text-center text-xs text-green-600">Owner</span>
+                                {% endif %}
+                            </div>
+                        {% endfor %}
+                    </div>
+                </div>
+            {% endif %}
+            
+            <div class="mt-8 text-center">
+                <a href="{% url 'account_logout' %}" 
+                   class="inline-block bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors">
+                    Logout
+                </a>
+            </div>
+            
+        {% else %}
+            <div class="text-center py-8">
+                <p class="text-xl text-gray-600 mb-6">You need to be logged in to view your profile.</p>
+                <a href="{% url 'account_login' %}" 
+                   class="inline-block bg-indigo-500 text-white px-6 py-2 rounded-lg hover:bg-indigo-600 transition-colors">
+                    Login with Discord
+                </a>
+            </div>
+        {% endif %}
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/tests/__init__.py b/dashboard/tests/__init__.py
new file mode 100644
index 0000000..dbd57b9
--- /dev/null
+++ b/dashboard/tests/__init__.py
@@ -0,0 +1 @@
+# Tests module
\ No newline at end of file
diff --git a/dashboard/tests/test_oauth.py b/dashboard/tests/test_oauth.py
new file mode 100644
index 0000000..31f4f08
--- /dev/null
+++ b/dashboard/tests/test_oauth.py
@@ -0,0 +1,140 @@
+"""
+Tests for Discord OAuth2 authentication.
+"""
+from django.test import TestCase, RequestFactory
+from django.urls import reverse
+from django.contrib.auth.models import User
+from allauth.socialaccount.models import SocialApp, SocialAccount
+from django.contrib.sites.models import Site
+from unittest.mock import patch, MagicMock
+from dashboard.adapters.discord import DiscordSocialAccountAdapter
+
+class DiscordOAuthTest(TestCase):
+    """Test Discord OAuth2 authentication functionality."""
+    
+    def setUp(self):
+        """Set up test data."""
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='testpassword'
+        )
+        
+        # Set up site
+        self.site = Site.objects.get_or_create(pk=1)[0]
+        self.site.domain = 'testserver'
+        self.site.name = 'testserver'
+        self.site.save()
+        
+        # Create Discord SocialApp
+        self.app = SocialApp.objects.create(
+            provider='discord',
+            name='Discord',
+            client_id='test-client-id',
+            secret='test-secret',
+        )
+        self.app.sites.add(self.site)
+        
+        # Create factory for request mocking
+        self.factory = RequestFactory()
+        
+    def test_discord_adapter_save_user(self):
+        """Test the Discord adapter's save_user method."""
+        # Create a mock sociallogin object
+        mock_sociallogin = MagicMock()
+        mock_sociallogin.user = self.user
+        mock_sociallogin.account.provider = 'discord'
+        mock_sociallogin.account.extra_data = {
+            'id': '123456789',
+            'username': 'discord_user',
+            'discriminator': '1234',
+            'avatar': 'avatar_hash',
+            'email': 'discord@example.com',
+        }
+        
+        # Mock SocialAccount.objects.get to return the mock account
+        with patch('allauth.socialaccount.models.SocialAccount.objects.get') as mock_get:
+            mock_get.return_value = mock_sociallogin.account
+            
+            # Create adapter and call save_user
+            adapter = DiscordSocialAccountAdapter()
+            request = self.factory.get('/')
+            result = adapter.save_user(request, mock_sociallogin)
+            
+            # Check the user was returned
+            self.assertEqual(result, self.user)
+            
+    def test_discord_adapter_populate_user(self):
+        """Test the Discord adapter's populate_user method."""
+        # Create a new user without username
+        user = User(email='new@example.com')
+        
+        # Create the adapter
+        adapter = DiscordSocialAccountAdapter()
+        
+        # Create a mock request
+        request = self.factory.get('/')
+        
+        # Mock sociallogin
+        mock_sociallogin = MagicMock()
+        
+        # Call populate_user with Discord data
+        discord_data = {
+            'username': 'discord_username',
+            'email': 'discord@example.com'
+        }
+        
+        # Mock the parent class method to return the user
+        with patch('allauth.socialaccount.adapter.DefaultSocialAccountAdapter.populate_user') as mock_populate:
+            mock_populate.return_value = user
+            
+            result = adapter.populate_user(request, mock_sociallogin, discord_data)
+            
+            # Check the username and email were set correctly
+            self.assertEqual(result.username, 'discord_username')
+            self.assertEqual(result.email, 'discord@example.com')
+    
+    @patch('requests.get')
+    def test_get_discord_guilds(self, mock_get):
+        """Test the get_discord_guilds method."""
+        # Create a mock response with sample guild data
+        mock_response = MagicMock()
+        mock_response.status_code = 200
+        mock_response.json.return_value = [
+            {
+                'id': '111111',
+                'name': 'Test Server 1',
+                'icon': 'icon_hash_1',
+                'owner': True
+            },
+            {
+                'id': '222222',
+                'name': 'Test Server 2',
+                'icon': 'icon_hash_2',
+                'owner': False
+            }
+        ]
+        mock_get.return_value = mock_response
+        
+        # Create a mock Discord account
+        mock_account = MagicMock()
+        mock_account.provider = 'discord'
+        mock_token = MagicMock()
+        mock_token.token = 'fake_access_token'
+        mock_account.socialtoken_set.first.return_value = mock_token
+        
+        # Create adapter and call get_discord_guilds
+        adapter = DiscordSocialAccountAdapter()
+        guilds = adapter.get_discord_guilds(mock_account)
+        
+        # Check that the mock was called with correct parameters
+        mock_get.assert_called_once_with(
+            'https://discord.com/api/v10/users/@me/guilds', 
+            headers={'Authorization': 'Bearer fake_access_token'}
+        )
+        
+        # Check that the guilds were returned correctly
+        self.assertEqual(len(guilds), 2)
+        self.assertEqual(guilds[0]['name'], 'Test Server 1')
+        self.assertEqual(guilds[1]['name'], 'Test Server 2')
\ No newline at end of file
diff --git a/dashboard/urls.py b/dashboard/urls.py
index c7e6883..c11446f 100644
--- a/dashboard/urls.py
+++ b/dashboard/urls.py
@@ -19,6 +19,7 @@ analytics_patterns = [
 urlpatterns = [
     # Main views
     path('', views.index, name='index'),
+    path('profile/', views.profile, name='profile'),
     path('servers/', views.server_list, name='servers'),
     path('stats/', views.stats, name='stats'),
     
diff --git a/dashboard/views.py b/dashboard/views.py
index e30217a..1c6d633 100644
--- a/dashboard/views.py
+++ b/dashboard/views.py
@@ -11,6 +11,7 @@ from django.contrib.auth import logout, login
 from django.conf import settings
 from django.urls import reverse
 from django.contrib.auth.models import User
+from allauth.socialaccount.models import SocialAccount
 import secrets
 
 @login_required
@@ -281,4 +282,26 @@ def oauth2_debug(request):
 def logout_view(request):
     """Logout view."""
     logout(request)
-    return redirect('login')
\ No newline at end of file
+    return redirect('login')
+
+@login_required
+def profile(request):
+    """User profile view showing Discord account information."""
+    # Get the user's Discord account if it exists
+    try:
+        discord_account = SocialAccount.objects.get(user=request.user, provider='discord')
+        
+        # Use our adapter to get the user's Discord guilds
+        from .adapters.discord import DiscordSocialAccountAdapter
+        adapter = DiscordSocialAccountAdapter()
+        discord_guilds = adapter.get_discord_guilds(discord_account)
+    except SocialAccount.DoesNotExist:
+        discord_account = None
+        discord_guilds = []
+    
+    context = {
+        'discord_account': discord_account,
+        'discord_guilds': discord_guilds,
+    }
+    
+    return render(request, 'dashboard/profile.html', context)
\ No newline at end of file
diff --git a/templates/account/signup.html b/templates/account/signup.html
new file mode 100644
index 0000000..31a3476
--- /dev/null
+++ b/templates/account/signup.html
@@ -0,0 +1,118 @@
+{% extends 'dashboard/base.html' %}
+{% load i18n %}
+{% load account socialaccount %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-8">
+    <div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-8">
+        <div class="text-center">
+            <h1 class="text-3xl font-bold mb-4">{% trans "Sign Up" %}</h1>
+            
+            <p class="text-gray-600 mb-6">
+                {% blocktrans %}Create an account to manage your Discord bots.{% endblocktrans %}
+            </p>
+            
+            {% get_providers as socialaccount_providers %}
+            
+            {% if socialaccount_providers %}
+                <div class="socialaccount_providers mb-6">
+                    <p class="text-sm text-gray-500 mb-3">{% trans "Sign up with one of your existing accounts:" %}</p>
+                    
+                    <div class="flex flex-col space-y-3">
+                        {% for provider in socialaccount_providers %}
+                            {% if provider.id == "discord" %}
+                                <a href="{% provider_login_url provider.id process='login' %}" 
+                                   class="inline-block bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors flex items-center justify-center">
+                                    <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
+                                        <path d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286z" />
+                                    </svg>
+                                    {% trans "Sign up with Discord" %}
+                                </a>
+                            {% else %}
+                                <a href="{% provider_login_url provider.id process='login' %}" 
+                                   class="inline-block bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors">
+                                    {% trans "Sign up with" %} {{provider.name}}
+                                </a>
+                            {% endif %}
+                        {% endfor %}
+                    </div>
+                </div>
+            {% endif %}
+            
+            <div class="login-or py-3 border-t border-b border-gray-300 my-4">
+                <span class="block text-center text-sm text-gray-500 -mt-3 bg-white w-8 mx-auto">{% trans "or" %}</span>
+            </div>
+            
+            <form class="signup space-y-4" id="signup_form" method="post" action="{% url 'account_signup' %}">
+                {% csrf_token %}
+                
+                {% if form.errors %}
+                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
+                        <p class="font-bold">{% trans "Please correct the errors below:" %}</p>
+                        {{ form.non_field_errors }}
+                        {% for field in form %}
+                            {% if field.errors %}
+                                <p>{{ field.label }}: {{ field.errors|striptags }}</p>
+                            {% endif %}
+                        {% endfor %}
+                    </div>
+                {% endif %}
+                
+                <div>
+                    <label class="block text-sm font-medium text-gray-700 mb-1" for="id_username">
+                        {% trans "Username:" %}
+                    </label>
+                    <input type="text" name="username" id="id_username" 
+                           class="w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" 
+                           required>
+                </div>
+                
+                <div>
+                    <label class="block text-sm font-medium text-gray-700 mb-1" for="id_email">
+                        {% trans "Email (optional):" %}
+                    </label>
+                    <input type="email" name="email" id="id_email" 
+                           class="w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
+                </div>
+                
+                <div>
+                    <label class="block text-sm font-medium text-gray-700 mb-1" for="id_password1">
+                        {% trans "Password:" %}
+                    </label>
+                    <input type="password" name="password1" id="id_password1" 
+                           class="w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" 
+                           required>
+                </div>
+                
+                <div>
+                    <label class="block text-sm font-medium text-gray-700 mb-1" for="id_password2">
+                        {% trans "Confirm Password:" %}
+                    </label>
+                    <input type="password" name="password2" id="id_password2" 
+                           class="w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" 
+                           required>
+                </div>
+                
+                {% if redirect_field_value %}
+                    <input type="hidden" name="{{ redirect_field_name }}" value="{{ redirect_field_value }}" />
+                {% endif %}
+                
+                <div>
+                    <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors">
+                        {% trans "Sign Up" %}
+                    </button>
+                </div>
+            </form>
+            
+            <div class="text-center mt-6">
+                <p class="text-sm text-gray-600">
+                    {% trans "Already have an account?" %}
+                    <a href="{% url 'account_login' %}" class="text-indigo-600 hover:text-indigo-800">
+                        {% trans "Sign in" %}
+                    </a>
+                </p>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
-- 
2.49.0.windows.1


From a0a03058af0545e3f2ee1b5723ff05b1ecc002ce Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 26 Apr 2025 22:05:16 +0800
Subject: [PATCH 04/10] feat: Create Discord authentication backend for Django

---
 config/settings_base.py              |   4 +
 dashboard/auth_backends.py           |  74 ++++++++++++++
 dashboard/middleware.py              | 148 ++++++++++++++++++++++++++-
 dashboard/tests/test_auth_backend.py | 122 ++++++++++++++++++++++
 4 files changed, 347 insertions(+), 1 deletion(-)
 create mode 100644 dashboard/auth_backends.py
 create mode 100644 dashboard/tests/test_auth_backend.py

diff --git a/config/settings_base.py b/config/settings_base.py
index e3cb418..2ce9666 100644
--- a/config/settings_base.py
+++ b/config/settings_base.py
@@ -62,9 +62,11 @@ MIDDLEWARE = [
     'django.middleware.common.CommonMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'dashboard.middleware.DiscordTokenRefreshMiddleware',  # Token refresh middleware
     'django.contrib.messages.middleware.MessageMiddleware',
     'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'allauth.account.middleware.AccountMiddleware',  # Django-allauth middleware
+    'dashboard.middleware.RequestLogMiddleware',  # Request logging middleware (only in debug mode)
 ]
 
 # URL configuration
@@ -145,6 +147,8 @@ AUTHENTICATION_BACKENDS = [
     'django.contrib.auth.backends.ModelBackend',
     # Django-allauth backend
     'allauth.account.auth_backends.AuthenticationBackend',
+    # Custom Discord backend
+    'dashboard.auth_backends.DiscordAuthenticationBackend',
 ]
 
 # Django-allauth settings
diff --git a/dashboard/auth_backends.py b/dashboard/auth_backends.py
new file mode 100644
index 0000000..343d1de
--- /dev/null
+++ b/dashboard/auth_backends.py
@@ -0,0 +1,74 @@
+"""
+Custom authentication backends for Social Cube.
+Includes a Discord-specific authentication backend.
+"""
+
+import logging
+from django.contrib.auth.backends import ModelBackend
+from django.contrib.auth import get_user_model
+from allauth.socialaccount.models import SocialAccount
+
+logger = logging.getLogger(__name__)
+User = get_user_model()
+
+class DiscordAuthenticationBackend(ModelBackend):
+    """
+    Authentication backend that allows users to authenticate with their Discord account.
+    This is used in addition to the default ModelBackend.
+    """
+    
+    def authenticate(self, request, discord_id=None, **kwargs):
+        """
+        Authenticate a user based on their Discord ID.
+        
+        Args:
+            request: The HTTP request
+            discord_id: The Discord user ID
+            
+        Returns:
+            User: The authenticated user or None
+        """
+        if discord_id is None:
+            return None
+            
+        try:
+            # Find the social account with this Discord ID
+            social_account = SocialAccount.objects.get(
+                provider='discord',
+                uid=discord_id
+            )
+            
+            # Get the user associated with this social account
+            user = social_account.user
+            
+            # Check if the user is active
+            if not self.user_can_authenticate(user):
+                logger.warning(f"Discord user {discord_id} is not active")
+                return None
+                
+            logger.info(f"Successfully authenticated user via Discord: {user.username}")
+            return user
+            
+        except SocialAccount.DoesNotExist:
+            logger.warning(f"No Discord account found with ID: {discord_id}")
+            return None
+        except Exception as e:
+            logger.exception(f"Error authenticating via Discord: {e}")
+            return None
+            
+    def get_user(self, user_id):
+        """
+        Get a user by their ID.
+        
+        Args:
+            user_id: The user's primary key
+            
+        Returns:
+            User: The user object or None
+        """
+        try:
+            user = User.objects.get(pk=user_id)
+            if self.user_can_authenticate(user):
+                return user
+        except User.DoesNotExist:
+            return None
\ No newline at end of file
diff --git a/dashboard/middleware.py b/dashboard/middleware.py
index 0519ecb..bde3da3 100644
--- a/dashboard/middleware.py
+++ b/dashboard/middleware.py
@@ -1 +1,147 @@
- 
\ No newline at end of file
+"""
+Custom middleware for the Social Cube dashboard.
+"""
+
+import logging
+import time
+import requests
+import json
+from django.conf import settings
+from allauth.socialaccount.models import SocialToken, SocialAccount
+from django.utils import timezone
+from datetime import timedelta
+
+logger = logging.getLogger(__name__)
+
+class DiscordTokenRefreshMiddleware:
+    """
+    Middleware to refresh Discord access tokens when needed.
+    This ensures API requests to Discord don't fail due to expired tokens.
+    """
+    
+    def __init__(self, get_response):
+        """Initialize the middleware."""
+        self.get_response = get_response
+        
+    def __call__(self, request):
+        """
+        Process the request.
+        
+        Args:
+            request: The HTTP request
+            
+        Returns:
+            HttpResponse: The HTTP response
+        """
+        # Only process if user is authenticated
+        if request.user.is_authenticated:
+            try:
+                # Find Discord social account for the current user
+                social_account = SocialAccount.objects.filter(
+                    user=request.user, 
+                    provider='discord'
+                ).first()
+                
+                if social_account:
+                    # Get the token for this account
+                    social_token = SocialToken.objects.filter(
+                        account=social_account
+                    ).first()
+                    
+                    if social_token:
+                        # Check if token is about to expire (within 5 minutes)
+                        if social_token.expires_at and social_token.expires_at - timezone.now() < timedelta(minutes=5):
+                            self._refresh_token(social_token)
+            
+            except Exception as e:
+                logger.exception(f"Error refreshing Discord token: {e}")
+                
+        # Continue processing the request
+        response = self.get_response(request)
+        return response
+    
+    def _refresh_token(self, social_token):
+        """
+        Refresh a Discord access token.
+        
+        Args:
+            social_token: The SocialToken to refresh
+        """
+        try:
+            # Prepare the request
+            refresh_token = social_token.token_secret
+            client_id = settings.DISCORD_CLIENT_ID
+            client_secret = settings.DISCORD_CLIENT_SECRET
+            
+            data = {
+                'client_id': client_id,
+                'client_secret': client_secret,
+                'grant_type': 'refresh_token',
+                'refresh_token': refresh_token
+            }
+            
+            headers = {
+                'Content-Type': 'application/x-www-form-urlencoded'
+            }
+            
+            # Make the request to Discord
+            response = requests.post(
+                'https://discord.com/api/oauth2/token', 
+                data=data, 
+                headers=headers
+            )
+            
+            if response.status_code == 200:
+                token_data = response.json()
+                
+                # Update the token
+                social_token.token = token_data['access_token']
+                social_token.token_secret = token_data['refresh_token']
+                social_token.expires_at = timezone.now() + timedelta(seconds=token_data['expires_in'])
+                social_token.save()
+                
+                logger.info(f"Successfully refreshed Discord token for user {social_token.account.user.username}")
+            else:
+                logger.error(f"Failed to refresh Discord token: {response.status_code} - {response.text}")
+                
+        except Exception as e:
+            logger.exception(f"Error in token refresh: {e}")
+            
+            
+class RequestLogMiddleware:
+    """
+    Middleware to log request information for debugging.
+    Only enabled when DEBUG=True.
+    """
+    
+    def __init__(self, get_response):
+        """Initialize the middleware."""
+        self.get_response = get_response
+        
+    def __call__(self, request):
+        """
+        Process the request.
+        
+        Args:
+            request: The HTTP request
+            
+        Returns:
+            HttpResponse: The HTTP response
+        """
+        if settings.DEBUG:
+            # Log request details
+            start_time = time.time()
+            
+            # Process the request
+            response = self.get_response(request)
+            
+            # Calculate request duration
+            duration = time.time() - start_time
+            
+            # Log the request
+            logger.debug(f"{request.method} {request.path} - {response.status_code} ({duration:.2f}s)")
+            
+            return response
+        else:
+            # Skip logging if not in debug mode
+            return self.get_response(request)
\ No newline at end of file
diff --git a/dashboard/tests/test_auth_backend.py b/dashboard/tests/test_auth_backend.py
new file mode 100644
index 0000000..86ff121
--- /dev/null
+++ b/dashboard/tests/test_auth_backend.py
@@ -0,0 +1,122 @@
+"""
+Tests for custom authentication backends.
+"""
+from django.test import TestCase
+from django.contrib.auth.models import User
+from allauth.socialaccount.models import SocialAccount
+from django.contrib.sites.models import Site
+from django.test import RequestFactory
+from dashboard.auth_backends import DiscordAuthenticationBackend
+
+class DiscordAuthBackendTest(TestCase):
+    """Test the Discord authentication backend."""
+    
+    def setUp(self):
+        """Set up test data."""
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='testpassword'
+        )
+        
+        # Set up a site
+        self.site = Site.objects.get_or_create(pk=1)[0]
+        self.site.domain = 'testserver'
+        self.site.name = 'testserver'
+        self.site.save()
+        
+        # Create a Discord social account for the user
+        self.discord_id = '12345678901234567'
+        self.social_account = SocialAccount.objects.create(
+            user=self.user,
+            provider='discord',
+            uid=self.discord_id,
+            extra_data={
+                'id': self.discord_id,
+                'username': 'discord_user',
+                'discriminator': '1234',
+            }
+        )
+        
+        # Create a factory for request mocking
+        self.factory = RequestFactory()
+        
+        # Create the authentication backend
+        self.backend = DiscordAuthenticationBackend()
+        
+    def test_authenticate_with_valid_discord_id(self):
+        """Test authenticating with a valid Discord ID."""
+        # Create mock request
+        request = self.factory.get('/')
+        
+        # Try to authenticate with the Discord ID
+        authenticated_user = self.backend.authenticate(request, discord_id=self.discord_id)
+        
+        # Check that we got the right user
+        self.assertEqual(authenticated_user, self.user)
+        
+    def test_authenticate_with_invalid_discord_id(self):
+        """Test authenticating with an invalid Discord ID."""
+        # Create mock request
+        request = self.factory.get('/')
+        
+        # Try to authenticate with an invalid Discord ID
+        authenticated_user = self.backend.authenticate(request, discord_id='invalid_id')
+        
+        # Check that authentication failed
+        self.assertIsNone(authenticated_user)
+        
+    def test_authenticate_with_inactive_user(self):
+        """Test authenticating with a Discord ID for an inactive user."""
+        # Make the user inactive
+        self.user.is_active = False
+        self.user.save()
+        
+        # Create mock request
+        request = self.factory.get('/')
+        
+        # Try to authenticate with the Discord ID
+        authenticated_user = self.backend.authenticate(request, discord_id=self.discord_id)
+        
+        # Check that authentication failed
+        self.assertIsNone(authenticated_user)
+        
+    def test_authenticate_with_no_discord_id(self):
+        """Test authenticating without a Discord ID."""
+        # Create mock request
+        request = self.factory.get('/')
+        
+        # Try to authenticate without a Discord ID
+        authenticated_user = self.backend.authenticate(request)
+        
+        # Check that authentication failed
+        self.assertIsNone(authenticated_user)
+        
+    def test_get_user_with_valid_id(self):
+        """Test getting a user with a valid ID."""
+        # Try to get the user with the valid ID
+        user = self.backend.get_user(self.user.id)
+        
+        # Check that we got the right user
+        self.assertEqual(user, self.user)
+        
+    def test_get_user_with_invalid_id(self):
+        """Test getting a user with an invalid ID."""
+        # Try to get a user with an invalid ID
+        user = self.backend.get_user(999999)
+        
+        # Check that we got None
+        self.assertIsNone(user)
+        
+    def test_get_user_with_inactive_user(self):
+        """Test getting an inactive user."""
+        # Make the user inactive
+        self.user.is_active = False
+        self.user.save()
+        
+        # Try to get the user
+        user = self.backend.get_user(self.user.id)
+        
+        # Check that we got None
+        self.assertIsNone(user)
\ No newline at end of file
-- 
2.49.0.windows.1


From d1a15152c5bcb200c848d333c30f5dad3743ad5b Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 26 Apr 2025 22:07:22 +0800
Subject: [PATCH 05/10] feat: Implement secure token storage and refresh
 mechanism

---
 dashboard/tests/test_discord_api.py   | 170 ++++++++++++++++++++++
 dashboard/tests/test_token_storage.py | 155 ++++++++++++++++++++
 dashboard/utils/__init__.py           |   1 +
 dashboard/utils/discord_api.py        | 198 +++++++++++++++++++++++++
 dashboard/utils/token_storage.py      | 199 ++++++++++++++++++++++++++
 5 files changed, 723 insertions(+)
 create mode 100644 dashboard/tests/test_discord_api.py
 create mode 100644 dashboard/tests/test_token_storage.py
 create mode 100644 dashboard/utils/__init__.py
 create mode 100644 dashboard/utils/discord_api.py
 create mode 100644 dashboard/utils/token_storage.py

diff --git a/dashboard/tests/test_discord_api.py b/dashboard/tests/test_discord_api.py
new file mode 100644
index 0000000..d8df5d1
--- /dev/null
+++ b/dashboard/tests/test_discord_api.py
@@ -0,0 +1,170 @@
+"""
+Tests for Discord API utilities.
+"""
+from django.test import TestCase
+from django.contrib.auth.models import User
+from allauth.socialaccount.models import SocialAccount, SocialToken
+from django.contrib.sites.models import Site
+from django.utils import timezone
+from datetime import timedelta
+from unittest.mock import patch, MagicMock
+from dashboard.utils.discord_api import DiscordAPI
+
+class DiscordAPITest(TestCase):
+    """Test the DiscordAPI helper class."""
+    
+    def setUp(self):
+        """Set up test data."""
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='testpassword'
+        )
+        
+        # Set up site
+        self.site = Site.objects.get_or_create(pk=1)[0]
+        self.site.domain = 'testserver'
+        self.site.name = 'testserver'
+        self.site.save()
+        
+        # Create Discord social account
+        self.social_account = SocialAccount.objects.create(
+            user=self.user,
+            provider='discord',
+            uid='12345678901234',
+            extra_data={
+                'id': '12345678901234',
+                'username': 'discord_user',
+                'discriminator': '1234',
+            }
+        )
+        
+        # Create token
+        self.social_token = SocialToken.objects.create(
+            account=self.social_account,
+            token='test_access_token',
+            token_secret='test_refresh_token',
+            expires_at=timezone.now() + timedelta(hours=1)
+        )
+        
+        # Create Discord API instance
+        self.discord_api = DiscordAPI(user=self.user)
+        
+    def test_get_headers(self):
+        """Test getting authentication headers."""
+        # Get headers
+        headers = self.discord_api.get_headers()
+        
+        # Check that the headers contain the token
+        self.assertIn('Authorization', headers)
+        self.assertEqual(headers['Authorization'], f'Bearer {self.social_token.token}')
+        
+        # Check that the content type is set
+        self.assertIn('Content-Type', headers)
+        self.assertEqual(headers['Content-Type'], 'application/json')
+    
+    @patch('requests.request')
+    def test_make_request(self, mock_request):
+        """Test making API requests."""
+        # Set up mock response
+        mock_response = MagicMock()
+        mock_response.status_code = 200
+        mock_response.json.return_value = {'id': '12345', 'username': 'discord_user'}
+        mock_response.text = '{"id": "12345", "username": "discord_user"}'
+        mock_request.return_value = mock_response
+        
+        # Make a request
+        result = self.discord_api.make_request('GET', '/users/@me')
+        
+        # Check that the request was made correctly
+        mock_request.assert_called_once_with(
+            method='GET',
+            url='https://discord.com/api/v10/users/@me',
+            headers=self.discord_api.get_headers(),
+            json=None,
+            params=None
+        )
+        
+        # Check the result
+        self.assertEqual(result, {'id': '12345', 'username': 'discord_user'})
+    
+    @patch('requests.request')
+    def test_rate_limit_handling(self, mock_request):
+        """Test handling rate limits."""
+        # Set up first response (rate limited)
+        rate_limited_response = MagicMock()
+        rate_limited_response.status_code = 429
+        rate_limited_response.headers = {'Retry-After': '1'}
+        
+        # Set up second response (success after retry)
+        success_response = MagicMock()
+        success_response.status_code = 200
+        success_response.json.return_value = {'id': '12345', 'username': 'discord_user'}
+        success_response.text = '{"id": "12345", "username": "discord_user"}'
+        
+        # Mock the request to return rate limited first, then success
+        mock_request.side_effect = [rate_limited_response, success_response]
+        
+        # Make a request with time.sleep patched to avoid waiting
+        with patch('time.sleep') as mock_sleep:
+            result = self.discord_api.make_request('GET', '/users/@me')
+            
+            # Check that sleep was called with the retry after value
+            mock_sleep.assert_called_once_with(1)
+        
+        # Check that request was called twice
+        self.assertEqual(mock_request.call_count, 2)
+        
+        # Check the result from the second request
+        self.assertEqual(result, {'id': '12345', 'username': 'discord_user'})
+    
+    @patch('requests.request')
+    def test_error_handling(self, mock_request):
+        """Test handling API errors."""
+        # Set up error response
+        error_response = MagicMock()
+        error_response.status_code = 401
+        error_response.text = 'Unauthorized'
+        mock_request.return_value = error_response
+        
+        # Make a request
+        result = self.discord_api.make_request('GET', '/users/@me')
+        
+        # Check that the result is None
+        self.assertIsNone(result)
+    
+    @patch.object(DiscordAPI, 'make_request')
+    def test_get_user_profile(self, mock_make_request):
+        """Test getting the user profile."""
+        # Set up mock return value
+        mock_make_request.return_value = {'id': '12345', 'username': 'discord_user'}
+        
+        # Get the user profile
+        result = self.discord_api.get_user_profile()
+        
+        # Check that make_request was called correctly
+        mock_make_request.assert_called_once_with('GET', '/users/@me')
+        
+        # Check the result
+        self.assertEqual(result, {'id': '12345', 'username': 'discord_user'})
+    
+    @patch.object(DiscordAPI, 'make_request')
+    def test_get_user_guilds(self, mock_make_request):
+        """Test getting the user's guilds."""
+        # Set up mock return value
+        mock_make_request.return_value = [
+            {'id': '111111', 'name': 'Server 1', 'owner': True},
+            {'id': '222222', 'name': 'Server 2', 'owner': False}
+        ]
+        
+        # Get the user's guilds
+        result = self.discord_api.get_user_guilds()
+        
+        # Check that make_request was called correctly
+        mock_make_request.assert_called_once_with('GET', '/users/@me/guilds')
+        
+        # Check the result
+        self.assertEqual(len(result), 2)
+        self.assertEqual(result[0]['name'], 'Server 1')
+        self.assertEqual(result[1]['name'], 'Server 2')
\ No newline at end of file
diff --git a/dashboard/tests/test_token_storage.py b/dashboard/tests/test_token_storage.py
new file mode 100644
index 0000000..301ce0a
--- /dev/null
+++ b/dashboard/tests/test_token_storage.py
@@ -0,0 +1,155 @@
+"""
+Tests for token storage utilities.
+"""
+from django.test import TestCase
+from django.contrib.auth.models import User
+from django.utils import timezone
+from django.conf import settings
+from django.test.utils import override_settings
+from datetime import timedelta
+from allauth.socialaccount.models import SocialAccount, SocialToken
+from django.contrib.sites.models import Site
+from dashboard.utils.token_storage import TokenManager
+from cryptography.fernet import Fernet
+import base64
+
+class TokenManagerTest(TestCase):
+    """Test the TokenManager class."""
+    
+    def setUp(self):
+        """Set up test data."""
+        # Create a test key
+        self.test_key = Fernet.generate_key()
+        
+        # Override settings for testing
+        self._original_bot_token_key = settings.BOT_TOKEN_KEY
+        settings.BOT_TOKEN_KEY = self.test_key
+        
+        # Create token manager
+        self.token_manager = TokenManager()
+        
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='testpassword'
+        )
+        
+        # Set up site
+        self.site = Site.objects.get_or_create(pk=1)[0]
+        self.site.domain = 'testserver'
+        self.site.name = 'testserver'
+        self.site.save()
+        
+        # Create Discord social account
+        self.social_account = SocialAccount.objects.create(
+            user=self.user,
+            provider='discord',
+            uid='12345678901234',
+            extra_data={
+                'id': '12345678901234',
+                'username': 'discord_user',
+                'discriminator': '1234',
+            }
+        )
+        
+        # Sample tokens
+        self.tokens = {
+            'access_token': 'test_access_token',
+            'refresh_token': 'test_refresh_token',
+            'expires_in': 3600
+        }
+        
+    def tearDown(self):
+        """Restore original settings."""
+        settings.BOT_TOKEN_KEY = self._original_bot_token_key
+    
+    def test_encrypt_decrypt_token(self):
+        """Test token encryption and decryption."""
+        # Test encrypting a token
+        original_token = 'test_secret_token'
+        encrypted = self.token_manager.encrypt_token(original_token)
+        
+        # Check that the result is not the original token
+        self.assertNotEqual(encrypted, original_token)
+        
+        # Test decrypting the token
+        decrypted = self.token_manager.decrypt_token(encrypted)
+        
+        # Check that the decrypted token matches the original
+        self.assertEqual(decrypted, original_token)
+    
+    def test_store_and_get_tokens(self):
+        """Test storing and retrieving tokens."""
+        # Store tokens for the user
+        result = self.token_manager.store_tokens(
+            self.user, 
+            'discord', 
+            self.tokens
+        )
+        
+        # Check that the store operation was successful
+        self.assertTrue(result)
+        
+        # Get tokens for the user
+        stored_tokens = self.token_manager.get_tokens(
+            self.user, 
+            'discord'
+        )
+        
+        # Check that we got tokens back
+        self.assertIsNotNone(stored_tokens)
+        
+        # Check that the access token matches
+        self.assertEqual(stored_tokens['access_token'], self.tokens['access_token'])
+        
+        # Check that the refresh token matches
+        self.assertEqual(stored_tokens['refresh_token'], self.tokens['refresh_token'])
+        
+        # Check that expires_at is set
+        self.assertIsNotNone(stored_tokens['expires_at'])
+    
+    def test_token_validity_check(self):
+        """Test checking if a token is valid (not expired)."""
+        # Store tokens with expiry in the future
+        self.token_manager.store_tokens(
+            self.user, 
+            'discord', 
+            self.tokens
+        )
+        
+        # Check that the token is valid
+        self.assertTrue(self.token_manager.is_token_valid(self.user, 'discord'))
+        
+        # Update the token to be expired
+        social_token = SocialToken.objects.get(account=self.social_account)
+        social_token.expires_at = timezone.now() - timedelta(hours=1)
+        social_token.save()
+        
+        # Check that the token is now invalid
+        self.assertFalse(self.token_manager.is_token_valid(self.user, 'discord'))
+    
+    def test_nonexistent_user_provider(self):
+        """Test behavior with nonexistent user/provider combinations."""
+        # Test getting tokens for a nonexistent provider
+        tokens = self.token_manager.get_tokens(self.user, 'nonexistent')
+        self.assertIsNone(tokens)
+        
+        # Test checking token validity for a nonexistent provider
+        valid = self.token_manager.is_token_valid(self.user, 'nonexistent')
+        self.assertFalse(valid)
+        
+        # Create another user without a social account
+        user2 = User.objects.create_user(
+            username='testuser2',
+            email='test2@example.com',
+            password='testpassword'
+        )
+        
+        # Test getting tokens for a user without a social account
+        tokens = self.token_manager.get_tokens(user2, 'discord')
+        self.assertIsNone(tokens)
+        
+        # Test checking token validity for a user without a social account
+        valid = self.token_manager.is_token_valid(user2, 'discord')
+        self.assertFalse(valid)
\ No newline at end of file
diff --git a/dashboard/utils/__init__.py b/dashboard/utils/__init__.py
new file mode 100644
index 0000000..b48462a
--- /dev/null
+++ b/dashboard/utils/__init__.py
@@ -0,0 +1 @@
+# Utils module
\ No newline at end of file
diff --git a/dashboard/utils/discord_api.py b/dashboard/utils/discord_api.py
new file mode 100644
index 0000000..1e68cb5
--- /dev/null
+++ b/dashboard/utils/discord_api.py
@@ -0,0 +1,198 @@
+"""
+Utilities for interacting with the Discord API.
+Includes functions for making authenticated API requests and handling rate limits.
+"""
+
+import logging
+import time
+import requests
+from django.conf import settings
+from allauth.socialaccount.models import SocialToken, SocialAccount
+from .token_storage import TokenManager
+
+logger = logging.getLogger(__name__)
+
+class DiscordAPI:
+    """
+    Helper class for making Discord API requests.
+    Handles authentication, rate limits, and error handling.
+    """
+    
+    # Discord API base URL
+    BASE_URL = 'https://discord.com/api/v10'
+    
+    def __init__(self, user=None, social_account=None):
+        """
+        Initialize the Discord API helper.
+        
+        Args:
+            user: The Django user (optional if social_account is provided)
+            social_account: The SocialAccount instance (optional if user is provided)
+        """
+        self.token_manager = TokenManager()
+        self.user = user
+        
+        # Get the social account if not provided
+        if not social_account and user:
+            try:
+                self.social_account = SocialAccount.objects.get(
+                    user=user, 
+                    provider='discord'
+                )
+            except SocialAccount.DoesNotExist:
+                logger.error(f"No Discord account found for user {user}")
+                self.social_account = None
+        else:
+            self.social_account = social_account
+    
+    def get_headers(self):
+        """
+        Get authentication headers for Discord API requests.
+        
+        Returns:
+            dict: Headers dictionary or None if no valid token
+        """
+        if not self.social_account:
+            return None
+            
+        try:
+            # Get the token
+            social_token = SocialToken.objects.get(
+                account=self.social_account
+            )
+            
+            return {
+                'Authorization': f'Bearer {social_token.token}',
+                'Content-Type': 'application/json',
+            }
+        except SocialToken.DoesNotExist:
+            logger.error(f"No token found for Discord account {self.social_account.id}")
+            return None
+        except Exception as e:
+            logger.exception(f"Error getting headers: {e}")
+            return None
+    
+    def make_request(self, method, endpoint, data=None, params=None, retry=True):
+        """
+        Make an authenticated request to the Discord API.
+        
+        Args:
+            method: HTTP method (GET, POST, PUT, DELETE)
+            endpoint: API endpoint (without base URL)
+            data: Request data for POST/PUT requests
+            params: Query parameters
+            retry: Whether to retry on rate limits
+            
+        Returns:
+            dict: Response data or None if request failed
+        """
+        if not self.social_account:
+            logger.error("No Discord account available for API request")
+            return None
+            
+        headers = self.get_headers()
+        if not headers:
+            logger.error("Could not get authentication headers for Discord API request")
+            return None
+            
+        url = f"{self.BASE_URL}{endpoint}"
+        
+        try:
+            # Make the request
+            response = requests.request(
+                method=method,
+                url=url,
+                headers=headers,
+                json=data,
+                params=params
+            )
+            
+            # Handle rate limits
+            if response.status_code == 429 and retry:
+                retry_after = int(response.headers.get('Retry-After', 1))
+                logger.warning(f"Rate limited by Discord API, retrying after {retry_after} seconds")
+                time.sleep(retry_after)
+                return self.make_request(method, endpoint, data, params, retry=False)
+                
+            # Handle successful responses
+            if response.status_code >= 200 and response.status_code < 300:
+                return response.json() if response.text else None
+                
+            # Handle errors
+            logger.error(f"Discord API error: {response.status_code} - {response.text}")
+            return None
+            
+        except Exception as e:
+            logger.exception(f"Error making Discord API request: {e}")
+            return None
+    
+    def get_user_profile(self):
+        """
+        Get the current user's Discord profile.
+        
+        Returns:
+            dict: User profile data or None
+        """
+        return self.make_request('GET', '/users/@me')
+    
+    def get_user_guilds(self):
+        """
+        Get the current user's Discord guilds (servers).
+        
+        Returns:
+            list: List of guild data or None
+        """
+        return self.make_request('GET', '/users/@me/guilds')
+    
+    def get_guild(self, guild_id):
+        """
+        Get detailed information about a specific guild.
+        
+        Args:
+            guild_id: The Discord guild ID
+            
+        Returns:
+            dict: Guild data or None
+        """
+        return self.make_request('GET', f'/guilds/{guild_id}')
+    
+    def get_guild_channels(self, guild_id):
+        """
+        Get channels in a specific guild.
+        
+        Args:
+            guild_id: The Discord guild ID
+            
+        Returns:
+            list: List of channel data or None
+        """
+        return self.make_request('GET', f'/guilds/{guild_id}/channels')
+    
+    @classmethod
+    def get_bot_guilds(cls):
+        """
+        Get guilds for the bot using the bot token.
+        
+        Returns:
+            list: List of guild data or None
+        """
+        headers = {
+            'Authorization': f'Bot {settings.DISCORD_BOT_TOKEN}',
+            'Content-Type': 'application/json',
+        }
+        
+        try:
+            response = requests.get(
+                f"{cls.BASE_URL}/users/@me/guilds",
+                headers=headers
+            )
+            
+            if response.status_code >= 200 and response.status_code < 300:
+                return response.json()
+            else:
+                logger.error(f"Error getting bot guilds: {response.status_code} - {response.text}")
+                return None
+                
+        except Exception as e:
+            logger.exception(f"Error getting bot guilds: {e}")
+            return None
\ No newline at end of file
diff --git a/dashboard/utils/token_storage.py b/dashboard/utils/token_storage.py
new file mode 100644
index 0000000..92133b6
--- /dev/null
+++ b/dashboard/utils/token_storage.py
@@ -0,0 +1,199 @@
+"""
+Utilities for securely storing and retrieving OAuth tokens.
+Uses Fernet symmetric encryption for token storage.
+"""
+
+import logging
+import json
+import base64
+from cryptography.fernet import Fernet, InvalidToken
+from django.conf import settings
+from django.utils import timezone
+from datetime import timedelta
+from allauth.socialaccount.models import SocialToken, SocialAccount
+
+logger = logging.getLogger(__name__)
+
+class TokenManager:
+    """
+    Manage Discord OAuth tokens securely using Fernet encryption.
+    Handles token encryption, decryption, and refresh.
+    """
+    
+    def __init__(self):
+        """Initialize the TokenManager with the encryption key."""
+        # Use the BOT_TOKEN_KEY from settings for encryption
+        try:
+            self.fernet = Fernet(settings.BOT_TOKEN_KEY.encode() if isinstance(settings.BOT_TOKEN_KEY, str) else settings.BOT_TOKEN_KEY)
+        except Exception as e:
+            logger.error(f"Error initializing TokenManager: {e}")
+            self.fernet = None
+    
+    def encrypt_token(self, token_string):
+        """
+        Encrypt a token string.
+        
+        Args:
+            token_string: The token string to encrypt
+            
+        Returns:
+            bytes: The encrypted token
+        """
+        if not self.fernet:
+            logger.error("Fernet not initialized, cannot encrypt token")
+            return None
+            
+        try:
+            if isinstance(token_string, str):
+                token_bytes = token_string.encode()
+            else:
+                token_bytes = token_string
+                
+            return self.fernet.encrypt(token_bytes)
+        except Exception as e:
+            logger.exception(f"Error encrypting token: {e}")
+            return None
+    
+    def decrypt_token(self, encrypted_token):
+        """
+        Decrypt an encrypted token.
+        
+        Args:
+            encrypted_token: The encrypted token
+            
+        Returns:
+            str: The decrypted token string or None if decryption fails
+        """
+        if not self.fernet:
+            logger.error("Fernet not initialized, cannot decrypt token")
+            return None
+            
+        try:
+            decrypted = self.fernet.decrypt(encrypted_token)
+            return decrypted.decode()
+        except InvalidToken:
+            logger.error("Invalid token provided for decryption")
+            return None
+        except Exception as e:
+            logger.exception(f"Error decrypting token: {e}")
+            return None
+    
+    def store_tokens(self, user, provider, tokens):
+        """
+        Store OAuth tokens securely for a user.
+        
+        Args:
+            user: The user to store tokens for
+            provider: The OAuth provider (e.g., 'discord')
+            tokens: Dictionary containing 'access_token', 'refresh_token', and 'expires_in'
+            
+        Returns:
+            bool: True if successful, False otherwise
+        """
+        try:
+            # Get the SocialAccount
+            social_account = SocialAccount.objects.filter(
+                user=user, 
+                provider=provider
+            ).first()
+            
+            if not social_account:
+                logger.error(f"No social account found for user {user.username} with provider {provider}")
+                return False
+                
+            # Calculate expiry time
+            expires_at = None
+            if 'expires_in' in tokens:
+                expires_at = timezone.now() + timedelta(seconds=int(tokens['expires_in']))
+                
+            # Get or create SocialToken
+            social_token, created = SocialToken.objects.get_or_create(
+                account=social_account,
+                defaults={
+                    'token': tokens['access_token'],
+                    'token_secret': tokens.get('refresh_token', ''),
+                    'expires_at': expires_at
+                }
+            )
+            
+            # Update existing token
+            if not created:
+                social_token.token = tokens['access_token']
+                if 'refresh_token' in tokens:
+                    social_token.token_secret = tokens['refresh_token']
+                social_token.expires_at = expires_at
+                social_token.save()
+                
+            return True
+            
+        except Exception as e:
+            logger.exception(f"Error storing tokens: {e}")
+            return False
+    
+    def get_tokens(self, user, provider):
+        """
+        Get stored OAuth tokens for a user.
+        
+        Args:
+            user: The user to get tokens for
+            provider: The OAuth provider (e.g., 'discord')
+            
+        Returns:
+            dict: Dictionary containing tokens and expiry information or None
+        """
+        try:
+            social_token = SocialToken.objects.filter(
+                account__user=user,
+                account__provider=provider
+            ).first()
+            
+            if not social_token:
+                logger.warning(f"No token found for user {user.username} with provider {provider}")
+                return None
+                
+            # Check if token is expired
+            if social_token.expires_at and social_token.expires_at <= timezone.now():
+                logger.warning(f"Token expired for user {user.username} with provider {provider}")
+                return None
+                
+            # Return the tokens and expiry info
+            return {
+                'access_token': social_token.token,
+                'refresh_token': social_token.token_secret,
+                'expires_at': social_token.expires_at.isoformat() if social_token.expires_at else None
+            }
+            
+        except Exception as e:
+            logger.exception(f"Error getting tokens: {e}")
+            return None
+    
+    def is_token_valid(self, user, provider):
+        """
+        Check if a user's token is valid (not expired).
+        
+        Args:
+            user: The user to check
+            provider: The OAuth provider (e.g., 'discord')
+            
+        Returns:
+            bool: True if token is valid, False otherwise
+        """
+        try:
+            social_token = SocialToken.objects.filter(
+                account__user=user,
+                account__provider=provider
+            ).first()
+            
+            if not social_token:
+                return False
+                
+            # Check if token is expired
+            if not social_token.expires_at:
+                return True  # No expiry set, assume valid
+                
+            # Add a 5-minute buffer
+            return social_token.expires_at > timezone.now() + timedelta(minutes=5)
+            
+        except Exception as e:
+            logger.exception(f"Error checking token validity: {e}")
+            return False
\ No newline at end of file
-- 
2.49.0.windows.1


From 204d10cd9a2abadc7b4caa3f42bcd317281d5e52 Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 26 Apr 2025 22:11:47 +0800
Subject: [PATCH 06/10] feat: Create login/logout UI and route protection

---
 bot_management/tests/__init__.py    |   3 +
 bot_management/tests/test_models.py |  95 +++++++++++++
 bot_management/tests/test_views.py  | 146 +++++++++++++++++++
 dashboard/decorators.py             | 150 ++++++++++++++++++++
 dashboard/tests/test_decorators.py  | 210 ++++++++++++++++++++++++++++
 templates/account/logout.html       |  34 +++++
 6 files changed, 638 insertions(+)
 create mode 100644 bot_management/tests/__init__.py
 create mode 100644 bot_management/tests/test_models.py
 create mode 100644 bot_management/tests/test_views.py
 create mode 100644 dashboard/decorators.py
 create mode 100644 dashboard/tests/test_decorators.py
 create mode 100644 templates/account/logout.html

diff --git a/bot_management/tests/__init__.py b/bot_management/tests/__init__.py
new file mode 100644
index 0000000..0636ff9
--- /dev/null
+++ b/bot_management/tests/__init__.py
@@ -0,0 +1,3 @@
+"""
+Bot management tests package.
+"""
\ No newline at end of file
diff --git a/bot_management/tests/test_models.py b/bot_management/tests/test_models.py
new file mode 100644
index 0000000..76801b0
--- /dev/null
+++ b/bot_management/tests/test_models.py
@@ -0,0 +1,95 @@
+from django.test import TestCase
+from django.contrib.auth.models import User
+from cryptography.fernet import Fernet
+import environ
+import os
+
+from bot_management.models import Bot, BotLog
+
+class BotModelTest(TestCase):
+    """Tests for the Bot model"""
+    
+    def setUp(self):
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='password123'
+        )
+        
+        # Create a test bot
+        self.bot = Bot.objects.create(
+            name='Test Bot',
+            description='A test bot for unit tests',
+            owner=self.user,
+            token='mock_token',
+            client_id='123456789',
+            bot_user_id='987654321',
+            avatar_url='https://example.com/avatar.png',
+            is_active=True
+        )
+    
+    def test_bot_string_representation(self):
+        """Test the string representation of a Bot"""
+        self.assertEqual(str(self.bot), 'Test Bot')
+    
+    def test_bot_fields(self):
+        """Test that bot fields are saved correctly"""
+        self.assertEqual(self.bot.name, 'Test Bot')
+        self.assertEqual(self.bot.description, 'A test bot for unit tests')
+        self.assertEqual(self.bot.owner, self.user)
+        self.assertEqual(self.bot.client_id, '123456789')
+        self.assertEqual(self.bot.bot_user_id, '987654321')
+        self.assertEqual(self.bot.avatar_url, 'https://example.com/avatar.png')
+        self.assertTrue(self.bot.is_active)
+        
+    def test_token_encryption(self):
+        """Test that the token is encrypted when saved"""
+        # Token should be encrypted and not equal to the plaintext
+        self.assertNotEqual(self.bot.token, 'mock_token')
+        # Token should be a string
+        self.assertIsInstance(self.bot.token, str)
+        # Token should be longer after encryption
+        self.assertGreater(len(self.bot.token), len('mock_token'))
+
+
+class BotLogModelTest(TestCase):
+    """Tests for the BotLog model"""
+    
+    def setUp(self):
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='password123'
+        )
+        
+        # Create a test bot
+        self.bot = Bot.objects.create(
+            name='Test Bot',
+            description='A test bot for unit tests',
+            owner=self.user,
+            token='mock_token',
+            client_id='123456789',
+            bot_user_id='987654321',
+            is_active=True
+        )
+        
+        # Create a test log entry
+        self.log = BotLog.objects.create(
+            bot=self.bot,
+            event_type='TEST_EVENT',
+            description='This is a test log entry'
+        )
+    
+    def test_log_string_representation(self):
+        """Test the string representation of a BotLog"""
+        expected = f"{self.bot.name} - TEST_EVENT - {self.log.timestamp}"
+        self.assertEqual(str(self.log), expected)
+    
+    def test_log_fields(self):
+        """Test that log fields are saved correctly"""
+        self.assertEqual(self.log.bot, self.bot)
+        self.assertEqual(self.log.event_type, 'TEST_EVENT')
+        self.assertEqual(self.log.description, 'This is a test log entry')
+        self.assertIsNotNone(self.log.timestamp)
\ No newline at end of file
diff --git a/bot_management/tests/test_views.py b/bot_management/tests/test_views.py
new file mode 100644
index 0000000..38fce55
--- /dev/null
+++ b/bot_management/tests/test_views.py
@@ -0,0 +1,146 @@
+from django.test import TestCase, Client
+from django.urls import reverse
+from django.contrib.auth.models import User
+from bot_management.models import Bot, BotLog
+from django.contrib.messages import get_messages
+
+
+class BotViewsTest(TestCase):
+    """Tests for the bot_management views"""
+    
+    def setUp(self):
+        # Create a test client
+        self.client = Client()
+        
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='password123'
+        )
+        
+        # Create a test bot
+        self.bot = Bot.objects.create(
+            name='Test Bot',
+            description='A test bot for unit tests',
+            owner=self.user,
+            token='mock_token',
+            client_id='123456789',
+            bot_user_id='987654321',
+            is_active=True
+        )
+        
+        # Login the test user
+        self.client.login(username='testuser', password='password123')
+    
+    def test_bot_list_view(self):
+        """Test the bot list view"""
+        # Assuming there's a url named 'bot_list'
+        url = reverse('bot_management:bot_list')
+        response = self.client.get(url)
+        
+        # Check that the response is 200 OK
+        self.assertEqual(response.status_code, 200)
+        
+        # Check that the bot is in the context
+        self.assertIn('bots', response.context)
+        self.assertIn(self.bot, response.context['bots'])
+    
+    def test_bot_detail_view(self):
+        """Test the bot detail view"""
+        # Assuming there's a url named 'bot_detail' that takes a bot_id
+        url = reverse('bot_management:bot_detail', args=[self.bot.id])
+        response = self.client.get(url)
+        
+        # Check that the response is 200 OK
+        self.assertEqual(response.status_code, 200)
+        
+        # Check that the bot is in the context
+        self.assertEqual(response.context['bot'], self.bot)
+    
+    def test_create_bot_view_get(self):
+        """Test the GET request to the create bot view"""
+        # Assuming there's a url named 'bot_create'
+        url = reverse('bot_management:bot_create')
+        response = self.client.get(url)
+        
+        # Check that the response is 200 OK
+        self.assertEqual(response.status_code, 200)
+        
+        # Check that the form is in the context
+        self.assertIn('form', response.context)
+    
+    def test_create_bot_view_post(self):
+        """Test the POST request to the create bot view"""
+        # Assuming there's a url named 'bot_create'
+        url = reverse('bot_management:bot_create')
+        
+        # Bot data to submit
+        bot_data = {
+            'name': 'New Test Bot',
+            'description': 'A new test bot for unit tests',
+            'token': 'new_mock_token',
+            'client_id': '987654321',
+            'bot_user_id': '123456789',
+            'is_active': True
+        }
+        
+        # Submit the form
+        response = self.client.post(url, bot_data, follow=True)
+        
+        # Check that the bot was created
+        self.assertTrue(Bot.objects.filter(name='New Test Bot').exists())
+        
+        # Check for a success message
+        messages = list(get_messages(response.wsgi_request))
+        self.assertGreater(len(messages), 0)
+        
+        # Check redirection to bot list
+        # Assuming successful submission redirects to bot_list
+        self.assertRedirects(response, reverse('bot_management:bot_list'))
+    
+    def test_update_bot_view(self):
+        """Test the update bot view"""
+        # Assuming there's a url named 'bot_update' that takes a bot_id
+        url = reverse('bot_management:bot_update', args=[self.bot.id])
+        
+        # Updated bot data
+        updated_data = {
+            'name': 'Updated Test Bot',
+            'description': 'An updated test bot for unit tests',
+            'token': 'updated_mock_token',
+            'client_id': '111222333',
+            'bot_user_id': '444555666',
+            'is_active': True
+        }
+        
+        # Submit the form
+        response = self.client.post(url, updated_data, follow=True)
+        
+        # Refresh the bot from the database
+        self.bot.refresh_from_db()
+        
+        # Check that the bot was updated
+        self.assertEqual(self.bot.name, 'Updated Test Bot')
+        self.assertEqual(self.bot.description, 'An updated test bot for unit tests')
+        self.assertEqual(self.bot.client_id, '111222333')
+        self.assertEqual(self.bot.bot_user_id, '444555666')
+        
+        # Check redirection to bot detail
+        # Assuming successful submission redirects to bot_detail
+        self.assertRedirects(response, reverse('bot_management:bot_detail', args=[self.bot.id]))
+    
+    def test_delete_bot_view(self):
+        """Test the delete bot view"""
+        # Assuming there's a url named 'bot_delete' that takes a bot_id
+        url = reverse('bot_management:bot_delete', args=[self.bot.id])
+        
+        # Submit the form
+        response = self.client.post(url, follow=True)
+        
+        # Check that the bot was deleted
+        self.assertFalse(Bot.objects.filter(id=self.bot.id).exists())
+        
+        # Check redirection to bot list
+        # Assuming successful deletion redirects to bot_list
+        self.assertRedirects(response, reverse('bot_management:bot_list'))
\ No newline at end of file
diff --git a/dashboard/decorators.py b/dashboard/decorators.py
new file mode 100644
index 0000000..558f45c
--- /dev/null
+++ b/dashboard/decorators.py
@@ -0,0 +1,150 @@
+"""
+Custom decorators for the Social Cube dashboard.
+Includes decorators for route protection and permission checking.
+"""
+
+import logging
+from functools import wraps
+from django.shortcuts import redirect
+from django.urls import reverse
+from django.http import HttpResponseForbidden
+from django.contrib import messages
+from allauth.socialaccount.models import SocialAccount
+from .utils.token_storage import TokenManager
+
+logger = logging.getLogger(__name__)
+
+def discord_login_required(view_func):
+    """
+    Decorator for views that require Discord OAuth login.
+    Redirects to the login page if the user is not authenticated
+    or doesn't have a Discord account linked.
+    """
+    @wraps(view_func)
+    def _wrapped_view(request, *args, **kwargs):
+        # Check if user is authenticated
+        if not request.user.is_authenticated:
+            # Store the requested URL for post-login redirect
+            next_url = request.get_full_path()
+            login_url = f"{reverse('account_login')}?next={next_url}"
+            return redirect(login_url)
+            
+        # Check if user has a Discord account
+        try:
+            social_account = SocialAccount.objects.get(
+                user=request.user,
+                provider='discord'
+            )
+        except SocialAccount.DoesNotExist:
+            # User is authenticated but doesn't have a Discord account
+            messages.warning(
+                request, 
+                "This page requires a Discord account. Please link your Discord account."
+            )
+            return redirect('account_login')
+            
+        # Check if Discord token is valid
+        token_manager = TokenManager()
+        if not token_manager.is_token_valid(request.user, 'discord'):
+            # Token is expired or invalid
+            messages.warning(
+                request, 
+                "Your Discord authorization has expired. Please log in again."
+            )
+            # Log the user out to force re-authentication
+            from django.contrib.auth import logout
+            logout(request)
+            return redirect('account_login')
+            
+        # All checks passed, continue to the view
+        return view_func(request, *args, **kwargs)
+    
+    return _wrapped_view
+
+def bot_owner_required(view_func):
+    """
+    Decorator for views that require bot ownership.
+    Checks if the user is the owner of the bot specified in the URL.
+    Requires 'bot_id' to be in the URL or passed as a keyword argument.
+    """
+    @wraps(view_func)
+    def _wrapped_view(request, *args, **kwargs):
+        # Must be authenticated first
+        if not request.user.is_authenticated:
+            next_url = request.get_full_path()
+            login_url = f"{reverse('account_login')}?next={next_url}"
+            return redirect(login_url)
+            
+        # Get the bot ID from kwargs or URL parameters
+        bot_id = kwargs.get('bot_id') or request.GET.get('bot_id')
+        if not bot_id:
+            logger.error("bot_owner_required: No bot_id found in URL or kwargs")
+            return HttpResponseForbidden("Bot ID not provided")
+            
+        # Import here to avoid circular imports
+        from .models import Bot
+        
+        # Check if the user is the owner of the bot
+        try:
+            bot = Bot.objects.get(id=bot_id)
+            if bot.owner != request.user:
+                logger.warning(f"User {request.user} attempted to access bot {bot_id} owned by {bot.owner}")
+                return HttpResponseForbidden("You don't have permission to access this bot")
+        except Bot.DoesNotExist:
+            logger.error(f"bot_owner_required: Bot with ID {bot_id} not found")
+            return HttpResponseForbidden("Bot not found")
+            
+        # All checks passed, continue to the view
+        return view_func(request, *args, **kwargs)
+    
+    return _wrapped_view
+
+def guild_access_required(view_func):
+    """
+    Decorator for views that require access to a specific Discord guild.
+    Checks if the user is a member of the guild specified in the URL.
+    Requires 'guild_id' to be in the URL or passed as a keyword argument.
+    """
+    @wraps(view_func)
+    def _wrapped_view(request, *args, **kwargs):
+        # Must have Discord login first
+        if not hasattr(request.user, 'socialaccount_set'):
+            next_url = request.get_full_path()
+            login_url = f"{reverse('account_login')}?next={next_url}"
+            return redirect(login_url)
+            
+        # Get the guild ID from kwargs or URL parameters
+        guild_id = kwargs.get('guild_id') or request.GET.get('guild_id')
+        if not guild_id:
+            logger.error("guild_access_required: No guild_id found in URL or kwargs")
+            return HttpResponseForbidden("Guild ID not provided")
+            
+        # Check if the user is a member of the guild
+        try:
+            # Import here to avoid circular imports
+            from .utils.discord_api import DiscordAPI
+            
+            # Get the user's guilds
+            discord_api = DiscordAPI(user=request.user)
+            guilds = discord_api.get_user_guilds()
+            
+            if not guilds:
+                logger.error(f"guild_access_required: Failed to get guilds for user {request.user}")
+                messages.error(request, "Failed to retrieve your Discord servers. Please try again later.")
+                return redirect('dashboard:index')
+                
+            # Check if the guild ID is in the user's guilds
+            guild_ids = [str(guild['id']) for guild in guilds]
+            if str(guild_id) not in guild_ids:
+                logger.warning(f"User {request.user} attempted to access guild {guild_id} but is not a member")
+                return HttpResponseForbidden("You don't have access to this Discord server")
+                
+        except Exception as e:
+            logger.exception(f"guild_access_required: Error checking guild access - {e}")
+            messages.error(request, "An error occurred while checking your Discord server access.")
+            return redirect('dashboard:index')
+            
+        # All checks passed, continue to the view
+        return view_func(request, *args, **kwargs)
+    
+    return _wrapped_view
\ No newline at end of file
diff --git a/dashboard/tests/test_decorators.py b/dashboard/tests/test_decorators.py
new file mode 100644
index 0000000..d668ba9
--- /dev/null
+++ b/dashboard/tests/test_decorators.py
@@ -0,0 +1,210 @@
+"""
+Tests for custom decorators.
+"""
+from django.test import TestCase, RequestFactory
+from django.contrib.auth.models import User
+from django.http import HttpResponse
+from django.urls import reverse
+from django.contrib.sessions.middleware import SessionMiddleware
+from django.contrib.messages.middleware import MessageMiddleware
+from django.contrib.sites.models import Site
+from allauth.socialaccount.models import SocialAccount, SocialToken
+from django.utils import timezone
+from datetime import timedelta
+from unittest.mock import patch, MagicMock
+from dashboard.decorators import discord_login_required, bot_owner_required
+from dashboard.models import Bot
+
+class DecoratorTest(TestCase):
+    """Test the custom decorators."""
+    
+    def setUp(self):
+        """Set up test data."""
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='testpassword'
+        )
+        
+        # Create another user
+        self.other_user = User.objects.create_user(
+            username='otheruser',
+            email='other@example.com',
+            password='testpassword'
+        )
+        
+        # Set up site
+        self.site = Site.objects.get_or_create(pk=1)[0]
+        self.site.domain = 'testserver'
+        self.site.name = 'testserver'
+        self.site.save()
+        
+        # Create Discord social account
+        self.social_account = SocialAccount.objects.create(
+            user=self.user,
+            provider='discord',
+            uid='12345678901234',
+            extra_data={
+                'id': '12345678901234',
+                'username': 'discord_user',
+                'discriminator': '1234',
+            }
+        )
+        
+        # Create token
+        self.social_token = SocialToken.objects.create(
+            account=self.social_account,
+            token='test_access_token',
+            token_secret='test_refresh_token',
+            expires_at=timezone.now() + timedelta(hours=1)
+        )
+        
+        # Create a bot owned by the test user
+        self.bot = Bot.objects.create(
+            name='Test Bot',
+            token='test_bot_token',
+            owner=self.user
+        )
+        
+        # Create a request factory
+        self.factory = RequestFactory()
+    
+    def _get_request_with_session_and_messages(self, url, user=None):
+        """Helper method to create a request with session and messages."""
+        request = self.factory.get(url)
+        request.user = user
+        
+        # Add session
+        middleware = SessionMiddleware(lambda x: x)
+        middleware.process_request(request)
+        request.session.save()
+        
+        # Add messages
+        middleware = MessageMiddleware(lambda x: x)
+        middleware.process_request(request)
+        request.session.save()
+        
+        return request
+    
+    def test_discord_login_required_authenticated_with_discord(self):
+        """Test the discord_login_required decorator with an authenticated user with Discord."""
+        # Define a simple view
+        @discord_login_required
+        def test_view(request):
+            return HttpResponse("Success")
+            
+        # Create a request
+        request = self._get_request_with_session_and_messages('/', self.user)
+        
+        # Test the view
+        with patch('dashboard.decorators.TokenManager.is_token_valid') as mock_is_valid:
+            mock_is_valid.return_value = True
+            response = test_view(request)
+            
+        # Check that the view was accessed
+        self.assertEqual(response.status_code, 200)
+        self.assertEqual(response.content, b"Success")
+    
+    def test_discord_login_required_not_authenticated(self):
+        """Test the discord_login_required decorator with a non-authenticated user."""
+        # Define a simple view
+        @discord_login_required
+        def test_view(request):
+            return HttpResponse("Success")
+            
+        # Create a request from an anonymous user
+        request = self._get_request_with_session_and_messages('/')
+        
+        # Test the view
+        response = test_view(request)
+        
+        # Check that we were redirected to login
+        self.assertEqual(response.status_code, 302)
+        self.assertTrue(response.url.startswith(reverse('account_login')))
+    
+    def test_discord_login_required_no_discord_account(self):
+        """Test the discord_login_required decorator with a user without a Discord account."""
+        # Define a simple view
+        @discord_login_required
+        def test_view(request):
+            return HttpResponse("Success")
+            
+        # Create a request from a user without Discord
+        request = self._get_request_with_session_and_messages('/', self.other_user)
+        
+        # Test the view
+        response = test_view(request)
+        
+        # Check that we were redirected to login
+        self.assertEqual(response.status_code, 302)
+        self.assertEqual(response.url, reverse('account_login'))
+    
+    def test_discord_login_required_invalid_token(self):
+        """Test the discord_login_required decorator with an expired token."""
+        # Define a simple view
+        @discord_login_required
+        def test_view(request):
+            return HttpResponse("Success")
+            
+        # Create a request
+        request = self._get_request_with_session_and_messages('/', self.user)
+        
+        # Test the view
+        with patch('dashboard.decorators.TokenManager.is_token_valid') as mock_is_valid:
+            mock_is_valid.return_value = False
+            response = test_view(request)
+            
+        # Check that we were redirected to login
+        self.assertEqual(response.status_code, 302)
+        self.assertEqual(response.url, reverse('account_login'))
+    
+    def test_bot_owner_required_owner(self):
+        """Test the bot_owner_required decorator with the bot owner."""
+        # Define a simple view
+        @bot_owner_required
+        def test_view(request, bot_id):
+            return HttpResponse("Success")
+            
+        # Create a request from the bot owner
+        request = self._get_request_with_session_and_messages('/', self.user)
+        
+        # Test the view with the correct bot ID
+        response = test_view(request, bot_id=self.bot.id)
+        
+        # Check that the view was accessed
+        self.assertEqual(response.status_code, 200)
+        self.assertEqual(response.content, b"Success")
+    
+    def test_bot_owner_required_not_owner(self):
+        """Test the bot_owner_required decorator with a user who is not the owner."""
+        # Define a simple view
+        @bot_owner_required
+        def test_view(request, bot_id):
+            return HttpResponse("Success")
+            
+        # Create a request from another user
+        request = self._get_request_with_session_and_messages('/', self.other_user)
+        
+        # Test the view with the correct bot ID
+        response = test_view(request, bot_id=self.bot.id)
+        
+        # Check that access was denied
+        self.assertEqual(response.status_code, 403)
+    
+    def test_bot_owner_required_not_authenticated(self):
+        """Test the bot_owner_required decorator with a non-authenticated user."""
+        # Define a simple view
+        @bot_owner_required
+        def test_view(request, bot_id):
+            return HttpResponse("Success")
+            
+        # Create a request from an anonymous user
+        request = self._get_request_with_session_and_messages('/')
+        
+        # Test the view with the correct bot ID
+        response = test_view(request, bot_id=self.bot.id)
+        
+        # Check that we were redirected to login
+        self.assertEqual(response.status_code, 302)
+        self.assertTrue(response.url.startswith(reverse('account_login')))
\ No newline at end of file
diff --git a/templates/account/logout.html b/templates/account/logout.html
new file mode 100644
index 0000000..14cc939
--- /dev/null
+++ b/templates/account/logout.html
@@ -0,0 +1,34 @@
+{% extends 'dashboard/base.html' %}
+{% load i18n %}
+
+{% block content %}
+<div class="container mx-auto px-4 py-8">
+    <div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-8">
+        <div class="text-center">
+            <h1 class="text-3xl font-bold mb-4">{% trans "Sign Out" %}</h1>
+            
+            <p class="text-gray-600 mb-6">
+                {% trans "Are you sure you want to sign out?" %}
+            </p>
+            
+            <form method="post" action="{% url 'account_logout' %}">
+                {% csrf_token %}
+                
+                {% if redirect_field_value %}
+                    <input type="hidden" name="{{ redirect_field_name }}" value="{{ redirect_field_value }}" />
+                {% endif %}
+                
+                <div class="flex space-x-4 justify-center">
+                    <button type="submit" class="bg-red-500 text-white py-2 px-6 rounded-lg hover:bg-red-600 transition-colors">
+                        {% trans "Sign Out" %}
+                    </button>
+                    
+                    <a href="{% url 'dashboard:index' %}" class="bg-gray-300 text-gray-800 py-2 px-6 rounded-lg hover:bg-gray-400 transition-colors">
+                        {% trans "Cancel" %}
+                    </a>
+                </div>
+            </form>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
-- 
2.49.0.windows.1


From 210f41d1027b767bb243d9677f025e9a91764342 Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 26 Apr 2025 22:19:48 +0800
Subject: [PATCH 07/10] feat: Implement Bot Registration and Management Models
 with CRUD operations

---
 bot_management/admin.py                       |  35 ++-
 bot_management/forms.py                       |  67 +++++
 .../templates/bot_management/bot_detail.html  | 231 ++++++++++++++++++
 .../templates/bot_management/bot_form.html    | 192 +++++++++++++++
 .../templates/bot_management/bot_logs.html    |  73 ++++++
 .../templates/bot_management/index.html       |  78 +++++-
 bot_management/urls.py                        |   8 +-
 bot_management/views.py                       | 140 ++++++++++-
 8 files changed, 814 insertions(+), 10 deletions(-)
 create mode 100644 bot_management/forms.py
 create mode 100644 bot_management/templates/bot_management/bot_detail.html
 create mode 100644 bot_management/templates/bot_management/bot_form.html
 create mode 100644 bot_management/templates/bot_management/bot_logs.html

diff --git a/bot_management/admin.py b/bot_management/admin.py
index 8c38f3f..afc50f9 100644
--- a/bot_management/admin.py
+++ b/bot_management/admin.py
@@ -1,3 +1,36 @@
 from django.contrib import admin
+from .models import Bot, BotLog
 
-# Register your models here.
+@admin.register(Bot)
+class BotAdmin(admin.ModelAdmin):
+    list_display = ('name', 'owner', 'client_id', 'is_active', 'created_at')
+    list_filter = ('is_active', 'created_at')
+    search_fields = ('name', 'client_id', 'bot_user_id', 'owner__username')
+    readonly_fields = ('created_at', 'updated_at')
+    fieldsets = (
+        ('Bot Information', {
+            'fields': ('name', 'description', 'avatar_url')
+        }),
+        ('Owner Information', {
+            'fields': ('owner',)
+        }),
+        ('Discord Credentials', {
+            'fields': ('token', 'client_id', 'bot_user_id'),
+            'classes': ('collapse',),
+        }),
+        ('Status', {
+            'fields': ('is_active', 'created_at', 'updated_at')
+        }),
+    )
+
+@admin.register(BotLog)
+class BotLogAdmin(admin.ModelAdmin):
+    list_display = ('bot', 'event_type', 'timestamp')
+    list_filter = ('event_type', 'timestamp')
+    search_fields = ('bot__name', 'event_type', 'description')
+    readonly_fields = ('timestamp',)
+    fieldsets = (
+        ('Event Information', {
+            'fields': ('bot', 'event_type', 'description', 'timestamp')
+        }),
+    )
\ No newline at end of file
diff --git a/bot_management/forms.py b/bot_management/forms.py
new file mode 100644
index 0000000..4ac68ed
--- /dev/null
+++ b/bot_management/forms.py
@@ -0,0 +1,67 @@
+from django import forms
+from .models import Bot, BotLog
+import re
+
+class BotForm(forms.ModelForm):
+    """Form for creating and editing bots"""
+    
+    token = forms.CharField(
+        widget=forms.TextInput(attrs={'class': 'form-control'}),
+        help_text='Enter your Discord bot token from the Developer Portal'
+    )
+    
+    class Meta:
+        model = Bot
+        fields = ['name', 'description', 'token', 'client_id', 'bot_user_id', 'avatar_url', 'is_active']
+        widgets = {
+            'name': forms.TextInput(attrs={'class': 'form-control'}),
+            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
+            'client_id': forms.TextInput(attrs={'class': 'form-control'}),
+            'bot_user_id': forms.TextInput(attrs={'class': 'form-control'}),
+            'avatar_url': forms.URLInput(attrs={'class': 'form-control'}),
+            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+        }
+        
+    def clean_token(self):
+        """Validate the bot token format"""
+        token = self.cleaned_data.get('token')
+        
+        # Basic format validation for Discord bot tokens
+        if not re.match(r'^[A-Za-z0-9._-]+$', token):
+            raise forms.ValidationError("Bot token contains invalid characters")
+            
+        # Most Discord bot tokens are at least 50 characters long
+        if len(token) < 50:
+            raise forms.ValidationError("Bot token is too short to be valid")
+            
+        return token
+        
+    def clean_client_id(self):
+        """Validate the client ID (should be numeric)"""
+        client_id = self.cleaned_data.get('client_id')
+        
+        if not client_id.isdigit():
+            raise forms.ValidationError("Client ID must contain only digits")
+            
+        return client_id
+        
+    def clean_bot_user_id(self):
+        """Validate the bot user ID (should be numeric)"""
+        bot_user_id = self.cleaned_data.get('bot_user_id')
+        
+        if not bot_user_id.isdigit():
+            raise forms.ValidationError("Bot user ID must contain only digits")
+            
+        return bot_user_id
+
+class BotLogForm(forms.ModelForm):
+    """Form for creating log entries"""
+    
+    class Meta:
+        model = BotLog
+        fields = ['bot', 'event_type', 'description']
+        widgets = {
+            'bot': forms.Select(attrs={'class': 'form-select'}),
+            'event_type': forms.TextInput(attrs={'class': 'form-control'}),
+            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
+        }
\ No newline at end of file
diff --git a/bot_management/templates/bot_management/bot_detail.html b/bot_management/templates/bot_management/bot_detail.html
new file mode 100644
index 0000000..3ee5746
--- /dev/null
+++ b/bot_management/templates/bot_management/bot_detail.html
@@ -0,0 +1,231 @@
+{% extends 'base.html' %}
+{% load static %}
+
+{% block title %}{{ title }}{% endblock %}
+
+{% block content %}
+<div class="container py-4">
+    <nav aria-label="breadcrumb">
+        <ol class="breadcrumb">
+            <li class="breadcrumb-item"><a href="{% url 'bot_management:index' %}">Bot Management</a></li>
+            <li class="breadcrumb-item active" aria-current="page">{{ bot.name }}</li>
+        </ol>
+    </nav>
+    
+    {% if messages %}
+        {% for message in messages %}
+            <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
+                {{ message }}
+                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
+            </div>
+        {% endfor %}
+    {% endif %}
+    
+    <div class="card mb-4">
+        <div class="card-header bg-primary bg-gradient text-white">
+            <div class="d-flex align-items-center">
+                {% if bot.avatar_url %}
+                    <img src="{{ bot.avatar_url }}" alt="{{ bot.name }}" class="rounded-circle me-3" width="48" height="48">
+                {% else %}
+                    <div class="bg-secondary rounded-circle me-3 d-flex align-items-center justify-content-center" style="width: 48px; height: 48px;">
+                        <i class="bi bi-robot text-white fs-4"></i>
+                    </div>
+                {% endif %}
+                <div>
+                    <h1 class="card-title fs-3 mb-0">{{ bot.name }}</h1>
+                    <span class="badge {% if bot.is_active %}bg-success{% else %}bg-secondary{% endif %}">
+                        {% if bot.is_active %}Active{% else %}Inactive{% endif %}
+                    </span>
+                </div>
+                
+                <div class="ms-auto">
+                    <div class="dropdown">
+                        <button class="btn btn-sm btn-light dropdown-toggle" type="button" id="botActionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
+                            Actions
+                        </button>
+                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="botActionDropdown">
+                            <li><a class="dropdown-item" href="{% url 'bot_management:bot_update' bot.id %}">
+                                <i class="bi bi-pencil me-2"></i>Edit Bot
+                            </a></li>
+                            <li><a class="dropdown-item" href="#" id="toggleStatusBtn" data-bot-id="{{ bot.id }}" data-active="{{ bot.is_active|yesno:'true,false' }}">
+                                {% if bot.is_active %}
+                                    <i class="bi bi-pause-circle me-2"></i>Deactivate Bot
+                                {% else %}
+                                    <i class="bi bi-play-circle me-2"></i>Activate Bot
+                                {% endif %}
+                            </a></li>
+                            <li><a class="dropdown-item" href="{% url 'bot_management:bot_logs' bot.id %}">
+                                <i class="bi bi-list-ul me-2"></i>View All Logs
+                            </a></li>
+                            <li><hr class="dropdown-divider"></li>
+                            <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteModal">
+                                <i class="bi bi-trash me-2"></i>Delete Bot
+                            </a></li>
+                        </ul>
+                    </div>
+                </div>
+            </div>
+        </div>
+        
+        <div class="card-body">
+            <div class="row">
+                <div class="col-md-8">
+                    <h5 class="card-title">Bot Information</h5>
+                    <p class="card-text">
+                        {% if bot.description %}
+                            {{ bot.description }}
+                        {% else %}
+                            <span class="text-muted">No description provided</span>
+                        {% endif %}
+                    </p>
+                    
+                    <div class="row mt-4">
+                        <div class="col-md-6">
+                            <h6>Discord Information</h6>
+                            <ul class="list-group list-group-flush">
+                                <li class="list-group-item d-flex justify-content-between">
+                                    <span>Client ID:</span>
+                                    <span class="text-monospace">{{ bot.client_id }}</span>
+                                </li>
+                                <li class="list-group-item d-flex justify-content-between">
+                                    <span>Bot User ID:</span>
+                                    <span class="text-monospace">{{ bot.bot_user_id }}</span>
+                                </li>
+                            </ul>
+                        </div>
+                        <div class="col-md-6">
+                            <h6>Bot Status</h6>
+                            <ul class="list-group list-group-flush">
+                                <li class="list-group-item d-flex justify-content-between">
+                                    <span>Status:</span>
+                                    <span class="badge {% if bot.is_active %}bg-success{% else %}bg-secondary{% endif %}">
+                                        {% if bot.is_active %}Active{% else %}Inactive{% endif %}
+                                    </span>
+                                </li>
+                                <li class="list-group-item d-flex justify-content-between">
+                                    <span>Created:</span>
+                                    <span>{{ bot.created_at|date:"M d, Y H:i" }}</span>
+                                </li>
+                                <li class="list-group-item d-flex justify-content-between">
+                                    <span>Last updated:</span>
+                                    <span>{{ bot.updated_at|date:"M d, Y H:i" }}</span>
+                                </li>
+                            </ul>
+                        </div>
+                    </div>
+                </div>
+                
+                <div class="col-md-4">
+                    <div class="card">
+                        <div class="card-header">
+                            <h5 class="card-title mb-0">Recent Activity</h5>
+                        </div>
+                        <div class="card-body p-0">
+                            <ul class="list-group list-group-flush">
+                                {% if logs %}
+                                    {% for log in logs %}
+                                        <li class="list-group-item">
+                                            <div class="d-flex w-100 justify-content-between">
+                                                <h6 class="mb-1">{{ log.event_type }}</h6>
+                                                <small>{{ log.timestamp|date:"M d, H:i" }}</small>
+                                            </div>
+                                            <small>{{ log.description }}</small>
+                                        </li>
+                                    {% endfor %}
+                                {% else %}
+                                    <li class="list-group-item text-center py-3">
+                                        <span class="text-muted">No activity logged yet</span>
+                                    </li>
+                                {% endif %}
+                            </ul>
+                        </div>
+                        {% if logs %}
+                            <div class="card-footer text-center">
+                                <a href="{% url 'bot_management:bot_logs' bot.id %}" class="btn btn-sm btn-outline-primary">
+                                    View All Logs
+                                </a>
+                            </div>
+                        {% endif %}
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+
+<!-- Delete Confirmation Modal -->
+<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
+    <div class="modal-dialog">
+        <div class="modal-content">
+            <div class="modal-header bg-danger text-white">
+                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
+                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
+            </div>
+            <div class="modal-body">
+                <p>Are you sure you want to delete the bot <strong>{{ bot.name }}</strong>?</p>
+                <p class="text-danger"><strong>Warning:</strong> This action cannot be undone. All data associated with this bot will be permanently deleted.</p>
+            </div>
+            <div class="modal-footer">
+                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
+                <form action="{% url 'bot_management:bot_delete' bot.id %}" method="post">
+                    {% csrf_token %}
+                    <button type="submit" class="btn btn-danger">Delete Bot</button>
+                </form>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
+
+{% block extra_js %}
+<script>
+    $(document).ready(function() {
+        // Handle toggle status button
+        $('#toggleStatusBtn').on('click', function(e) {
+            e.preventDefault();
+            
+            var botId = $(this).data('bot-id');
+            var isActive = $(this).data('active');
+            var $btn = $(this);
+            
+            // Send AJAX request to toggle status
+            $.ajax({
+                url: "{% url 'bot_management:toggle_bot_status' bot.id %}",
+                type: 'POST',
+                data: {
+                    'csrfmiddlewaretoken': '{{ csrf_token }}'
+                },
+                success: function(response) {
+                    if (response.success) {
+                        // Update button and labels
+                        if (response.is_active) {
+                            $btn.html('<i class="bi bi-pause-circle me-2"></i>Deactivate Bot');
+                            $btn.data('active', true);
+                            $('.badge').removeClass('bg-secondary').addClass('bg-success').text('Active');
+                        } else {
+                            $btn.html('<i class="bi bi-play-circle me-2"></i>Activate Bot');
+                            $btn.data('active', false);
+                            $('.badge').removeClass('bg-success').addClass('bg-secondary').text('Inactive');
+                        }
+                        
+                        // Show success message
+                        var alert = '<div class="alert alert-success alert-dismissible fade show" role="alert">' +
+                                    response.message +
+                                    '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
+                                    '</div>';
+                        $('.breadcrumb').after(alert);
+                    }
+                },
+                error: function() {
+                    // Show error message
+                    var alert = '<div class="alert alert-danger alert-dismissible fade show" role="alert">' +
+                                'An error occurred while updating the bot status. Please try again.' +
+                                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
+                                '</div>';
+                    $('.breadcrumb').after(alert);
+                }
+            });
+        });
+    });
+</script>
+{% endblock %}
\ No newline at end of file
diff --git a/bot_management/templates/bot_management/bot_form.html b/bot_management/templates/bot_management/bot_form.html
new file mode 100644
index 0000000..d676377
--- /dev/null
+++ b/bot_management/templates/bot_management/bot_form.html
@@ -0,0 +1,192 @@
+{% extends 'base.html' %}
+{% load static %}
+
+{% block title %}{{ title }}{% endblock %}
+
+{% block content %}
+<div class="container py-4">
+    <nav aria-label="breadcrumb">
+        <ol class="breadcrumb">
+            <li class="breadcrumb-item"><a href="{% url 'bot_management:index' %}">Bot Management</a></li>
+            {% if is_create %}
+                <li class="breadcrumb-item active" aria-current="page">Register New Bot</li>
+            {% else %}
+                <li class="breadcrumb-item"><a href="{% url 'bot_management:bot_detail' bot.id %}">{{ bot.name }}</a></li>
+                <li class="breadcrumb-item active" aria-current="page">Edit</li>
+            {% endif %}
+        </ol>
+    </nav>
+    
+    <div class="card shadow-sm">
+        <div class="card-header bg-primary bg-gradient text-white">
+            <h2 class="card-title h4 mb-0">
+                {% if is_create %}
+                    <i class="bi bi-plus-circle me-2"></i> Register New Discord Bot
+                {% else %}
+                    <i class="bi bi-pencil me-2"></i> Edit Bot: {{ bot.name }}
+                {% endif %}
+            </h2>
+        </div>
+        
+        <div class="card-body">
+            <form method="post" class="needs-validation" novalidate>
+                {% csrf_token %}
+                
+                {% if form.non_field_errors %}
+                    <div class="alert alert-danger">
+                        {% for error in form.non_field_errors %}
+                            <p>{{ error }}</p>
+                        {% endfor %}
+                    </div>
+                {% endif %}
+                
+                <div class="row mb-3">
+                    <div class="col-md-6">
+                        <label for="{{ form.name.id_for_label }}" class="form-label">Bot Name</label>
+                        {{ form.name }}
+                        {% if form.name.errors %}
+                            <div class="invalid-feedback d-block">
+                                {% for error in form.name.errors %}
+                                    {{ error }}
+                                {% endfor %}
+                            </div>
+                        {% endif %}
+                        {% if form.name.help_text %}
+                            <div class="form-text">{{ form.name.help_text }}</div>
+                        {% endif %}
+                    </div>
+                    
+                    <div class="col-md-6">
+                        <label for="{{ form.avatar_url.id_for_label }}" class="form-label">Avatar URL</label>
+                        {{ form.avatar_url }}
+                        {% if form.avatar_url.errors %}
+                            <div class="invalid-feedback d-block">
+                                {% for error in form.avatar_url.errors %}
+                                    {{ error }}
+                                {% endfor %}
+                            </div>
+                        {% endif %}
+                        {% if form.avatar_url.help_text %}
+                            <div class="form-text">{{ form.avatar_url.help_text }}</div>
+                        {% endif %}
+                    </div>
+                </div>
+                
+                <div class="mb-3">
+                    <label for="{{ form.description.id_for_label }}" class="form-label">Description</label>
+                    {{ form.description }}
+                    {% if form.description.errors %}
+                        <div class="invalid-feedback d-block">
+                            {% for error in form.description.errors %}
+                                {{ error }}
+                            {% endfor %}
+                        </div>
+                    {% endif %}
+                    {% if form.description.help_text %}
+                        <div class="form-text">{{ form.description.help_text }}</div>
+                    {% endif %}
+                </div>
+                
+                <div class="row mb-3">
+                    <div class="col-md-6">
+                        <label for="{{ form.client_id.id_for_label }}" class="form-label">Client ID</label>
+                        {{ form.client_id }}
+                        {% if form.client_id.errors %}
+                            <div class="invalid-feedback d-block">
+                                {% for error in form.client_id.errors %}
+                                    {{ error }}
+                                {% endfor %}
+                            </div>
+                        {% endif %}
+                        {% if form.client_id.help_text %}
+                            <div class="form-text">{{ form.client_id.help_text }}</div>
+                        {% endif %}
+                    </div>
+                    
+                    <div class="col-md-6">
+                        <label for="{{ form.bot_user_id.id_for_label }}" class="form-label">Bot User ID</label>
+                        {{ form.bot_user_id }}
+                        {% if form.bot_user_id.errors %}
+                            <div class="invalid-feedback d-block">
+                                {% for error in form.bot_user_id.errors %}
+                                    {{ error }}
+                                {% endfor %}
+                            </div>
+                        {% endif %}
+                        {% if form.bot_user_id.help_text %}
+                            <div class="form-text">{{ form.bot_user_id.help_text }}</div>
+                        {% endif %}
+                    </div>
+                </div>
+                
+                <div class="mb-3">
+                    <label for="{{ form.token.id_for_label }}" class="form-label">Bot Token</label>
+                    {{ form.token }}
+                    {% if form.token.errors %}
+                        <div class="invalid-feedback d-block">
+                            {% for error in form.token.errors %}
+                                {{ error }}
+                            {% endfor %}
+                        </div>
+                    {% endif %}
+                    {% if form.token.help_text %}
+                        <div class="form-text">{{ form.token.help_text }}</div>
+                    {% endif %}
+                    {% if not is_create %}
+                        <div class="form-text text-warning">
+                            <i class="bi bi-exclamation-triangle me-1"></i>
+                            Leave blank to keep the current token unchanged. Enter a new value only if you want to update the token.
+                        </div>
+                    {% endif %}
+                </div>
+                
+                <div class="mb-3 form-check">
+                    {{ form.is_active }}
+                    <label class="form-check-label" for="{{ form.is_active.id_for_label }}">
+                        Active Bot
+                    </label>
+                    {% if form.is_active.errors %}
+                        <div class="invalid-feedback d-block">
+                            {% for error in form.is_active.errors %}
+                                {{ error }}
+                            {% endfor %}
+                        </div>
+                    {% endif %}
+                    {% if form.is_active.help_text %}
+                        <div class="form-text">{{ form.is_active.help_text }}</div>
+                    {% endif %}
+                </div>
+                
+                <div class="card bg-light mb-4">
+                    <div class="card-body">
+                        <h5 class="card-title">
+                            <i class="bi bi-info-circle me-2"></i>Discord Developer Portal Instructions
+                        </h5>
+                        <ol class="mb-0">
+                            <li>Go to the <a href="https://discord.com/developers/applications" target="_blank">Discord Developer Portal</a></li>
+                            <li>Click "New Application" and give it a name</li>
+                            <li>Go to the "Bot" tab and click "Add Bot"</li>
+                            <li>Find the "Token" section and click "Copy" to get your Bot Token</li>
+                            <li>In the application page, copy your Client ID (Application ID)</li>
+                            <li>To get the Bot User ID, enable Developer Mode in Discord, right-click your bot and "Copy ID"</li>
+                        </ol>
+                    </div>
+                </div>
+                
+                <div class="d-flex justify-content-between">
+                    <a href="{% if is_create %}{% url 'bot_management:index' %}{% else %}{% url 'bot_management:bot_detail' bot.id %}{% endif %}" class="btn btn-secondary">
+                        <i class="bi bi-x-circle me-2"></i>Cancel
+                    </a>
+                    <button type="submit" class="btn btn-primary">
+                        {% if is_create %}
+                            <i class="bi bi-plus-circle me-2"></i>Register Bot
+                        {% else %}
+                            <i class="bi bi-check-circle me-2"></i>Save Changes
+                        {% endif %}
+                    </button>
+                </div>
+            </form>
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/bot_management/templates/bot_management/bot_logs.html b/bot_management/templates/bot_management/bot_logs.html
new file mode 100644
index 0000000..49be6dc
--- /dev/null
+++ b/bot_management/templates/bot_management/bot_logs.html
@@ -0,0 +1,73 @@
+{% extends 'base.html' %}
+{% load static %}
+
+{% block title %}{{ title }}{% endblock %}
+
+{% block content %}
+<div class="container py-4">
+    <nav aria-label="breadcrumb">
+        <ol class="breadcrumb">
+            <li class="breadcrumb-item"><a href="{% url 'bot_management:index' %}">Bot Management</a></li>
+            <li class="breadcrumb-item"><a href="{% url 'bot_management:bot_detail' bot.id %}">{{ bot.name }}</a></li>
+            <li class="breadcrumb-item active" aria-current="page">Activity Logs</li>
+        </ol>
+    </nav>
+    
+    <div class="card">
+        <div class="card-header bg-primary bg-gradient text-white">
+            <div class="d-flex align-items-center">
+                <div>
+                    <h1 class="card-title fs-4 mb-0">
+                        <i class="bi bi-list-ul me-2"></i>Activity Logs: {{ bot.name }}
+                    </h1>
+                </div>
+                
+                <a href="{% url 'bot_management:bot_detail' bot.id %}" class="btn btn-sm btn-light ms-auto">
+                    <i class="bi bi-arrow-left me-2"></i>Back to Bot
+                </a>
+            </div>
+        </div>
+        
+        <div class="card-body">
+            {% if logs %}
+                <div class="table-responsive">
+                    <table class="table table-striped table-hover">
+                        <thead>
+                            <tr>
+                                <th scope="col">Timestamp</th>
+                                <th scope="col">Event Type</th>
+                                <th scope="col">Description</th>
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {% for log in logs %}
+                                <tr>
+                                    <td>{{ log.timestamp|date:"M d, Y H:i:s" }}</td>
+                                    <td>
+                                        <span class="badge 
+                                            {% if 'ERROR' in log.event_type %}bg-danger
+                                            {% elif 'CREATED' in log.event_type %}bg-success
+                                            {% elif 'UPDATED' in log.event_type %}bg-primary
+                                            {% elif 'ACTIVATED' in log.event_type %}bg-success
+                                            {% elif 'DEACTIVATED' in log.event_type %}bg-secondary
+                                            {% else %}bg-info{% endif %}
+                                        ">
+                                            {{ log.event_type }}
+                                        </span>
+                                    </td>
+                                    <td>{{ log.description }}</td>
+                                </tr>
+                            {% endfor %}
+                        </tbody>
+                    </table>
+                </div>
+            {% else %}
+                <div class="alert alert-info">
+                    <h4 class="alert-heading">No logs found!</h4>
+                    <p>This bot doesn't have any activity logs yet. Logs will appear here when actions are performed with the bot.</p>
+                </div>
+            {% endif %}
+        </div>
+    </div>
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/bot_management/templates/bot_management/index.html b/bot_management/templates/bot_management/index.html
index 7d7b534..7075c13 100644
--- a/bot_management/templates/bot_management/index.html
+++ b/bot_management/templates/bot_management/index.html
@@ -1,14 +1,84 @@
 {% extends 'base.html' %}
+{% load static %}
 
 {% block title %}{{ title }}{% endblock %}
 
 {% block content %}
 <div class="container py-4">
-    <h1>Bot Management</h1>
+    <div class="d-flex justify-content-between align-items-center mb-4">
+        <h1>Bot Management</h1>
+        <a href="{% url 'bot_management:bot_create' %}" class="btn btn-primary">
+            <i class="bi bi-plus-circle me-2"></i>Register New Bot
+        </a>
+    </div>
+    
     <p class="lead">Manage your Discord bots easily from this dashboard.</p>
-    <hr>
-    <div class="alert alert-info">
-        <p>This page will contain functionality to manage Discord bots.</p>
+    
+    {% if messages %}
+        {% for message in messages %}
+            <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
+                {{ message }}
+                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
+            </div>
+        {% endfor %}
+    {% endif %}
+    
+    <div class="row mt-4">
+        {% if bots %}
+            {% for bot in bots %}
+                <div class="col-md-6 col-lg-4 mb-4">
+                    <div class="card h-100 {% if not bot.is_active %}border-secondary{% endif %}">
+                        <div class="card-header d-flex align-items-center">
+                            {% if bot.avatar_url %}
+                                <img src="{{ bot.avatar_url }}" alt="{{ bot.name }}" class="rounded-circle me-2" width="32" height="32">
+                            {% else %}
+                                <div class="bg-secondary rounded-circle me-2 d-flex align-items-center justify-content-center" style="width: 32px; height: 32px;">
+                                    <i class="bi bi-robot text-white"></i>
+                                </div>
+                            {% endif %}
+                            <h5 class="m-0">{{ bot.name }}</h5>
+                            
+                            <div class="ms-auto">
+                                <span class="badge {% if bot.is_active %}bg-success{% else %}bg-secondary{% endif %}">
+                                    {% if bot.is_active %}Active{% else %}Inactive{% endif %}
+                                </span>
+                            </div>
+                        </div>
+                        <div class="card-body">
+                            {% if bot.description %}
+                                <p class="card-text">{{ bot.description|truncatechars:100 }}</p>
+                            {% else %}
+                                <p class="card-text text-muted">No description provided</p>
+                            {% endif %}
+                            
+                            <div class="d-flex justify-content-between align-items-center mt-3">
+                                <small class="text-muted">Created: {{ bot.created_at|date:"M d, Y" }}</small>
+                                <a href="{% url 'bot_management:bot_detail' bot.id %}" class="btn btn-sm btn-outline-primary">
+                                    <i class="bi bi-info-circle me-1"></i> Details
+                                </a>
+                            </div>
+                        </div>
+                    </div>
+                </div>
+            {% endfor %}
+        {% else %}
+            <div class="col-12">
+                <div class="alert alert-info">
+                    <h4 class="alert-heading">No bots found!</h4>
+                    <p>You haven't registered any Discord bots yet. Get started by clicking the "Register New Bot" button above.</p>
+                    <hr>
+                    <p class="mb-0">Need help? Check out our <a href="#" class="alert-link">guide on creating Discord bots</a>.</p>
+                </div>
+            </div>
+        {% endif %}
     </div>
 </div>
+{% endblock %}
+
+{% block extra_js %}
+<script>
+    $(document).ready(function() {
+        // Add any JavaScript for the bot management index page here
+    });
+</script>
 {% endblock %}
\ No newline at end of file
diff --git a/bot_management/urls.py b/bot_management/urls.py
index c52350e..cae9311 100644
--- a/bot_management/urls.py
+++ b/bot_management/urls.py
@@ -4,6 +4,12 @@ from . import views
 app_name = 'bot_management'
 
 urlpatterns = [
-    # Will be populated with bot management URLs
+    # Bot listing and management
     path('', views.index, name='index'),
+    path('bot/new/', views.bot_create, name='bot_create'),
+    path('bot/<int:bot_id>/', views.bot_detail, name='bot_detail'),
+    path('bot/<int:bot_id>/edit/', views.bot_update, name='bot_update'),
+    path('bot/<int:bot_id>/delete/', views.bot_delete, name='bot_delete'),
+    path('bot/<int:bot_id>/toggle-status/', views.toggle_bot_status, name='toggle_bot_status'),
+    path('bot/<int:bot_id>/logs/', views.bot_logs, name='bot_logs'),
 ]
\ No newline at end of file
diff --git a/bot_management/views.py b/bot_management/views.py
index e9731b9..f9ae988 100644
--- a/bot_management/views.py
+++ b/bot_management/views.py
@@ -1,8 +1,140 @@
-from django.shortcuts import render
-from django.http import HttpResponse
+from django.shortcuts import render, redirect, get_object_or_404
+from django.contrib.auth.decorators import login_required
+from django.contrib import messages
+from django.urls import reverse
+from django.http import JsonResponse
+from django.views.decorators.http import require_POST
+from dashboard.decorators import discord_login_required
+from .models import Bot, BotLog
+from .forms import BotForm, BotLogForm
 
+@discord_login_required
 def index(request):
-    """Bot management index view"""
+    """Bot management index view showing a list of user's bots"""
+    bots = Bot.objects.filter(owner=request.user).order_by('-created_at')
+    
     return render(request, 'bot_management/index.html', {
-        'title': 'Bot Management'
+        'title': 'Bot Management',
+        'bots': bots,
     })
+
+@discord_login_required
+def bot_detail(request, bot_id):
+    """View to show details of a specific bot"""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    logs = bot.logs.all().order_by('-timestamp')[:10]  # Get the 10 most recent logs
+    
+    return render(request, 'bot_management/bot_detail.html', {
+        'title': f'Bot: {bot.name}',
+        'bot': bot,
+        'logs': logs,
+    })
+
+@discord_login_required
+def bot_create(request):
+    """View to create a new bot"""
+    if request.method == 'POST':
+        form = BotForm(request.POST)
+        if form.is_valid():
+            bot = form.save(commit=False)
+            bot.owner = request.user
+            bot.save()
+            
+            # Create a log entry for bot creation
+            BotLog.objects.create(
+                bot=bot,
+                event_type='BOT_CREATED',
+                description=f'Bot created by {request.user.username}'
+            )
+            
+            messages.success(request, f'Bot "{bot.name}" has been created successfully!')
+            return redirect('bot_management:bot_detail', bot_id=bot.id)
+    else:
+        form = BotForm()
+    
+    return render(request, 'bot_management/bot_form.html', {
+        'title': 'Create Bot',
+        'form': form,
+        'is_create': True,
+    })
+
+@discord_login_required
+def bot_update(request, bot_id):
+    """View to update an existing bot"""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    
+    if request.method == 'POST':
+        form = BotForm(request.POST, instance=bot)
+        if form.is_valid():
+            form.save()
+            
+            # Create a log entry for bot update
+            BotLog.objects.create(
+                bot=bot,
+                event_type='BOT_UPDATED',
+                description=f'Bot updated by {request.user.username}'
+            )
+            
+            messages.success(request, f'Bot "{bot.name}" has been updated successfully!')
+            return redirect('bot_management:bot_detail', bot_id=bot.id)
+    else:
+        # Don't display the actual token in the form for security
+        form = BotForm(instance=bot)
+        # Clear the token field to avoid exposing it
+        form.initial['token'] = ''
+    
+    return render(request, 'bot_management/bot_form.html', {
+        'title': f'Edit Bot: {bot.name}',
+        'form': form,
+        'bot': bot,
+        'is_create': False,
+    })
+
+@discord_login_required
+@require_POST
+def bot_delete(request, bot_id):
+    """View to delete a bot"""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    bot_name = bot.name
+    
+    # Delete the bot
+    bot.delete()
+    
+    messages.success(request, f'Bot "{bot_name}" has been deleted successfully!')
+    return redirect('bot_management:index')
+
+@discord_login_required
+@require_POST
+def toggle_bot_status(request, bot_id):
+    """AJAX view to toggle a bot's active status"""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    
+    # Toggle the status
+    bot.is_active = not bot.is_active
+    bot.save()
+    
+    # Create a log entry for status change
+    status = "activated" if bot.is_active else "deactivated"
+    BotLog.objects.create(
+        bot=bot,
+        event_type=f'BOT_{status.upper()}',
+        description=f'Bot {status} by {request.user.username}'
+    )
+    
+    return JsonResponse({
+        'success': True,
+        'is_active': bot.is_active,
+        'message': f'Bot "{bot.name}" has been {status} successfully!'
+    })
+
+@discord_login_required
+def bot_logs(request, bot_id):
+    """View to show all logs for a specific bot"""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    logs = bot.logs.all().order_by('-timestamp')
+    
+    return render(request, 'bot_management/bot_logs.html', {
+        'title': f'Logs: {bot.name}',
+        'bot': bot,
+        'logs': logs,
+    })
\ No newline at end of file
-- 
2.49.0.windows.1


From e629254072d6d3d8b270b6a75742913f68d73b3e Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 26 Apr 2025 22:51:31 +0800
Subject: [PATCH 08/10] feat: Create Admin Interface and API Endpoints for Bot
 Management

---
 bot_management/api.py         | 86 +++++++++++++++++++++++++++++++++++
 bot_management/api_urls.py    | 14 ++++++
 bot_management/serializers.py | 41 +++++++++++++++++
 config/urls.py                |  9 ++++
 4 files changed, 150 insertions(+)
 create mode 100644 bot_management/api.py
 create mode 100644 bot_management/api_urls.py
 create mode 100644 bot_management/serializers.py

diff --git a/bot_management/api.py b/bot_management/api.py
new file mode 100644
index 0000000..90bec57
--- /dev/null
+++ b/bot_management/api.py
@@ -0,0 +1,86 @@
+from rest_framework import viewsets, permissions, status
+from rest_framework.decorators import action
+from rest_framework.response import Response
+from django.shortcuts import get_object_or_404
+from .models import Bot, BotLog
+from .serializers import BotSerializer, BotDetailSerializer, BotLogSerializer
+
+class IsOwnerOrReadOnly(permissions.BasePermission):
+    """
+    Custom permission to only allow owners of a bot to edit it.
+    """
+    def has_object_permission(self, request, view, obj):
+        # Read permissions are allowed to any request
+        if request.method in permissions.SAFE_METHODS:
+            return True
+            
+        # Write permissions are only allowed to the owner
+        return obj.owner == request.user
+
+class BotViewSet(viewsets.ModelViewSet):
+    """
+    API endpoint for Bot management
+    """
+    serializer_class = BotSerializer
+    permission_classes = [permissions.IsAuthenticated, IsOwnerOrReadOnly]
+    
+    def get_queryset(self):
+        """Filter bots to return only those owned by the current user"""
+        return Bot.objects.filter(owner=self.request.user)
+    
+    def get_serializer_class(self):
+        """Use different serializers for list and detail"""
+        if self.action in ['retrieve', 'create', 'update', 'partial_update']:
+            return BotDetailSerializer
+        return BotSerializer
+    
+    @action(detail=True, methods=['post'])
+    def toggle_status(self, request, pk=None):
+        """
+        Toggle the is_active status of a bot
+        """
+        bot = self.get_object()
+        bot.is_active = not bot.is_active
+        bot.save()
+        
+        # Log the status change
+        status_text = "activated" if bot.is_active else "deactivated"
+        BotLog.objects.create(
+            bot=bot,
+            event_type=f'BOT_{status_text.upper()}',
+            description=f'Bot {status_text} by {request.user.username} via API'
+        )
+        
+        serializer = self.get_serializer(bot)
+        return Response({
+            'status': 'success',
+            'message': f'Bot {status_text} successfully',
+            'data': serializer.data
+        })
+    
+    @action(detail=True, methods=['get'])
+    def logs(self, request, pk=None):
+        """
+        Retrieve logs for a specific bot
+        """
+        bot = self.get_object()
+        logs = bot.logs.all().order_by('-timestamp')
+        
+        page = self.paginate_queryset(logs)
+        if page is not None:
+            serializer = BotLogSerializer(page, many=True)
+            return self.get_paginated_response(serializer.data)
+            
+        serializer = BotLogSerializer(logs, many=True)
+        return Response(serializer.data)
+
+class BotLogViewSet(viewsets.ReadOnlyModelViewSet):
+    """
+    API endpoint for BotLog (read-only)
+    """
+    serializer_class = BotLogSerializer
+    permission_classes = [permissions.IsAuthenticated]
+    
+    def get_queryset(self):
+        """Filter logs to return only those for bots owned by the current user"""
+        return BotLog.objects.filter(bot__owner=self.request.user).order_by('-timestamp')
\ No newline at end of file
diff --git a/bot_management/api_urls.py b/bot_management/api_urls.py
new file mode 100644
index 0000000..98090d5
--- /dev/null
+++ b/bot_management/api_urls.py
@@ -0,0 +1,14 @@
+from django.urls import path, include
+from rest_framework.routers import DefaultRouter
+from . import api
+
+# Create a router and register our viewsets with it
+router = DefaultRouter()
+router.register(r'bots', api.BotViewSet, basename='bot')
+router.register(r'logs', api.BotLogViewSet, basename='botlog')
+
+app_name = 'bot_management_api'
+
+urlpatterns = [
+    path('', include(router.urls)),
+]
\ No newline at end of file
diff --git a/bot_management/serializers.py b/bot_management/serializers.py
new file mode 100644
index 0000000..1b37e59
--- /dev/null
+++ b/bot_management/serializers.py
@@ -0,0 +1,41 @@
+from rest_framework import serializers
+from .models import Bot, BotLog
+
+class BotSerializer(serializers.ModelSerializer):
+    """Serializer for Bot model"""
+    owner_username = serializers.ReadOnlyField(source='owner.username')
+    
+    class Meta:
+        model = Bot
+        fields = [
+            'id', 'name', 'description', 'owner', 'owner_username',
+            'client_id', 'bot_user_id', 'avatar_url', 'is_active',
+            'created_at', 'updated_at'
+        ]
+        read_only_fields = ['id', 'owner', 'created_at', 'updated_at']
+    
+    def create(self, validated_data):
+        # Assign current user as owner
+        validated_data['owner'] = self.context['request'].user
+        return super().create(validated_data)
+
+class BotDetailSerializer(BotSerializer):
+    """Detailed serializer for Bot model with token field"""
+    
+    class Meta(BotSerializer.Meta):
+        fields = BotSerializer.Meta.fields + ['token']
+    
+    def to_representation(self, instance):
+        # Don't return the actual token in API responses for security
+        representation = super().to_representation(instance)
+        representation['token'] = '•••••••••••••••••' # Mask the token
+        return representation
+
+class BotLogSerializer(serializers.ModelSerializer):
+    """Serializer for BotLog model"""
+    bot_name = serializers.ReadOnlyField(source='bot.name')
+    
+    class Meta:
+        model = BotLog
+        fields = ['id', 'bot', 'bot_name', 'event_type', 'description', 'timestamp']
+        read_only_fields = ['id', 'timestamp']
\ No newline at end of file
diff --git a/config/urls.py b/config/urls.py
index 714fc84..7c45cb6 100644
--- a/config/urls.py
+++ b/config/urls.py
@@ -6,11 +6,20 @@ from django.contrib import admin
 from django.urls import path, include
 from django.conf.urls.static import static
 from django.views.generic import RedirectView
+from rest_framework.authtoken.views import obtain_auth_token
 
 urlpatterns = [
     path('admin/', admin.site.urls),
     path('dashboard/', include(('dashboard.urls', 'dashboard'), namespace='dashboard')),
+    path('bots/', include(('bot_management.urls', 'bot_management'), namespace='bot_management')),
+    path('accounts/', include('allauth.urls')),
     path('', RedirectView.as_view(pattern_name='dashboard:index', permanent=False)),
+    
+    # API URLs
+    path('api/v1/', include([
+        path('bot-management/', include('bot_management.api_urls')),
+        path('auth/token/', obtain_auth_token, name='api_token_auth'),
+    ])),
 ]
 
 # Add static and media URLs in development
-- 
2.49.0.windows.1


From c7f476228d3e94c81b869352db293cb8d94ac84e Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 26 Apr 2025 23:02:27 +0800
Subject: [PATCH 09/10] feat: Implement Discord BOT Integration with discord.py

---
 bot_management/apps.py                        |  22 ++
 bot_management/discord_bot/__init__.py        |   1 +
 bot_management/discord_bot/client.py          | 229 +++++++++++++
 bot_management/discord_bot/commands.py        | 168 ++++++++++
 .../discord_bot/example_commands.py           | 232 +++++++++++++
 bot_management/discord_bot/service.py         | 313 ++++++++++++++++++
 bot_management/discord_bot/utils.py           | 170 ++++++++++
 bot_management/management/__init__.py         |   1 +
 .../management/commands/__init__.py           |   1 +
 .../management/commands/botmanager.py         | 258 +++++++++++++++
 bot_management/models.py                      |  68 +++-
 .../templates/bot_management/bot_detail.html  | 199 +++++++++--
 .../templates/bot_management/index.html       |  48 ++-
 bot_management/urls.py                        |   5 +
 bot_management/views.py                       | 122 ++++++-
 db.sqlite3                                    | Bin 327680 -> 327680 bytes
 16 files changed, 1796 insertions(+), 41 deletions(-)
 create mode 100644 bot_management/discord_bot/__init__.py
 create mode 100644 bot_management/discord_bot/client.py
 create mode 100644 bot_management/discord_bot/commands.py
 create mode 100644 bot_management/discord_bot/example_commands.py
 create mode 100644 bot_management/discord_bot/service.py
 create mode 100644 bot_management/discord_bot/utils.py
 create mode 100644 bot_management/management/__init__.py
 create mode 100644 bot_management/management/commands/__init__.py
 create mode 100644 bot_management/management/commands/botmanager.py

diff --git a/bot_management/apps.py b/bot_management/apps.py
index 5de8142..8bad70b 100644
--- a/bot_management/apps.py
+++ b/bot_management/apps.py
@@ -1,7 +1,29 @@
 from django.apps import AppConfig
+import logging
 
+logger = logging.getLogger(__name__)
 
 class BotManagementConfig(AppConfig):
     default_auto_field = "django.db.models.BigAutoField"
     name = "bot_management"
     verbose_name = "Bot Management"
+    
+    def ready(self):
+        """Initialize bot manager when the app is ready"""
+        # Import bot_manager here to avoid circular imports
+        from bot_management.discord_bot.service import bot_manager
+        
+        # Only start in main Django process, not in runserver reloader or other processes
+        import sys
+        if 'runserver' in sys.argv:
+            # Don't auto-start bots in development server
+            # Use the management command instead
+            logger.info("Bot manager initialized. Use the botmanager command to start bots.")
+        elif 'test' not in sys.argv:
+            # In production, start the manager but not individual bots
+            # Bots should be started via management command or admin interface
+            try:
+                bot_manager.start()
+                logger.info("Bot manager service started.")
+            except Exception as e:
+                logger.error(f"Failed to start bot manager: {str(e)}")
\ No newline at end of file
diff --git a/bot_management/discord_bot/__init__.py b/bot_management/discord_bot/__init__.py
new file mode 100644
index 0000000..9510b24
--- /dev/null
+++ b/bot_management/discord_bot/__init__.py
@@ -0,0 +1 @@
+# Discord Bot integration package for Social Cube
\ No newline at end of file
diff --git a/bot_management/discord_bot/client.py b/bot_management/discord_bot/client.py
new file mode 100644
index 0000000..5d096ee
--- /dev/null
+++ b/bot_management/discord_bot/client.py
@@ -0,0 +1,229 @@
+import discord
+from discord import app_commands
+import asyncio
+import logging
+from typing import Optional, Dict, Any, List, Callable
+from cryptography.fernet import Fernet
+import environ
+import os
+import time
+import random
+import string
+from functools import wraps
+
+# Initialize environment variables
+env = environ.Env()
+
+# Configure logging
+logger = logging.getLogger(__name__)
+
+class SocialCubeBot(discord.Client):
+    """Custom Discord client for Social Cube application"""
+    
+    def __init__(self, *, bot_id: int, token: str, owner_id: int, **options):
+        """
+        Initialize the bot client
+        
+        Args:
+            bot_id: The database ID of the bot
+            token: The encrypted Discord bot token
+            owner_id: The user ID of the bot owner
+            **options: Additional options for the discord.Client
+        """
+        # Set default intents for the bot
+        intents = discord.Intents.default()
+        intents.message_content = True
+        intents.members = True
+        
+        # Merge with any provided intents
+        if 'intents' in options:
+            provided_intents = options.pop('intents')
+            for name, value in provided_intents.__dict__.items():
+                if name.startswith('_'):
+                    continue
+                setattr(intents, name, value)
+        
+        # Pass the intents to the parent class
+        super().__init__(intents=intents, **options)
+        
+        # Store bot configuration
+        self.bot_id = bot_id
+        self.encrypted_token = token
+        self.owner_id = owner_id
+        self.ready_event = asyncio.Event()
+        
+        # Bot status tracking
+        self.startup_time = None
+        self.last_heartbeat = None
+        self.heartbeat_interval = 60  # seconds
+        self.command_count = 0
+        
+        # Create the app_commands tree
+        self.tree = app_commands.CommandTree(self)
+        
+        # Store for custom commands
+        self.custom_commands = {}
+        
+    async def setup_hook(self) -> None:
+        """Setup hook called before the bot connects to Discord"""
+        await super().setup_hook()
+        
+        # Register default commands
+        self.register_default_commands()
+        
+        # Start the heartbeat task
+        self.heartbeat_task = self.loop.create_task(self._heartbeat_task())
+        
+    def register_default_commands(self) -> None:
+        """Register default slash commands for the bot"""
+        
+        # Info command
+        @self.tree.command(name="info", description="Get information about the bot")
+        async def info(interaction: discord.Interaction):
+            """Display information about the bot"""
+            uptime = time.time() - self.startup_time if self.startup_time else 0
+            days, remainder = divmod(uptime, 86400)
+            hours, remainder = divmod(remainder, 3600)
+            minutes, seconds = divmod(remainder, 60)
+            
+            uptime_str = f"{int(days)}d {int(hours)}h {int(minutes)}m {int(seconds)}s"
+            
+            embed = discord.Embed(
+                title=f"{self.user.name} Info",
+                description="A bot managed by Social Cube",
+                color=discord.Color.blue()
+            )
+            
+            embed.add_field(name="Bot ID", value=str(self.user.id), inline=True)
+            embed.add_field(name="Commands Used", value=str(self.command_count), inline=True)
+            embed.add_field(name="Uptime", value=uptime_str, inline=True)
+            
+            embed.add_field(name="Guilds", value=str(len(self.guilds)), inline=True)
+            embed.add_field(name="Users", value=str(sum(g.member_count for g in self.guilds)), inline=True)
+            
+            if self.user.avatar:
+                embed.set_thumbnail(url=self.user.avatar.url)
+                
+            embed.set_footer(text="Powered by Social Cube")
+            
+            await interaction.response.send_message(embed=embed)
+            self.command_count += 1
+            
+        # Help command
+        @self.tree.command(name="help", description="Get help with bot commands")
+        async def help_command(interaction: discord.Interaction):
+            """Display help information for the bot"""
+            embed = discord.Embed(
+                title=f"{self.user.name} Help",
+                description="Here are the available commands:",
+                color=discord.Color.green()
+            )
+            
+            # Get all registered commands
+            commands = await self.tree.fetch_commands()
+            
+            for command in commands:
+                embed.add_field(
+                    name=f"/{command.name}",
+                    value=command.description or "No description available",
+                    inline=False
+                )
+                
+            if self.user.avatar:
+                embed.set_thumbnail(url=self.user.avatar.url)
+                
+            embed.set_footer(text="Powered by Social Cube")
+            
+            await interaction.response.send_message(embed=embed, ephemeral=True)
+            self.command_count += 1
+            
+    def decrypt_token(self) -> str:
+        """Decrypt the bot token using the environment key"""
+        key = env('BOT_TOKEN_KEY')
+        f = Fernet(key.encode() if isinstance(key, str) else key)
+        return f.decrypt(self.encrypted_token.encode()).decode()
+        
+    async def start_bot(self) -> None:
+        """Start the bot with the decrypted token"""
+        try:
+            decrypted_token = self.decrypt_token()
+            await self.start(decrypted_token)
+        except Exception as e:
+            logger.error(f"Failed to start bot ID {self.bot_id}: {str(e)}")
+            raise
+            
+    async def _heartbeat_task(self) -> None:
+        """Task to periodically send heartbeat signals and monitor bot health"""
+        try:
+            while not self.is_closed():
+                self.last_heartbeat = time.time()
+                
+                # Log connection status and basic metrics
+                if self.is_ready():
+                    logger.info(
+                        f"Bot {self.bot_id} heartbeat: Connected to {len(self.guilds)} "
+                        f"guilds with {sum(g.member_count for g in self.guilds)} users"
+                    )
+                
+                await asyncio.sleep(self.heartbeat_interval)
+        except asyncio.CancelledError:
+            # Task was cancelled, clean shutdown
+            pass
+        except Exception as e:
+            logger.error(f"Heartbeat task error for bot {self.bot_id}: {str(e)}")
+            
+    async def on_ready(self):
+        """Event handler for when the bot is ready and connected to Discord"""
+        logger.info(f"Bot {self.user.name} (ID: {self.user.id}) is connected to Discord")
+        
+        # Set startup time and mark as ready
+        self.startup_time = time.time()
+        self.ready_event.set()
+        
+        # Sync application commands with Discord
+        try:
+            # Sync commands globally
+            await self.tree.sync()
+            logger.info(f"Synced application commands for bot {self.user.name}")
+        except Exception as e:
+            logger.error(f"Failed to sync commands for bot {self.user.name}: {str(e)}")
+            
+    async def on_guild_join(self, guild):
+        """Event handler for when the bot joins a new guild"""
+        logger.info(f"Bot {self.user.name} joined guild: {guild.name} (ID: {guild.id})")
+        
+        # If the guild has a system channel, send a welcome message
+        if guild.system_channel:
+            try:
+                embed = discord.Embed(
+                    title=f"Thanks for adding {self.user.name}!",
+                    description="Use `/help` to see the list of available commands.",
+                    color=discord.Color.blue()
+                )
+                
+                if self.user.avatar:
+                    embed.set_thumbnail(url=self.user.avatar.url)
+                    
+                embed.set_footer(text="Powered by Social Cube")
+                
+                await guild.system_channel.send(embed=embed)
+            except Exception as e:
+                logger.warning(f"Could not send welcome message to {guild.name}: {str(e)}")
+                
+    async def wait_until_ready(self, timeout=None):
+        """Wait until the bot is connected and ready"""
+        await asyncio.wait_for(self.ready_event.wait(), timeout=timeout)
+        
+    def is_healthy(self) -> bool:
+        """Check if the bot is healthy based on heartbeat and connection status"""
+        # Bot must be connected
+        if not self.is_ready():
+            return False
+            
+        # Check last heartbeat time
+        if self.last_heartbeat is None:
+            return False
+            
+        # Ensure heartbeat is recent
+        time_since_heartbeat = time.time() - self.last_heartbeat
+        return time_since_heartbeat <= (self.heartbeat_interval * 2)
\ No newline at end of file
diff --git a/bot_management/discord_bot/commands.py b/bot_management/discord_bot/commands.py
new file mode 100644
index 0000000..7e4d593
--- /dev/null
+++ b/bot_management/discord_bot/commands.py
@@ -0,0 +1,168 @@
+import discord
+from discord import app_commands
+from typing import Dict, List, Any, Callable, Optional, Union
+import inspect
+import logging
+import functools
+
+# Configure logging
+logger = logging.getLogger(__name__)
+
+class CommandGroup:
+    """Group of commands with a common prefix"""
+    
+    def __init__(self, name: str, description: str = None):
+        """
+        Initialize a command group
+        
+        Args:
+            name: The name of the command group
+            description: Optional description for the group
+        """
+        self.name = name
+        self.description = description or f"Commands in the {name} group"
+        self.commands = {}
+        
+    def command(self, name: str = None, description: str = None):
+        """
+        Decorator to register a command in this group
+        
+        Args:
+            name: Optional name override for the command
+            description: Optional description for the command
+        """
+        def decorator(func):
+            cmd_name = name or func.__name__
+            cmd_desc = description or func.__doc__ or f"The {cmd_name} command"
+            
+            # Store the command in the group
+            self.commands[cmd_name] = {
+                'callback': func,
+                'description': cmd_desc
+            }
+            
+            # Return the original function
+            return func
+        return decorator
+        
+    def get_commands(self) -> Dict[str, Dict[str, Any]]:
+        """Get all commands registered in this group"""
+        return self.commands
+
+class CommandRegistry:
+    """Registry for bot commands"""
+    
+    def __init__(self):
+        """Initialize the command registry"""
+        self.groups = {}
+        self.global_commands = {}
+        
+    def group(self, name: str, description: str = None) -> CommandGroup:
+        """
+        Create a new command group
+        
+        Args:
+            name: The name of the command group
+            description: Optional description for the group
+            
+        Returns:
+            CommandGroup: The created command group
+        """
+        if name in self.groups:
+            return self.groups[name]
+            
+        group = CommandGroup(name, description)
+        self.groups[name] = group
+        return group
+        
+    def command(self, name: str = None, description: str = None):
+        """
+        Decorator to register a global command
+        
+        Args:
+            name: Optional name override for the command
+            description: Optional description for the command
+        """
+        def decorator(func):
+            cmd_name = name or func.__name__
+            cmd_desc = description or func.__doc__ or f"The {cmd_name} command"
+            
+            # Store the command
+            self.global_commands[cmd_name] = {
+                'callback': func,
+                'description': cmd_desc
+            }
+            
+            # Return the original function
+            return func
+        return decorator
+        
+    def register_to_bot(self, bot):
+        """
+        Register all commands to a bot's command tree
+        
+        Args:
+            bot: The SocialCubeBot instance to register commands with
+        """
+        # Register global commands
+        for cmd_name, cmd_data in self.global_commands.items():
+            @bot.tree.command(name=cmd_name, description=cmd_data['description'])
+            async def command_wrapper(interaction: discord.Interaction, *args, **kwargs):
+                # Get the original command that matches this wrapper's name
+                cmd_info = self.global_commands.get(interaction.command.name)
+                if cmd_info:
+                    try:
+                        # Call the original command
+                        await cmd_info['callback'](bot, interaction, *args, **kwargs)
+                        bot.command_count += 1
+                    except Exception as e:
+                        logger.error(f"Error executing command {interaction.command.name}: {str(e)}")
+                        await interaction.response.send_message(
+                            f"An error occurred while executing this command.",
+                            ephemeral=True
+                        )
+                        
+        # Register group commands
+        for group_name, group in self.groups.items():
+            # Create app_commands Group
+            app_group = app_commands.Group(name=group_name, description=group.description)
+            
+            # Add commands to the group
+            for cmd_name, cmd_data in group.get_commands().items():
+                @app_commands.command(name=cmd_name, description=cmd_data['description'])
+                async def command_wrapper(interaction: discord.Interaction, *args, **kwargs):
+                    # Get the correct command from the group
+                    cmd_group = self.groups.get(interaction.command.parent.name)
+                    if cmd_group:
+                        cmd_info = cmd_group.get_commands().get(interaction.command.name)
+                        if cmd_info:
+                            try:
+                                # Call the original command
+                                await cmd_info['callback'](bot, interaction, *args, **kwargs)
+                                bot.command_count += 1
+                            except Exception as e:
+                                logger.error(f"Error executing command {interaction.command.parent.name} {interaction.command.name}: {str(e)}")
+                                await interaction.response.send_message(
+                                    f"An error occurred while executing this command.",
+                                    ephemeral=True
+                                )
+                                
+                # Add the command to the group
+                app_group.add_command(command_wrapper)
+                
+            # Add the group to the bot's command tree
+            bot.tree.add_command(app_group)
+            
+        logger.info(f"Registered {len(self.global_commands)} global commands and {len(self.groups)} command groups")
+
+# Create the global registry
+command_registry = CommandRegistry()
+
+# Helper decorators for easier command registration
+def command(name=None, description=None):
+    """Global command decorator"""
+    return command_registry.command(name, description)
+    
+def group(name, description=None):
+    """Command group decorator factory"""
+    return command_registry.group(name, description)
\ No newline at end of file
diff --git a/bot_management/discord_bot/example_commands.py b/bot_management/discord_bot/example_commands.py
new file mode 100644
index 0000000..e0dd4bb
--- /dev/null
+++ b/bot_management/discord_bot/example_commands.py
@@ -0,0 +1,232 @@
+"""
+Example commands for Discord bots
+These can be imported and registered with any bot instance.
+"""
+
+import discord
+from discord import app_commands
+import random
+import time
+import platform
+from typing import Optional
+from .commands import command, group
+
+# Create a utility group
+util_group = group("util", "Utility commands for the bot")
+
+@util_group.command(description="Ping the bot to check latency")
+async def ping(bot, interaction: discord.Interaction):
+    """Check the bot's latency"""
+    latency = bot.latency * 1000  # Convert to ms
+    start_time = time.time()
+    
+    # Initial response
+    await interaction.response.send_message("Pinging...")
+    
+    # Edit with the results
+    message = await interaction.original_response()
+    end_time = time.time()
+    
+    api_latency = (end_time - start_time) * 1000  # Convert to ms
+    
+    embed = discord.Embed(
+        title="🏓 Pong!",
+        color=discord.Color.green()
+    )
+    
+    embed.add_field(name="Bot Latency", value=f"{latency:.2f} ms", inline=True)
+    embed.add_field(name="API Latency", value=f"{api_latency:.2f} ms", inline=True)
+    
+    await message.edit(content=None, embed=embed)
+
+@util_group.command(description="Get basic server information")
+async def serverinfo(bot, interaction: discord.Interaction):
+    """Display information about the current server"""
+    guild = interaction.guild
+    
+    if not guild:
+        await interaction.response.send_message("This command can only be used in a server.", ephemeral=True)
+        return
+    
+    # Create embed with server info
+    embed = discord.Embed(
+        title=f"{guild.name} Info",
+        description=guild.description or "No description set",
+        color=discord.Color.blue()
+    )
+    
+    # Add fields with server information
+    created_at = int(guild.created_at.timestamp())
+    
+    # General information
+    embed.add_field(name="Server ID", value=guild.id, inline=True)
+    embed.add_field(name="Owner", value=guild.owner.mention if guild.owner else "Unknown", inline=True)
+    embed.add_field(name="Created On", value=f"<t:{created_at}:D> (<t:{created_at}:R>)", inline=True)
+    
+    # Member stats
+    embed.add_field(name="Members", value=guild.member_count, inline=True)
+    bot_count = sum(1 for member in guild.members if member.bot)
+    embed.add_field(name="Humans", value=guild.member_count - bot_count, inline=True)
+    embed.add_field(name="Bots", value=bot_count, inline=True)
+    
+    # Channel stats
+    text_channels = len(guild.text_channels)
+    voice_channels = len(guild.voice_channels)
+    categories = len(guild.categories)
+    embed.add_field(name="Text Channels", value=text_channels, inline=True)
+    embed.add_field(name="Voice Channels", value=voice_channels, inline=True)
+    embed.add_field(name="Categories", value=categories, inline=True)
+    
+    # Other counts
+    embed.add_field(name="Roles", value=len(guild.roles), inline=True)
+    embed.add_field(name="Emojis", value=len(guild.emojis), inline=True)
+    embed.add_field(name="Boost Level", value=f"Level {guild.premium_tier}", inline=True)
+    
+    # Add server icon as thumbnail if available
+    if guild.icon:
+        embed.set_thumbnail(url=guild.icon.url)
+    
+    await interaction.response.send_message(embed=embed)
+
+# Create a fun commands group
+fun_group = group("fun", "Fun and miscellaneous commands")
+
+@fun_group.command(description="Get a random 8-ball response to a question")
+async def eightball(bot, interaction: discord.Interaction, question: str):
+    """Ask the Magic 8-Ball a question"""
+    responses = [
+        # Positive responses
+        "It is certain.",
+        "It is decidedly so.",
+        "Without a doubt.",
+        "Yes - definitely.",
+        "You may rely on it.",
+        "As I see it, yes.",
+        "Most likely.",
+        "Outlook good.",
+        "Yes.",
+        "Signs point to yes.",
+        
+        # Neutral responses
+        "Reply hazy, try again.",
+        "Ask again later.",
+        "Better not tell you now.",
+        "Cannot predict now.",
+        "Concentrate and ask again.",
+        
+        # Negative responses
+        "Don't count on it.",
+        "My reply is no.",
+        "My sources say no.",
+        "Outlook not so good.",
+        "Very doubtful."
+    ]
+    
+    # Select a random response
+    response = random.choice(responses)
+    
+    # Create and send an embed with the question and response
+    embed = discord.Embed(
+        title="🎱 The Magic 8-Ball",
+        color=discord.Color.purple()
+    )
+    
+    embed.add_field(name="Question", value=question, inline=False)
+    embed.add_field(name="Answer", value=response, inline=False)
+    
+    await interaction.response.send_message(embed=embed)
+
+@fun_group.command(description="Roll one or more dice")
+async def roll(bot, interaction: discord.Interaction, dice: str = "1d20"):
+    """
+    Roll dice in the format XdY where X is the number of dice and Y is the sides
+    Examples: 1d20, 3d6, 2d10
+    """
+    try:
+        # Parse the dice string
+        parts = dice.lower().split('d')
+        if len(parts) != 2:
+            raise ValueError("Invalid dice format")
+            
+        num_dice = int(parts[0])
+        sides = int(parts[1])
+        
+        # Validate input
+        if num_dice < 1 or num_dice > 100:
+            await interaction.response.send_message("Please use between 1 and 100 dice.", ephemeral=True)
+            return
+            
+        if sides < 2 or sides > 1000:
+            await interaction.response.send_message("Dice must have between 2 and 1000 sides.", ephemeral=True)
+            return
+            
+        # Roll the dice
+        results = [random.randint(1, sides) for _ in range(num_dice)]
+        total = sum(results)
+        
+        # Format the response
+        if num_dice == 1:
+            description = f"You rolled a {total}"
+        else:
+            description = f"You rolled: {', '.join(str(r) for r in results)}\nTotal: {total}"
+            
+        # Create and send an embed with the roll results
+        embed = discord.Embed(
+            title=f"🎲 Dice Roll: {dice}",
+            description=description,
+            color=discord.Color.gold()
+        )
+        
+        await interaction.response.send_message(embed=embed)
+        
+    except ValueError as e:
+        await interaction.response.send_message(
+            f"Error: {str(e)}. Please use the format XdY (e.g., 1d20, 3d6).",
+            ephemeral=True
+        )
+
+# System commands
+@command(description="Show system information about the bot")
+async def system(bot, interaction: discord.Interaction):
+    """Show system information about the bot"""
+    
+    # Get system info
+    py_version = platform.python_version()
+    discord_version = discord.__version__
+    os_name = platform.system()
+    os_version = platform.version()
+    processor = platform.processor() or "Unknown"
+    
+    # Bot stats
+    uptime = time.time() - bot.startup_time if bot.startup_time else 0
+    days, remainder = divmod(uptime, 86400)
+    hours, remainder = divmod(remainder, 3600)
+    minutes, seconds = divmod(remainder, 60)
+    
+    uptime_str = f"{int(days)}d {int(hours)}h {int(minutes)}m {int(seconds)}s"
+    
+    # Create embed
+    embed = discord.Embed(
+        title="System Information",
+        color=discord.Color.blue()
+    )
+    
+    embed.add_field(name="Bot User", value=f"{bot.user.name} ({bot.user.id})", inline=False)
+    
+    # System information
+    embed.add_field(name="Python Version", value=py_version, inline=True)
+    embed.add_field(name="Discord.py Version", value=discord_version, inline=True)
+    embed.add_field(name="Operating System", value=f"{os_name} {os_version}", inline=True)
+    
+    # Bot statistics
+    embed.add_field(name="Uptime", value=uptime_str, inline=True)
+    embed.add_field(name="Guilds", value=str(len(bot.guilds)), inline=True)
+    embed.add_field(name="Users", value=str(sum(g.member_count for g in bot.guilds)), inline=True)
+    
+    # Set bot avatar as thumbnail
+    if bot.user.avatar:
+        embed.set_thumbnail(url=bot.user.avatar.url)
+        
+    embed.set_footer(text="Powered by Social Cube")
+    
+    await interaction.response.send_message(embed=embed)
\ No newline at end of file
diff --git a/bot_management/discord_bot/service.py b/bot_management/discord_bot/service.py
new file mode 100644
index 0000000..5d0ee2d
--- /dev/null
+++ b/bot_management/discord_bot/service.py
@@ -0,0 +1,313 @@
+import asyncio
+import logging
+import threading
+from typing import Dict, Optional, List, Tuple
+import time
+from concurrent.futures import ThreadPoolExecutor
+from django.db import transaction
+
+from bot_management.models import Bot, BotLog
+from .client import SocialCubeBot
+
+# Configure logging
+logger = logging.getLogger(__name__)
+
+class BotManager:
+    """
+    Service for managing multiple Discord bot instances
+    """
+    _instance = None
+    _lock = threading.Lock()
+    
+    def __new__(cls):
+        """Singleton pattern to ensure only one bot manager exists"""
+        with cls._lock:
+            if cls._instance is None:
+                cls._instance = super(BotManager, cls).__new__(cls)
+                cls._instance._initialized = False
+            return cls._instance
+    
+    def __init__(self):
+        """Initialize the bot manager"""
+        # Only initialize once
+        if self._initialized:
+            return
+            
+        self.running_bots: Dict[int, Tuple[SocialCubeBot, asyncio.Task, threading.Thread]] = {}
+        self.loop = None
+        self.health_check_interval = 300  # 5 minutes
+        self.health_check_task = None
+        self._initialized = True
+        logger.info("Bot Manager initialized")
+        
+    def start(self):
+        """Start the bot manager service"""
+        if not self.loop:
+            # Create a new event loop for the manager
+            self.loop = asyncio.new_event_loop()
+            asyncio.set_event_loop(self.loop)
+            
+            # Start health check task
+            self.health_check_task = self.loop.create_task(self._health_check_loop())
+            
+            logger.info("Bot Manager service started")
+            
+    def stop(self):
+        """Stop the bot manager and all running bots"""
+        # Cancel the health check task
+        if self.health_check_task:
+            self.health_check_task.cancel()
+            
+        # Stop all running bots
+        for bot_id in list(self.running_bots.keys()):
+            self.stop_bot(bot_id)
+            
+        # Close the event loop
+        if self.loop:
+            self.loop.stop()
+            
+        logger.info("Bot Manager service stopped")
+        
+    def start_bot(self, bot_id: int) -> bool:
+        """
+        Start a specific bot by its ID
+        
+        Args:
+            bot_id: The database ID of the bot to start
+            
+        Returns:
+            bool: True if successfully started, False otherwise
+        """
+        # Check if bot is already running
+        if bot_id in self.running_bots:
+            logger.warning(f"Bot {bot_id} is already running")
+            return False
+            
+        try:
+            # Get bot from database
+            bot_model = Bot.objects.get(id=bot_id, is_active=True)
+            
+            # Create the bot client
+            client = SocialCubeBot(
+                bot_id=bot_id,
+                token=bot_model.token,
+                owner_id=bot_model.owner.id
+            )
+            
+            # Create and start the bot thread
+            def run_bot_thread():
+                # Each bot gets its own event loop in its own thread
+                bot_loop = asyncio.new_event_loop()
+                asyncio.set_event_loop(bot_loop)
+                
+                # Start the bot
+                bot_task = None
+                try:
+                    bot_task = bot_loop.create_task(client.start_bot())
+                    bot_loop.run_forever()
+                except Exception as e:
+                    logger.error(f"Error in bot {bot_id} thread: {str(e)}")
+                finally:
+                    # Clean up
+                    if bot_task and not bot_task.done():
+                        bot_task.cancel()
+                    bot_loop.close()
+                    
+            # Create and start thread
+            bot_thread = threading.Thread(
+                target=run_bot_thread,
+                name=f"Bot-{bot_id}",
+                daemon=True
+            )
+            bot_thread.start()
+            
+            # Store references
+            self.running_bots[bot_id] = (client, None, bot_thread)
+            
+            # Log the start
+            BotLog.objects.create(
+                bot=bot_model,
+                event_type="BOT_STARTED",
+                description=f"Bot started by Bot Manager"
+            )
+            
+            logger.info(f"Started bot {bot_id} ({bot_model.name})")
+            return True
+            
+        except Bot.DoesNotExist:
+            logger.error(f"Bot {bot_id} not found or not active")
+            return False
+        except Exception as e:
+            logger.error(f"Failed to start bot {bot_id}: {str(e)}")
+            return False
+            
+    def stop_bot(self, bot_id: int) -> bool:
+        """
+        Stop a specific bot by its ID
+        
+        Args:
+            bot_id: The database ID of the bot to stop
+            
+        Returns:
+            bool: True if successfully stopped, False otherwise
+        """
+        # Check if bot is running
+        if bot_id not in self.running_bots:
+            logger.warning(f"Bot {bot_id} is not running")
+            return False
+            
+        try:
+            client, _, thread = self.running_bots[bot_id]
+            
+            # Close the client connection
+            asyncio.run_coroutine_threadsafe(client.close(), client.loop)
+            
+            # Remove from running bots
+            del self.running_bots[bot_id]
+            
+            # Log the stop
+            try:
+                bot_model = Bot.objects.get(id=bot_id)
+                BotLog.objects.create(
+                    bot=bot_model,
+                    event_type="BOT_STOPPED",
+                    description=f"Bot stopped by Bot Manager"
+                )
+            except Bot.DoesNotExist:
+                # Bot might have been deleted from the database
+                pass
+                
+            logger.info(f"Stopped bot {bot_id}")
+            return True
+            
+        except Exception as e:
+            logger.error(f"Failed to stop bot {bot_id}: {str(e)}")
+            return False
+            
+    def restart_bot(self, bot_id: int) -> bool:
+        """
+        Restart a specific bot by its ID
+        
+        Args:
+            bot_id: The database ID of the bot to restart
+            
+        Returns:
+            bool: True if successfully restarted, False otherwise
+        """
+        if self.stop_bot(bot_id):
+            # Wait briefly for the bot to fully stop
+            time.sleep(2)
+            return self.start_bot(bot_id)
+        return False
+        
+    def get_bot_status(self, bot_id: int) -> Dict:
+        """
+        Get the status of a specific bot
+        
+        Args:
+            bot_id: The database ID of the bot
+            
+        Returns:
+            Dict: Status information about the bot
+        """
+        status = {
+            "running": False,
+            "connected": False,
+            "healthy": False,
+            "guilds": 0,
+            "users": 0,
+            "uptime": 0,
+            "commands_used": 0
+        }
+        
+        # Check if bot is running
+        if bot_id in self.running_bots:
+            client, _, _ = self.running_bots[bot_id]
+            status["running"] = True
+            
+            # Get additional status if client is connected
+            if client.is_ready():
+                status["connected"] = True
+                status["healthy"] = client.is_healthy()
+                status["guilds"] = len(client.guilds)
+                status["users"] = sum(g.member_count for g in client.guilds)
+                
+                if client.startup_time:
+                    status["uptime"] = time.time() - client.startup_time
+                    
+                status["commands_used"] = client.command_count
+                
+        return status
+        
+    def get_all_bots_status(self) -> Dict[int, Dict]:
+        """
+        Get status for all running bots
+        
+        Returns:
+            Dict[int, Dict]: Dictionary mapping bot IDs to their status
+        """
+        result = {}
+        for bot_id in self.running_bots:
+            result[bot_id] = self.get_bot_status(bot_id)
+        return result
+        
+    async def _health_check_loop(self):
+        """Background task to perform regular health checks on all bots"""
+        try:
+            while True:
+                await self._perform_health_check()
+                await asyncio.sleep(self.health_check_interval)
+        except asyncio.CancelledError:
+            # Task was cancelled, clean shutdown
+            pass
+        except Exception as e:
+            logger.error(f"Health check task error: {str(e)}")
+            
+    async def _perform_health_check(self):
+        """Perform health checks on all running bots"""
+        logger.info("Performing health check on all bots")
+        
+        for bot_id in list(self.running_bots.keys()):
+            try:
+                status = self.get_bot_status(bot_id)
+                
+                # Check if bot is running but not healthy
+                if status["running"] and not status["healthy"]:
+                    logger.warning(f"Bot {bot_id} is not healthy, attempting to restart")
+                    
+                    # Log the unhealthy state
+                    try:
+                        bot_model = Bot.objects.get(id=bot_id)
+                        BotLog.objects.create(
+                            bot=bot_model,
+                            event_type="BOT_UNHEALTHY",
+                            description="Bot detected as unhealthy during health check"
+                        )
+                    except Bot.DoesNotExist:
+                        pass
+                        
+                    # Restart the bot in a separate thread to avoid blocking
+                    with ThreadPoolExecutor(max_workers=1) as executor:
+                        executor.submit(self.restart_bot, bot_id)
+                        
+            except Exception as e:
+                logger.error(f"Health check failed for bot {bot_id}: {str(e)}")
+                
+    def start_active_bots(self):
+        """Start all active bots from the database"""
+        try:
+            # Get all active bots from the database
+            active_bots = Bot.objects.filter(is_active=True)
+            
+            for bot in active_bots:
+                # Don't start already running bots
+                if bot.id not in self.running_bots:
+                    self.start_bot(bot.id)
+                    
+            logger.info(f"Started {len(active_bots)} active bots")
+            
+        except Exception as e:
+            logger.error(f"Failed to start active bots: {str(e)}")
+            
+# Create the singleton instance
+bot_manager = BotManager()
\ No newline at end of file
diff --git a/bot_management/discord_bot/utils.py b/bot_management/discord_bot/utils.py
new file mode 100644
index 0000000..ee2d728
--- /dev/null
+++ b/bot_management/discord_bot/utils.py
@@ -0,0 +1,170 @@
+import discord
+import logging
+import json
+import os
+import aiohttp
+import asyncio
+from typing import Dict, List, Any, Optional, Union
+import time
+from bot_management.models import BotLog
+
+# Configure logging
+logger = logging.getLogger(__name__)
+
+async def send_paginated_message(
+    interaction: discord.Interaction,
+    pages: List[Union[discord.Embed, str]],
+    ephemeral: bool = False,
+    timeout: int = 300
+) -> None:
+    """
+    Send a paginated message with navigation buttons
+    
+    Args:
+        interaction: The original Discord interaction
+        pages: List of embeds or strings to paginate
+        ephemeral: Whether the response should be ephemeral
+        timeout: Button timeout in seconds
+    """
+    if not pages:
+        return
+    
+    # Initialize page counter
+    current_page = 0
+    
+    # Create buttons for navigation
+    first_button = discord.ui.Button(emoji="⏮️", style=discord.ButtonStyle.secondary)
+    prev_button = discord.ui.Button(emoji="◀️", style=discord.ButtonStyle.secondary)
+    next_button = discord.ui.Button(emoji="▶️", style=discord.ButtonStyle.secondary)
+    last_button = discord.ui.Button(emoji="⏭️", style=discord.ButtonStyle.secondary)
+    
+    # Create view with buttons
+    view = discord.ui.View(timeout=timeout)
+    view.add_item(first_button)
+    view.add_item(prev_button)
+    view.add_item(next_button)
+    view.add_item(last_button)
+    
+    # Define button callbacks
+    async def update_page(button_interaction: discord.Interaction, new_page: int):
+        nonlocal current_page
+        current_page = max(0, min(new_page, len(pages) - 1))
+        
+        content = None
+        embed = None
+        
+        if isinstance(pages[current_page], discord.Embed):
+            embed = pages[current_page]
+            # Add page counter to footer
+            embed.set_footer(text=f"Page {current_page + 1}/{len(pages)}")
+        else:
+            content = f"{pages[current_page]}\n\nPage {current_page + 1}/{len(pages)}"
+            
+        await button_interaction.response.edit_message(content=content, embed=embed, view=view)
+    
+    # Set button callbacks
+    first_button.callback = lambda i: update_page(i, 0)
+    prev_button.callback = lambda i: update_page(i, current_page - 1)
+    next_button.callback = lambda i: update_page(i, current_page + 1)
+    last_button.callback = lambda i: update_page(i, len(pages) - 1)
+    
+    # Handle initial response
+    content = None
+    embed = None
+    
+    if isinstance(pages[0], discord.Embed):
+        embed = pages[0]
+        # Add page counter to footer
+        embed.set_footer(text=f"Page 1/{len(pages)}")
+    else:
+        content = f"{pages[0]}\n\nPage 1/{len(pages)}"
+        
+    await interaction.response.send_message(content=content, embed=embed, view=view, ephemeral=ephemeral)
+
+async def fetch_json(url: str, headers: Dict = None) -> Dict:
+    """
+    Fetch JSON data from a URL
+    
+    Args:
+        url: The URL to fetch from
+        headers: Optional headers for the request
+        
+    Returns:
+        Dict: The JSON response data
+        
+    Raises:
+        Exception: If the request fails or returns invalid JSON
+    """
+    async with aiohttp.ClientSession() as session:
+        async with session.get(url, headers=headers) as response:
+            if response.status != 200:
+                raise Exception(f"Request failed with status {response.status}")
+            
+            try:
+                return await response.json()
+            except Exception as e:
+                raise Exception(f"Failed to parse JSON: {str(e)}")
+
+def log_bot_event(bot_id: int, event_type: str, description: str) -> None:
+    """
+    Log a bot event to the database
+    
+    Args:
+        bot_id: The database ID of the bot
+        event_type: The type of event
+        description: Description of the event
+    """
+    try:
+        from bot_management.models import Bot
+        
+        bot = Bot.objects.get(id=bot_id)
+        BotLog.objects.create(
+            bot=bot,
+            event_type=event_type,
+            description=description
+        )
+    except Exception as e:
+        logger.error(f"Failed to log bot event: {str(e)}")
+
+class RateLimiter:
+    """A utility for rate limiting operations"""
+    
+    def __init__(self, limit: int, interval: float):
+        """
+        Initialize a rate limiter
+        
+        Args:
+            limit: Maximum number of operations in the interval
+            interval: Time interval in seconds
+        """
+        self.limit = limit
+        self.interval = interval
+        self.operations = []
+        
+    async def acquire(self) -> bool:
+        """
+        Attempt to acquire permission to perform an operation
+        
+        Returns:
+            bool: True if operation is allowed, False otherwise
+        """
+        now = time.time()
+        
+        # Remove timestamps older than the interval
+        self.operations = [t for t in self.operations if now - t <= self.interval]
+        
+        # Check if under the limit
+        if len(self.operations) < self.limit:
+            self.operations.append(now)
+            return True
+            
+        # Calculate time to wait if over limit
+        if self.operations:
+            oldest = min(self.operations)
+            wait_time = self.interval - (now - oldest)
+            
+            if wait_time > 0:
+                await asyncio.sleep(wait_time)
+                return await self.acquire()
+                
+        return False
\ No newline at end of file
diff --git a/bot_management/management/__init__.py b/bot_management/management/__init__.py
new file mode 100644
index 0000000..4ac42f5
--- /dev/null
+++ b/bot_management/management/__init__.py
@@ -0,0 +1 @@
+# Bot management commands
\ No newline at end of file
diff --git a/bot_management/management/commands/__init__.py b/bot_management/management/commands/__init__.py
new file mode 100644
index 0000000..4ac42f5
--- /dev/null
+++ b/bot_management/management/commands/__init__.py
@@ -0,0 +1 @@
+# Bot management commands
\ No newline at end of file
diff --git a/bot_management/management/commands/botmanager.py b/bot_management/management/commands/botmanager.py
new file mode 100644
index 0000000..c502bcf
--- /dev/null
+++ b/bot_management/management/commands/botmanager.py
@@ -0,0 +1,258 @@
+from django.core.management.base import BaseCommand, CommandError
+import time
+import sys
+import signal
+import threading
+import logging
+import asyncio
+from bot_management.models import Bot
+from bot_management.discord_bot.service import bot_manager
+
+# Configure logging
+logger = logging.getLogger(__name__)
+
+class Command(BaseCommand):
+    help = 'Manage Discord bots'
+    
+    def add_arguments(self, parser):
+        parser.add_argument(
+            '--action',
+            type=str,
+            choices=['start', 'stop', 'restart', 'status', 'start-all', 'stop-all', 'monitor'],
+            required=True,
+            help='The action to perform'
+        )
+        parser.add_argument(
+            '--bot-id',
+            type=int,
+            help='The ID of the bot to manage'
+        )
+        parser.add_argument(
+            '--monitor-time',
+            type=int,
+            default=0,
+            help='How long to run the monitor mode (in seconds, 0 for indefinite)'
+        )
+        
+    def handle(self, *args, **options):
+        action = options['action']
+        bot_id = options.get('bot_id')
+        monitor_time = options.get('monitor_time', 0)
+        
+        # Start the bot manager
+        bot_manager.start()
+        
+        try:
+            if action == 'start':
+                self._handle_start(bot_id)
+            elif action == 'stop':
+                self._handle_stop(bot_id)
+            elif action == 'restart':
+                self._handle_restart(bot_id)
+            elif action == 'status':
+                self._handle_status(bot_id)
+            elif action == 'start-all':
+                self._handle_start_all()
+            elif action == 'stop-all':
+                self._handle_stop_all()
+            elif action == 'monitor':
+                self._handle_monitor(monitor_time)
+        except KeyboardInterrupt:
+            self.stdout.write(self.style.WARNING('Interrupted by user'))
+        finally:
+            # Only stop the manager if not in monitor mode
+            if action != 'monitor':
+                bot_manager.stop()
+                
+    def _handle_start(self, bot_id):
+        if not bot_id:
+            raise CommandError('Bot ID is required for the start action')
+            
+        self.stdout.write(f'Starting bot with ID {bot_id}...')
+        
+        try:
+            # Check if bot exists
+            bot = Bot.objects.get(id=bot_id)
+            
+            # Ensure bot is active
+            if not bot.is_active:
+                self.stdout.write(self.style.WARNING(f'Bot {bot_id} is marked as inactive'))
+                confirm = input('Do you want to start it anyway? (y/n): ')
+                if confirm.lower() != 'y':
+                    self.stdout.write(self.style.ERROR('Operation cancelled'))
+                    return
+                    
+            # Start the bot
+            success = bot_manager.start_bot(bot_id)
+            
+            if success:
+                self.stdout.write(self.style.SUCCESS(f'Bot {bot_id} ({bot.name}) started successfully'))
+            else:
+                self.stdout.write(self.style.ERROR(f'Failed to start bot {bot_id}'))
+                
+        except Bot.DoesNotExist:
+            self.stdout.write(self.style.ERROR(f'Bot with ID {bot_id} does not exist'))
+            
+    def _handle_stop(self, bot_id):
+        if not bot_id:
+            raise CommandError('Bot ID is required for the stop action')
+            
+        self.stdout.write(f'Stopping bot with ID {bot_id}...')
+        
+        # Stop the bot
+        success = bot_manager.stop_bot(bot_id)
+        
+        if success:
+            self.stdout.write(self.style.SUCCESS(f'Bot {bot_id} stopped successfully'))
+        else:
+            self.stdout.write(self.style.ERROR(f'Failed to stop bot {bot_id}'))
+            
+    def _handle_restart(self, bot_id):
+        if not bot_id:
+            raise CommandError('Bot ID is required for the restart action')
+            
+        self.stdout.write(f'Restarting bot with ID {bot_id}...')
+        
+        # Restart the bot
+        success = bot_manager.restart_bot(bot_id)
+        
+        if success:
+            self.stdout.write(self.style.SUCCESS(f'Bot {bot_id} restarted successfully'))
+        else:
+            self.stdout.write(self.style.ERROR(f'Failed to restart bot {bot_id}'))
+            
+    def _handle_status(self, bot_id=None):
+        if bot_id:
+            # Get status for a specific bot
+            status = bot_manager.get_bot_status(bot_id)
+            
+            try:
+                bot = Bot.objects.get(id=bot_id)
+                self.stdout.write(f'Status for bot {bot_id} ({bot.name}):')
+            except Bot.DoesNotExist:
+                self.stdout.write(f'Status for bot {bot_id}:')
+                
+            self._print_bot_status(bot_id, status)
+        else:
+            # Get status for all bots
+            statuses = bot_manager.get_all_bots_status()
+            
+            if not statuses:
+                self.stdout.write('No bots are currently running')
+                return
+                
+            self.stdout.write(f'Status for {len(statuses)} running bots:')
+            
+            for bot_id, status in statuses.items():
+                try:
+                    bot = Bot.objects.get(id=bot_id)
+                    self.stdout.write(f'\nBot {bot_id} ({bot.name}):')
+                except Bot.DoesNotExist:
+                    self.stdout.write(f'\nBot {bot_id}:')
+                    
+                self._print_bot_status(bot_id, status)
+                
+    def _print_bot_status(self, bot_id, status):
+        # Format and print status information
+        self.stdout.write(f'  Running: {status["running"]}')
+        
+        if status["running"]:
+            self.stdout.write(f'  Connected: {status["connected"]}')
+            self.stdout.write(f'  Healthy: {status["healthy"]}')
+            
+            if status["connected"]:
+                self.stdout.write(f'  Guilds: {status["guilds"]}')
+                self.stdout.write(f'  Users: {status["users"]}')
+                
+                # Format uptime
+                uptime = status["uptime"]
+                days, remainder = divmod(uptime, 86400)
+                hours, remainder = divmod(remainder, 3600)
+                minutes, seconds = divmod(remainder, 60)
+                
+                uptime_str = f"{int(days)}d {int(hours)}h {int(minutes)}m {int(seconds)}s"
+                self.stdout.write(f'  Uptime: {uptime_str}')
+                
+                self.stdout.write(f'  Commands used: {status["commands_used"]}')
+                
+    def _handle_start_all(self):
+        self.stdout.write('Starting all active bots...')
+        
+        # Get all active bots
+        active_bots = Bot.objects.filter(is_active=True)
+        
+        if not active_bots:
+            self.stdout.write(self.style.WARNING('No active bots found'))
+            return
+            
+        self.stdout.write(f'Found {len(active_bots)} active bots')
+        
+        # Start each bot
+        success_count = 0
+        for bot in active_bots:
+            self.stdout.write(f'Starting bot {bot.id} ({bot.name})...')
+            
+            if bot_manager.start_bot(bot.id):
+                success_count += 1
+            else:
+                self.stdout.write(self.style.ERROR(f'Failed to start bot {bot.id}'))
+                
+        self.stdout.write(self.style.SUCCESS(f'Successfully started {success_count} of {len(active_bots)} bots'))
+        
+    def _handle_stop_all(self):
+        self.stdout.write('Stopping all running bots...')
+        
+        # Get all running bots
+        running_bots = list(bot_manager.running_bots.keys())
+        
+        if not running_bots:
+            self.stdout.write(self.style.WARNING('No running bots found'))
+            return
+            
+        self.stdout.write(f'Found {len(running_bots)} running bots')
+        
+        # Stop each bot
+        success_count = 0
+        for bot_id in running_bots:
+            self.stdout.write(f'Stopping bot {bot_id}...')
+            
+            if bot_manager.stop_bot(bot_id):
+                success_count += 1
+            else:
+                self.stdout.write(self.style.ERROR(f'Failed to stop bot {bot_id}'))
+                
+        self.stdout.write(self.style.SUCCESS(f'Successfully stopped {success_count} of {len(running_bots)} bots'))
+        
+    def _handle_monitor(self, monitor_time):
+        self.stdout.write('Starting bot monitor mode...')
+        
+        # Register signal handlers for graceful shutdown
+        def handle_signal(sig, frame):
+            self.stdout.write(self.style.WARNING('\nShutting down bot manager...'))
+            bot_manager.stop()
+            sys.exit(0)
+            
+        signal.signal(signal.SIGINT, handle_signal)
+        signal.signal(signal.SIGTERM, handle_signal)
+        
+        # Start all active bots
+        self._handle_start_all()
+        
+        # Monitor loop
+        start_time = time.time()
+        try:
+            while True:
+                # Check if we've reached the time limit
+                if monitor_time > 0 and time.time() - start_time >= monitor_time:
+                    self.stdout.write(self.style.SUCCESS(f'Monitor completed after {monitor_time} seconds'))
+                    break
+                    
+                # Print status periodically
+                self.stdout.write('\n--- Bot Status Update ---')
+                self._handle_status()
+                
+                # Wait before next status update
+                time.sleep(60)
+        finally:
+            # Always stop the manager when exiting
+            bot_manager.stop()
\ No newline at end of file
diff --git a/bot_management/models.py b/bot_management/models.py
index 996e817..7d15294 100644
--- a/bot_management/models.py
+++ b/bot_management/models.py
@@ -3,10 +3,14 @@ from django.contrib.auth.models import User
 from cryptography.fernet import Fernet
 import environ
 import os
+import logging
 
 # Initialize environment variables
 env = environ.Env()
 
+# Get logger
+logger = logging.getLogger(__name__)
+
 class Bot(models.Model):
     """Model representing a Discord bot"""
     name = models.CharField(max_length=100)
@@ -25,11 +29,65 @@ class Bot(models.Model):
     
     def save(self, *args, **kwargs):
         # Encrypt the token if it's not already encrypted
-        if not self.id:  # New bot
-            key = env('BOT_TOKEN_KEY')
-            f = Fernet(key.encode() if isinstance(key, str) else key)
-            self.token = f.encrypt(self.token.encode()).decode()
+        if not self.id or kwargs.get('update_fields') and 'token' in kwargs.get('update_fields'):
+            # Only update token if it's not empty and doesn't look encrypted
+            if self.token and len(self.token) < 100:  # Simple check for likely unencrypted tokens
+                key = env('BOT_TOKEN_KEY')
+                f = Fernet(key.encode() if isinstance(key, str) else key)
+                self.token = f.encrypt(self.token.encode()).decode()
+        
         super().save(*args, **kwargs)
+    
+    def start(self):
+        """Start the bot instance"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        success = bot_manager.start_bot(self.id)
+        
+        if success:
+            BotLog.objects.create(
+                bot=self,
+                event_type='BOT_START_REQUESTED',
+                description=f'Bot start requested via model method'
+            )
+            
+        return success
+    
+    def stop(self):
+        """Stop the bot instance"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        success = bot_manager.stop_bot(self.id)
+        
+        if success:
+            BotLog.objects.create(
+                bot=self,
+                event_type='BOT_STOP_REQUESTED',
+                description=f'Bot stop requested via model method'
+            )
+            
+        return success
+    
+    def restart(self):
+        """Restart the bot instance"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        success = bot_manager.restart_bot(self.id)
+        
+        if success:
+            BotLog.objects.create(
+                bot=self,
+                event_type='BOT_RESTART_REQUESTED',
+                description=f'Bot restart requested via model method'
+            )
+            
+        return success
+    
+    def get_status(self):
+        """Get the bot's current status"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        return bot_manager.get_bot_status(self.id)
 
 class BotLog(models.Model):
     """Model for logging bot activity"""
@@ -39,4 +97,4 @@ class BotLog(models.Model):
     timestamp = models.DateTimeField(auto_now_add=True)
     
     def __str__(self):
-        return f"{self.bot.name} - {self.event_type} - {self.timestamp}"
+        return f"{self.bot.name} - {self.event_type} - {self.timestamp}"
\ No newline at end of file
diff --git a/bot_management/templates/bot_management/bot_detail.html b/bot_management/templates/bot_management/bot_detail.html
index 3ee5746..31e5b56 100644
--- a/bot_management/templates/bot_management/bot_detail.html
+++ b/bot_management/templates/bot_management/bot_detail.html
@@ -33,35 +33,72 @@
                 {% endif %}
                 <div>
                     <h1 class="card-title fs-3 mb-0">{{ bot.name }}</h1>
-                    <span class="badge {% if bot.is_active %}bg-success{% else %}bg-secondary{% endif %}">
-                        {% if bot.is_active %}Active{% else %}Inactive{% endif %}
-                    </span>
+                    <div>
+                        <span class="badge {% if bot.is_active %}bg-success{% else %}bg-secondary{% endif %}">
+                            {% if bot.is_active %}Active{% else %}Inactive{% endif %}
+                        </span>
+                        
+                        {% if status.running %}
+                            <span class="badge bg-primary ms-1">Running</span>
+                            {% if status.connected %}
+                                <span class="badge bg-success ms-1">Connected</span>
+                            {% else %}
+                                <span class="badge bg-warning ms-1">Connecting</span>
+                            {% endif %}
+                        {% else %}
+                            <span class="badge bg-secondary ms-1">Stopped</span>
+                        {% endif %}
+                    </div>
                 </div>
                 
                 <div class="ms-auto">
-                    <div class="dropdown">
-                        <button class="btn btn-sm btn-light dropdown-toggle" type="button" id="botActionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
-                            Actions
-                        </button>
-                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="botActionDropdown">
-                            <li><a class="dropdown-item" href="{% url 'bot_management:bot_update' bot.id %}">
-                                <i class="bi bi-pencil me-2"></i>Edit Bot
-                            </a></li>
-                            <li><a class="dropdown-item" href="#" id="toggleStatusBtn" data-bot-id="{{ bot.id }}" data-active="{{ bot.is_active|yesno:'true,false' }}">
-                                {% if bot.is_active %}
-                                    <i class="bi bi-pause-circle me-2"></i>Deactivate Bot
-                                {% else %}
-                                    <i class="bi bi-play-circle me-2"></i>Activate Bot
-                                {% endif %}
-                            </a></li>
-                            <li><a class="dropdown-item" href="{% url 'bot_management:bot_logs' bot.id %}">
-                                <i class="bi bi-list-ul me-2"></i>View All Logs
-                            </a></li>
-                            <li><hr class="dropdown-divider"></li>
-                            <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteModal">
-                                <i class="bi bi-trash me-2"></i>Delete Bot
-                            </a></li>
-                        </ul>
+                    <div class="btn-group">
+                        {% if status.running %}
+                            <form action="{% url 'bot_management:stop_bot' bot.id %}" method="post" class="d-inline">
+                                {% csrf_token %}
+                                <button type="submit" class="btn btn-warning btn-sm">
+                                    <i class="bi bi-stop-circle me-1"></i>Stop Bot
+                                </button>
+                            </form>
+                            <form action="{% url 'bot_management:restart_bot' bot.id %}" method="post" class="d-inline">
+                                {% csrf_token %}
+                                <button type="submit" class="btn btn-info btn-sm ms-2">
+                                    <i class="bi bi-arrow-clockwise me-1"></i>Restart Bot
+                                </button>
+                            </form>
+                        {% else %}
+                            <form action="{% url 'bot_management:start_bot' bot.id %}" method="post" class="d-inline">
+                                {% csrf_token %}
+                                <button type="submit" class="btn btn-success btn-sm" {% if not bot.is_active %}disabled{% endif %}>
+                                    <i class="bi bi-play-circle me-1"></i>Start Bot
+                                </button>
+                            </form>
+                        {% endif %}
+                        
+                        <div class="dropdown d-inline-block ms-2">
+                            <button class="btn btn-sm btn-light dropdown-toggle" type="button" id="botActionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
+                                More Actions
+                            </button>
+                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="botActionDropdown">
+                                <li><a class="dropdown-item" href="{% url 'bot_management:bot_update' bot.id %}">
+                                    <i class="bi bi-pencil me-2"></i>Edit Bot
+                                </a></li>
+                                <li><a class="dropdown-item" href="#" id="toggleStatusBtn" data-bot-id="{{ bot.id }}" data-active="{{ bot.is_active|yesno:'true,false' }}">
+                                    {% if bot.is_active %}
+                                        <i class="bi bi-pause-circle me-2"></i>Deactivate Bot
+                                    {% else %}
+                                        <i class="bi bi-play-circle me-2"></i>Activate Bot
+                                    {% endif %}
+                                </a></li>
+                                <li><a class="dropdown-item" href="{% url 'bot_management:bot_logs' bot.id %}">
+                                    <i class="bi bi-list-ul me-2"></i>View All Logs
+                                </a></li>
+                                <li><hr class="dropdown-divider"></li>
+                                <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteModal">
+                                    <i class="bi bi-trash me-2"></i>Delete Bot
+                                </a></li>
+                            </ul>
+                        </div>
                     </div>
                 </div>
             </div>
@@ -97,11 +134,41 @@
                             <h6>Bot Status</h6>
                             <ul class="list-group list-group-flush">
                                 <li class="list-group-item d-flex justify-content-between">
-                                    <span>Status:</span>
+                                    <span>App Status:</span>
                                     <span class="badge {% if bot.is_active %}bg-success{% else %}bg-secondary{% endif %}">
                                         {% if bot.is_active %}Active{% else %}Inactive{% endif %}
                                     </span>
                                 </li>
+                                <li class="list-group-item d-flex justify-content-between">
+                                    <span>Runtime Status:</span>
+                                    <span class="badge {% if status.running %}{% if status.connected %}bg-success{% else %}bg-warning{% endif %}{% else %}bg-secondary{% endif %}">
+                                        {% if status.running %}
+                                            {% if status.connected %}Connected{% else %}Connecting{% endif %}
+                                        {% else %}
+                                            Stopped
+                                        {% endif %}
+                                    </span>
+                                </li>
+                                {% if status.running and status.connected %}
+                                    <li class="list-group-item d-flex justify-content-between">
+                                        <span>Guilds:</span>
+                                        <span>{{ status.guilds }}</span>
+                                    </li>
+                                    <li class="list-group-item d-flex justify-content-between">
+                                        <span>Users:</span>
+                                        <span>{{ status.users }}</span>
+                                    </li>
+                                    {% if uptime %}
+                                        <li class="list-group-item d-flex justify-content-between">
+                                            <span>Uptime:</span>
+                                            <span>{{ uptime }}</span>
+                                        </li>
+                                    {% endif %}
+                                    <li class="list-group-item d-flex justify-content-between">
+                                        <span>Commands Used:</span>
+                                        <span>{{ status.commands_used }}</span>
+                                    </li>
+                                {% endif %}
                                 <li class="list-group-item d-flex justify-content-between">
                                     <span>Created:</span>
                                     <span>{{ bot.created_at|date:"M d, Y H:i" }}</span>
@@ -151,6 +218,68 @@
             </div>
         </div>
     </div>
+    
+    {% if status.running and status.connected %}
+    <div class="card mb-4">
+        <div class="card-header bg-info bg-gradient text-white">
+            <h5 class="card-title mb-0">
+                <i class="bi bi-code-slash me-2"></i>Discord Slash Commands
+            </h5>
+        </div>
+        <div class="card-body">
+            <p>Your bot has the following slash commands available:</p>
+            
+            <div class="table-responsive">
+                <table class="table table-striped table-hover">
+                    <thead>
+                        <tr>
+                            <th>Command</th>
+                            <th>Description</th>
+                        </tr>
+                    </thead>
+                    <tbody>
+                        <tr>
+                            <td><code>/help</code></td>
+                            <td>Shows the list of available commands</td>
+                        </tr>
+                        <tr>
+                            <td><code>/info</code></td>
+                            <td>Displays information about the bot</td>
+                        </tr>
+                        <tr>
+                            <td><code>/util ping</code></td>
+                            <td>Checks the bot's response time</td>
+                        </tr>
+                        <tr>
+                            <td><code>/util serverinfo</code></td>
+                            <td>Shows information about the current Discord server</td>
+                        </tr>
+                        <tr>
+                            <td><code>/fun eightball</code></td>
+                            <td>Ask the Magic 8-Ball a question</td>
+                        </tr>
+                        <tr>
+                            <td><code>/fun roll</code></td>
+                            <td>Roll dice (e.g. 1d20, 3d6)</td>
+                        </tr>
+                        <tr>
+                            <td><code>/system</code></td>
+                            <td>Display system information</td>
+                        </tr>
+                    </tbody>
+                </table>
+            </div>
+            
+            <p class="mt-3">
+                <small class="text-muted">
+                    <i class="bi bi-info-circle me-1"></i>
+                    Commands may take up to an hour to appear in Discord after the bot is started.
+                    To manually sync commands, restart the bot.
+                </small>
+            </p>
+        </div>
+    </div>
+    {% endif %}
 </div>
 
 <!-- Delete Confirmation Modal -->
@@ -164,6 +293,13 @@
             <div class="modal-body">
                 <p>Are you sure you want to delete the bot <strong>{{ bot.name }}</strong>?</p>
                 <p class="text-danger"><strong>Warning:</strong> This action cannot be undone. All data associated with this bot will be permanently deleted.</p>
+                
+                {% if status.running %}
+                <div class="alert alert-warning">
+                    <i class="bi bi-exclamation-triangle me-2"></i>
+                    This bot is currently running. Deleting it will stop the bot instance.
+                </div>
+                {% endif %}
             </div>
             <div class="modal-footer">
                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
@@ -201,11 +337,11 @@
                         if (response.is_active) {
                             $btn.html('<i class="bi bi-pause-circle me-2"></i>Deactivate Bot');
                             $btn.data('active', true);
-                            $('.badge').removeClass('bg-secondary').addClass('bg-success').text('Active');
+                            $('.badge').first().removeClass('bg-secondary').addClass('bg-success').text('Active');
                         } else {
                             $btn.html('<i class="bi bi-play-circle me-2"></i>Activate Bot');
                             $btn.data('active', false);
-                            $('.badge').removeClass('bg-success').addClass('bg-secondary').text('Inactive');
+                            $('.badge').first().removeClass('bg-success').addClass('bg-secondary').text('Inactive');
                         }
                         
                         // Show success message
@@ -214,6 +350,11 @@
                                     '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                                     '</div>';
                         $('.breadcrumb').after(alert);
+                        
+                        // Refresh the page after a short delay
+                        setTimeout(function() {
+                            window.location.reload();
+                        }, 1500);
                     }
                 },
                 error: function() {
diff --git a/bot_management/templates/bot_management/index.html b/bot_management/templates/bot_management/index.html
index 7075c13..061c4be 100644
--- a/bot_management/templates/bot_management/index.html
+++ b/bot_management/templates/bot_management/index.html
@@ -25,7 +25,8 @@
     
     <div class="row mt-4">
         {% if bots %}
-            {% for bot in bots %}
+            {% for bot_data in bots %}
+                {% with bot=bot_data.bot status=bot_data.status %}
                 <div class="col-md-6 col-lg-4 mb-4">
                     <div class="card h-100 {% if not bot.is_active %}border-secondary{% endif %}">
                         <div class="card-header d-flex align-items-center">
@@ -42,6 +43,13 @@
                                 <span class="badge {% if bot.is_active %}bg-success{% else %}bg-secondary{% endif %}">
                                     {% if bot.is_active %}Active{% else %}Inactive{% endif %}
                                 </span>
+                                {% if status.running %}
+                                    <span class="badge {% if status.connected %}bg-success{% else %}bg-warning{% endif %} ms-1">
+                                        {% if status.connected %}Online{% else %}Connecting{% endif %}
+                                    </span>
+                                {% else %}
+                                    <span class="badge bg-secondary ms-1">Offline</span>
+                                {% endif %}
                             </div>
                         </div>
                         <div class="card-body">
@@ -51,15 +59,47 @@
                                 <p class="card-text text-muted">No description provided</p>
                             {% endif %}
                             
+                            {% if status.running and status.connected %}
+                                <div class="d-flex justify-content-between text-muted small mb-3">
+                                    <span>{{ status.guilds }} servers</span>
+                                    <span>{{ status.users }} users</span>
+                                    <span>{{ status.commands_used }} commands used</span>
+                                </div>
+                            {% endif %}
+                            
                             <div class="d-flex justify-content-between align-items-center mt-3">
                                 <small class="text-muted">Created: {{ bot.created_at|date:"M d, Y" }}</small>
-                                <a href="{% url 'bot_management:bot_detail' bot.id %}" class="btn btn-sm btn-outline-primary">
-                                    <i class="bi bi-info-circle me-1"></i> Details
-                                </a>
+                                <div>
+                                    {% if status.running %}
+                                        <form action="{% url 'bot_management:stop_bot' bot.id %}" method="post" class="d-inline">
+                                            {% csrf_token %}
+                                            <button type="submit" class="btn btn-sm btn-warning" title="Stop Bot">
+                                                <i class="bi bi-stop-circle"></i>
+                                            </button>
+                                        </form>
+                                        <form action="{% url 'bot_management:restart_bot' bot.id %}" method="post" class="d-inline">
+                                            {% csrf_token %}
+                                            <button type="submit" class="btn btn-sm btn-info ms-1" title="Restart Bot">
+                                                <i class="bi bi-arrow-clockwise"></i>
+                                            </button>
+                                        </form>
+                                    {% else %}
+                                        <form action="{% url 'bot_management:start_bot' bot.id %}" method="post" class="d-inline">
+                                            {% csrf_token %}
+                                            <button type="submit" class="btn btn-sm btn-success" title="Start Bot" {% if not bot.is_active %}disabled{% endif %}>
+                                                <i class="bi bi-play-circle"></i>
+                                            </button>
+                                        </form>
+                                    {% endif %}
+                                    <a href="{% url 'bot_management:bot_detail' bot.id %}" class="btn btn-sm btn-outline-primary ms-1">
+                                        <i class="bi bi-info-circle me-1"></i> Details
+                                    </a>
+                                </div>
                             </div>
                         </div>
                     </div>
                 </div>
+                {% endwith %}
             {% endfor %}
         {% else %}
             <div class="col-12">
diff --git a/bot_management/urls.py b/bot_management/urls.py
index cae9311..1d852f0 100644
--- a/bot_management/urls.py
+++ b/bot_management/urls.py
@@ -12,4 +12,9 @@ urlpatterns = [
     path('bot/<int:bot_id>/delete/', views.bot_delete, name='bot_delete'),
     path('bot/<int:bot_id>/toggle-status/', views.toggle_bot_status, name='toggle_bot_status'),
     path('bot/<int:bot_id>/logs/', views.bot_logs, name='bot_logs'),
+    
+    # Bot operation
+    path('bot/<int:bot_id>/start/', views.start_bot, name='start_bot'),
+    path('bot/<int:bot_id>/stop/', views.stop_bot, name='stop_bot'),
+    path('bot/<int:bot_id>/restart/', views.restart_bot, name='restart_bot'),
 ]
\ No newline at end of file
diff --git a/bot_management/views.py b/bot_management/views.py
index f9ae988..041ee71 100644
--- a/bot_management/views.py
+++ b/bot_management/views.py
@@ -7,15 +7,25 @@ from django.views.decorators.http import require_POST
 from dashboard.decorators import discord_login_required
 from .models import Bot, BotLog
 from .forms import BotForm, BotLogForm
+import time
 
 @discord_login_required
 def index(request):
     """Bot management index view showing a list of user's bots"""
     bots = Bot.objects.filter(owner=request.user).order_by('-created_at')
     
+    # Get status for each bot
+    bots_with_status = []
+    for bot in bots:
+        status = bot.get_status()
+        bots_with_status.append({
+            'bot': bot,
+            'status': status
+        })
+    
     return render(request, 'bot_management/index.html', {
         'title': 'Bot Management',
-        'bots': bots,
+        'bots': bots_with_status,
     })
 
 @discord_login_required
@@ -24,10 +34,24 @@ def bot_detail(request, bot_id):
     bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
     logs = bot.logs.all().order_by('-timestamp')[:10]  # Get the 10 most recent logs
     
+    # Get bot status
+    status = bot.get_status()
+    
+    # Format uptime if available
+    uptime_str = ""
+    if status["running"] and status["connected"] and status["uptime"] > 0:
+        uptime = status["uptime"]
+        days, remainder = divmod(uptime, 86400)
+        hours, remainder = divmod(remainder, 3600)
+        minutes, seconds = divmod(remainder, 60)
+        uptime_str = f"{int(days)}d {int(hours)}h {int(minutes)}m {int(seconds)}s"
+    
     return render(request, 'bot_management/bot_detail.html', {
         'title': f'Bot: {bot.name}',
         'bot': bot,
         'logs': logs,
+        'status': status,
+        'uptime': uptime_str,
     })
 
 @discord_login_required
@@ -66,7 +90,17 @@ def bot_update(request, bot_id):
     if request.method == 'POST':
         form = BotForm(request.POST, instance=bot)
         if form.is_valid():
-            form.save()
+            # Check if token was changed
+            token_changed = form.cleaned_data.get('token') != ''
+            
+            # If token wasn't provided, don't update it
+            if not token_changed:
+                form.cleaned_data.pop('token')
+                bot = form.save(commit=False)
+                bot.token = Bot.objects.get(id=bot_id).token  # Keep original token
+                bot.save()
+            else:
+                form.save()
             
             # Create a log entry for bot update
             BotLog.objects.create(
@@ -75,6 +109,12 @@ def bot_update(request, bot_id):
                 description=f'Bot updated by {request.user.username}'
             )
             
+            # If the bot is running and the token was changed, restart it
+            status = bot.get_status()
+            if status["running"] and token_changed:
+                bot.restart()
+                messages.info(request, f'Bot "{bot.name}" is being restarted with the new token.')
+            
             messages.success(request, f'Bot "{bot.name}" has been updated successfully!')
             return redirect('bot_management:bot_detail', bot_id=bot.id)
     else:
@@ -95,6 +135,12 @@ def bot_update(request, bot_id):
 def bot_delete(request, bot_id):
     """View to delete a bot"""
     bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    
+    # Stop the bot if it's running
+    status = bot.get_status()
+    if status["running"]:
+        bot.stop()
+    
     bot_name = bot.name
     
     # Delete the bot
@@ -121,6 +167,12 @@ def toggle_bot_status(request, bot_id):
         description=f'Bot {status} by {request.user.username}'
     )
     
+    # If the bot is now inactive, stop it if it's running
+    if not bot.is_active:
+        bot_status = bot.get_status()
+        if bot_status["running"]:
+            bot.stop()
+    
     return JsonResponse({
         'success': True,
         'is_active': bot.is_active,
@@ -137,4 +189,68 @@ def bot_logs(request, bot_id):
         'title': f'Logs: {bot.name}',
         'bot': bot,
         'logs': logs,
-    })
\ No newline at end of file
+    })
+
+@discord_login_required
+@require_POST
+def start_bot(request, bot_id):
+    """View to start a bot"""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    
+    # Check if the bot is already running
+    status = bot.get_status()
+    if status["running"]:
+        messages.warning(request, f'Bot "{bot.name}" is already running.')
+    else:
+        # Ensure the bot is active
+        if not bot.is_active:
+            bot.is_active = True
+            bot.save()
+            messages.info(request, f'Bot "{bot.name}" has been activated.')
+        
+        # Start the bot
+        success = bot.start()
+        
+        if success:
+            messages.success(request, f'Bot "{bot.name}" has been started successfully!')
+        else:
+            messages.error(request, f'Failed to start bot "{bot.name}". Check the logs for details.')
+    
+    return redirect('bot_management:bot_detail', bot_id=bot.id)
+
+@discord_login_required
+@require_POST
+def stop_bot(request, bot_id):
+    """View to stop a bot"""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    
+    # Check if the bot is running
+    status = bot.get_status()
+    if not status["running"]:
+        messages.warning(request, f'Bot "{bot.name}" is not running.')
+    else:
+        # Stop the bot
+        success = bot.stop()
+        
+        if success:
+            messages.success(request, f'Bot "{bot.name}" has been stopped successfully!')
+        else:
+            messages.error(request, f'Failed to stop bot "{bot.name}". Check the logs for details.')
+    
+    return redirect('bot_management:bot_detail', bot_id=bot.id)
+
+@discord_login_required
+@require_POST
+def restart_bot(request, bot_id):
+    """View to restart a bot"""
+    bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
+    
+    # Restart the bot
+    success = bot.restart()
+    
+    if success:
+        messages.success(request, f'Bot "{bot.name}" is being restarted!')
+    else:
+        messages.error(request, f'Failed to restart bot "{bot.name}". Check the logs for details.')
+    
+    return redirect('bot_management:bot_detail', bot_id=bot.id)
\ No newline at end of file
diff --git a/db.sqlite3 b/db.sqlite3
index 24473540c7d0ebcf1c9a73ee4f8b0f9e4ff998b3..e1bf10290de5bc53450fde8acad2cb6223436149 100644
GIT binary patch
delta 869
zcma))J#W)s6ou^u1fq}x2_ysvwNe)bBfpNFI2}N?>okeu*uim}WC;$AlQ@aLoi{Z@
z%ZFeBm3Cl-u1rvg4s0;M20wtIKY;~_4WcrzfM7Yx(S6Pxo~^BOTU+P0FQMww%N(k{
zy7i*7m<o`E<T8?6PJY~9UOJyVd3OapgWSEr?A~$oiv&(k7*1kDb_tNH6txQIYh*r8
z0BZM(v$Ffqet8T*kjM9-a{wLm$>$Tv3rO<9nGbW+`_s=pRTjQ)-cu6C#RnAQY{1c!
zCL=Oy;cmw2PF$aIjF~YcLXvR7_*$<F$5s#s&|+#g&HNa60v-lBN$2c(B(E0~c2chi
zDt^B=2R>~54{+8PZStWEW2QEcu}TayeN2eCD(zd1Kq!m>)9ChKmD3wUz-Dw+);c^c
zPNzB`+CFLI+66~04wR9nav)aM{eq{kbsl0KMHH=AA|{-l=SGc|J*|XMjJdkM4!gEL
zpbfV}HkvpD;-;Umfh~I`FhDkT1hpM1*jnFGr>@!WWo5r;`jWt#LbxGQHWb@-HRyVH
zIq16U&}Q3Wo0-VB15zpVhMdJ@!@)S?h?-Yuxb8HR6kKa_9WK+XW#b&f+rmu8*+{J!
ztl46*D#dT&L>OViR%tAGL8J|$f}M@xJgn5>n{-)MvvHY~a9tMEq1xKm;F^NPwc10d
ztxd#0WA$3WYRX#3G@AT~15-f_U3@mK@{A!3dcA(BHwb5<OXkJtT43Z`{Z$areMqbh
zrFtb=E19Jcgw>W*GnBenDHaVcEO$EtQ{!(-95GZC5)AvlETb@h|F(?6sSE(8QU?f{
z+Cfq~sh$0^?!(m8m4t}?OQpoz$<o2w&Vrmq-_6h7q^@5{FzBCVNSX$DI`Oyq*B6Ps
m!==~Ti|PHv!*9~wc6#q?`Y7?EoL6Z25&ArFfIdI=qw^E|#uj=2

delta 734
zcmZXSJ8#-x07Wq*s+6QLm9n*|sMOWb=NGn-GWdZ3$HsucU={+{2F$}?9u8hY+M%7Q
zR2{OWSu?d67}_mMw)6*N$WQ1}sauPpR;twH4);iBxVnqQ&SJ51`V`8)f5t=kPlq3C
zo1suBynPdb$J;koFJfP}Kimv1*G@K|$FF^N>ATRoZ;#;J5WKr}yTaF7XSZ_rXXNcV
zd-kOkjven=(vjX3Cq>_3^KF}v2Sa@*_dyZIG+G&F#X^a*)ZrMoMnzMSJvMFFwT3%V
zT%uN`Ni;BLsyLsxUYvIMURJh5TAZ4h=@g^|KPNH1J<D|_To*yo4UWz^@p@551Z04f
z;wia;9@k0(yP<ov6elp*i9)s;a@&|W)T~z*vW={Qf?36rEi;>P37r|SuANak848_S
z-ps>WaVzI@N-*?PN^0~OLDosCjA*2#W#gHCs_uB2OJg?h@QTnw8MiS~lE#s9;7JO}
zcl-Q)lMppct|m2fJSB!q85<3#WQxMZHdiD@-UKhne$z0}oanb$!DItjX!9qB;dSMe
z`e#CGE={YIHpn<`N5%^6Cf4pWFmYbx>5j}xGozw|y2u1(N(5Cc6VD8|c`=a6iqj?Q
zpoG^0Q!OW%oLS+5CdlUXN)K<Ab<Qdk+Lqo0MYK6L(?h<{1syw|K&P}lNhTyAZ40Wd
zI%#Ss<ynz3O@wY~GR{uXfNXK{c!1Ccbwe3x1_m$^0VINg7>XwdI)Q;bn!o^oZ@_mU
z2wsNZC46`FWOxa$y^JW(a&?Vd6uMqDOL+fzgoXYZ024#w2@*|!_#TdvG$8(^|NFxi
l_p#5Xo6)Py`ycAXY4qZI^dZ4Rt`HP`1D!{f(D~Z0+Hc%&>5l*a

-- 
2.49.0.windows.1


From faa03d4550529f172ced12f9c8b7cc41929555b4 Mon Sep 17 00:00:00 2001
From: eqwgeryfgbdf <0988288034sky@gmail.com>
Date: Sat, 3 May 2025 15:07:07 +0800
Subject: [PATCH 10/10] feat: Enhance bot management with guild and settings
 models, add logging system, and improve Docker setup

---
 Dockerfile                                    |  80 ++-
 README.md                                     | 225 +++------
 bot_management/admin.py                       |  68 ++-
 bot_management/discord_bot/client.py          | 444 ++++++++++++++++-
 bot_management/discord_bot/service.py         | 390 +++++++++++++++
 bot_management/forms.py                       | 404 ++++++++++++++--
 bot_management/models.py                      | 448 ++++++++++++++++-
 bot_management/tests/test_models.py           | 223 ++++++++-
 bot_management/tests/test_views.py            |   7 +-
 bot_management/urls.py                        |  29 ++
 bot_management/views.py                       |   8 +
 config/asgi.py                                |  33 +-
 config/settings_base.py                       |   2 +
 config/settings_prod.py                       | 150 +++++-
 config/urls.py                                |   2 +
 dashboard/models.py                           |  81 +++-
 dashboard/templates/dashboard/new_base.html   | 381 ++++++++++-----
 dashboard/templates/dashboard/new_bots.html   |  13 +-
 dashboard/templates/dashboard/new_index.html  | 100 +++-
 .../templates/dashboard/new_servers.html      |   6 +-
 dashboard/templates/dashboard/profile.html    |  57 ++-
 dashboard/urls.py                             |   4 +
 dashboard/views.py                            | 455 +++++++++++++++++-
 db.sqlite3                                    | Bin 327680 -> 516096 bytes
 docker-compose.yml                            |  99 +++-
 requirements.txt                              |   7 +-
 social_cube/urls.py                           |   3 +
 27 files changed, 3281 insertions(+), 438 deletions(-)

diff --git a/Dockerfile b/Dockerfile
index c802acf..eee2e36 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -4,7 +4,8 @@ FROM python:3.11-slim
 # Set environment variables
 ENV PYTHONDONTWRITEBYTECODE=1 \
     PYTHONUNBUFFERED=1 \
-    DJANGO_ENV=production
+    DJANGO_ENV=production \
+    PATH="/home/appuser/.local/bin:$PATH"
 
 # Create and set working directory
 WORKDIR /app
@@ -14,32 +15,81 @@ RUN apt-get update \
     && apt-get install -y --no-install-recommends \
         gcc \
         postgresql-client \
+        netcat-traditional \
+        curl \
+        gosu \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*
 
-# Install Python dependencies
-COPY requirements.txt /app/
-RUN pip install --no-cache-dir -r requirements.txt
-
-# Copy project files
-COPY . /app/
-
 # Create user to run the app
 RUN adduser --disabled-password --gecos '' appuser \
+    && mkdir -p /app/media /app/staticfiles /app/logs \
     && chown -R appuser:appuser /app
 
 # Set up directories
-RUN mkdir -p /app/media /app/staticfiles /app/logs \
-    && chown -R appuser:appuser /app/media /app/staticfiles /app/logs
+COPY --chown=appuser:appuser . /app/
 
-# Switch to non-root user
+# Switch to non-root user for pip operations
 USER appuser
 
-# Collect static files
-RUN python manage.py collectstatic --noinput
+# Install Python dependencies
+RUN pip install --no-cache-dir --user -r requirements.txt
+
+# Add gunicorn and psycopg2-binary if not in requirements
+RUN pip install --no-cache-dir --user gunicorn psycopg2-binary daphne redis channels_redis
+
+# Create wait-for script for container orchestration
+USER root
+RUN echo '#!/bin/bash\n\
+set -e\n\
+\n\
+host="$1"\n\
+shift\n\
+port="$1"\n\
+shift\n\
+cmd="$@"\n\
+\n\
+until nc -z "$host" "$port"; do\n\
+  >&2 echo "Waiting for $host:$port..."\n\
+  sleep 1\n\
+done\n\
+\n\
+>&2 echo "$host:$port is available"\n\
+exec $cmd' > /usr/local/bin/wait-for \
+    && chmod +x /usr/local/bin/wait-for
+
+# Create entrypoint script
+RUN echo '#!/bin/bash\n\
+set -e\n\
+\n\
+# Run migrations if needed\n\
+if [ "$DJANGO_AUTO_MIGRATE" = "true" ]; then\n\
+  echo "Running migrations..."\n\
+  gosu appuser python manage.py migrate --noinput\n\
+fi\n\
+\n\
+# Collect static if needed\n\
+if [ "$DJANGO_COLLECTSTATIC" = "true" ]; then\n\
+  echo "Collecting static files..."\n\
+  gosu appuser python manage.py collectstatic --noinput\n\
+fi\n\
+\n\
+# Create superuser if needed (non-interactive)\n\
+if [ "$DJANGO_CREATE_SUPERUSER" = "true" ] && [ -n "$DJANGO_SUPERUSER_USERNAME" ] \\\n\
+    && [ -n "$DJANGO_SUPERUSER_EMAIL" ] && [ -n "$DJANGO_SUPERUSER_PASSWORD" ]; then\n\
+  echo "Creating superuser..."\n\
+  gosu appuser python manage.py createsuperuser --noinput || true\n\
+fi\n\
+\n\
+# Execute the command as appuser\n\
+exec gosu appuser "$@"' > /entrypoint.sh \
+    && chmod +x /entrypoint.sh
 
 # Expose port
 EXPOSE 8000
 
-# Run gunicorn
-CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "config.wsgi:application"]
\ No newline at end of file
+# Set the entrypoint
+ENTRYPOINT ["/entrypoint.sh"]
+
+# Default command
+CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "120", "config.wsgi:application"]
\ No newline at end of file
diff --git a/README.md b/README.md
index a5b87cc..cf4bfdb 100644
--- a/README.md
+++ b/README.md
@@ -45,13 +45,16 @@ social_cube/
 - **Bot Management**: Services for Discord bot creation, configuration, and monitoring
 - **Dashboard**: Web interface including analytics, monitoring, and task management
 - **Configuration**: Core settings and environment-specific configurations
+- **Logging System**: Comprehensive logging for HTTP requests, user actions, and application errors
+- **Real-time Updates**: WebSocket-based real-time updates for bot status and events
 
 ### Technologies
 
 - **Backend Framework**: Django 4.x with Django REST Framework
 - **Database**: SQLite (development), PostgreSQL (production)
 - **Task Queue**: Celery with Redis for background processing
-- **Frontend**: HTML, CSS, JavaScript with responsive design
+- **WebSockets**: Django Channels with Redis as the backing store
+- **Frontend**: HTML, CSS, JavaScript with Tailwind CSS for responsive design
 - **Deployment**: Docker and Docker Compose
 - **Authentication**: OAuth2 integration with Discord
 
@@ -61,12 +64,25 @@ Key models in the application include:
 
 - **User**: Extended Django user model with Discord OAuth integration
 - **Bot**: Discord bot configuration and credentials
-- **Server**: Discord servers where bots are deployed
-- **Command**: Bot commands and their usage statistics
-- **Event**: Discord events tracked by bots
+- **Guild**: Discord servers (guilds) where bots are deployed
+- **GuildSettings**: Server-specific settings and configurations
+- **Command**: Bot commands with options and permissions
+- **CommandLog**: Usage tracking for bot commands
+- **RequestLog**: HTTP request logging with metadata
+- **AuditLog**: User action tracking for security and auditing
+- **ErrorLog**: Application error tracking and monitoring
 
 Refer to each app's `models.py` for detailed schema information.
 
+### Application Flow
+
+1. **User Authentication**: Users authenticate via Discord OAuth
+2. **Bot Creation**: Users create and configure Discord bots
+3. **Server Management**: Bots join Discord servers with appropriate permissions
+4. **Command Configuration**: Users define custom commands for their bots
+5. **Real-time Monitoring**: WebSocket connections provide live updates on bot activity
+6. **Analytics**: Usage statistics and insights are generated from logs
+
 ## Getting Started
 
 ### Prerequisites
@@ -128,9 +144,46 @@ Refer to each app's `models.py` for detailed schema information.
    python manage.py runserver
    ```
 
+### Docker Deployment
+
+For production or testing with Docker:
+
+1. Set up the environment file:
+   ```bash
+   cp docker.env.example .env
+   ```
+   Edit the `.env` file to update necessary settings like SECRET_KEY, database credentials, and Discord OAuth details.
+
+2. Start the services:
+   ```bash
+   docker-compose up -d
+   ```
+
+3. To deploy with SSL:
+   ```bash
+   # Make the script executable
+   chmod +x scripts/setup_ssl.sh
+   
+   # Run the SSL setup script with your domain and email
+   ./scripts/setup_ssl.sh yourdomain.com your@email.com
+   
+   # Follow the instructions printed by the script to complete SSL setup
+   ```
+
+4. For backup and maintenance:
+   ```bash
+   # Backup the database and media files
+   ./scripts/backup.sh
+   
+   # View logs
+   docker-compose logs -f web
+   ```
+
+5. For detailed deployment instructions, see [Deployment Guide](docs/deployment.md)
+
 ### Running in Production
 
-For production deployment:
+For traditional production deployment:
 
 1. Set the `DJANGO_ENV` environment variable to `production`:
    ```bash
@@ -181,164 +234,4 @@ pytest
 2. Make regular, atomic commits with descriptive messages:
    ```bash
    git commit -m "feat: Add Discord OAuth integration"
-   ```
-   
-3. Follow conventional commits for commit messages:
-   - `feat:` for new features
-   - `fix:` for bug fixes
-   - `docs:` for documentation changes
-   - `style:` for formatting changes
-   - `refactor:` for code refactoring
-   - `test:` for adding tests
-   - `chore:` for maintenance tasks
-   
-4. Push your changes to the remote repository:
-   ```bash
-   git push origin feature/descriptive-name
-   ```
-   
-5. Create a pull request for code review
-
-### Django Development Tips
-
-1. Create new apps for discrete functionality:
-   ```bash
-   python manage.py startapp new_app_name
-   ```
-   
-2. Always run migrations after model changes:
-   ```bash
-   python manage.py makemigrations
-   python manage.py migrate
-   ```
-   
-3. Use Django's test framework for writing tests:
-   ```bash
-   python manage.py test app_name
-   ```
-   
-4. Keep views lightweight by moving business logic to models and services
-
-5. Use Django Debug Toolbar during development:
-   ```bash
-   pip install django-debug-toolbar
-   ```
-   
-### Code Quality
-
-1. Run linting before committing:
-   ```bash
-   flake8 .
-   ```
-   
-2. Format code with black:
-   ```bash
-   black .
-   ```
-   
-3. Check type hints with mypy:
-   ```bash
-   mypy .
-   ```
-   
-### CI/CD Pipeline
-
-This project uses GitHub Actions for continuous integration and deployment:
-
-1. **Continuous Integration**:
-   - Automated testing runs on every pull request and push to main
-   - Code quality checks (flake8, black, mypy) are performed
-   - Test coverage reports are generated
-
-2. **Continuous Deployment**:
-   - Successful builds on the main branch trigger automatic deployment
-   - Docker images are built and pushed to a registry
-   - Deployment to staging/production is managed via deployment scripts
-
-3. **Environment Management**:
-   - Development environment: Local development with Django runserver
-   - Staging environment: Deployed from the main branch
-   - Production environment: Deployed from release tags
-
-## Contributing
-
-### Getting Started
-
-1. Fork the repository
-2. Clone your fork: `git clone https://github.com/YOUR-USERNAME/Social_Cube.git`
-3. Create a virtual environment as described in the setup section
-4. Install development dependencies: `pip install -r requirements-dev.txt`
-5. Create your feature branch: `git checkout -b feature/amazing-feature`
-
-### Development Process
-
-1. Make your changes following the development workflow described above
-2. Ensure all tests pass: `python manage.py test`
-3. Add test coverage for your new feature
-4. Update documentation if needed
-5. Commit your changes with descriptive commit messages: `git commit -m 'Add some amazing feature'`
-6. Push to your branch: `git push origin feature/amazing-feature`
-7. Open a Pull Request with detailed description of changes
-
-### Pull Request Process
-
-1. Ensure your code passes all CI checks
-2. Get at least one code review from a maintainer
-3. Address any feedback from the review
-4. Once approved, a maintainer will merge your PR
-
-### Code of Conduct
-
-Please follow our Code of Conduct in all your interactions with the project.
-
-## Troubleshooting
-
-### Common Issues
-
-#### Database Migration Errors
-
-If you encounter migration errors:
-
-```bash
-python manage.py migrate --fake-initial
-python manage.py makemigrations
-python manage.py migrate
-```
-
-#### Static Files Not Loading
-
-Ensure you've collected static files:
-
-```bash
-python manage.py collectstatic
-```
-
-#### API Authentication Issues
-
-Check your API key configuration in `.env` file and ensure your user has the correct permissions.
-
-#### Docker Build Failures
-
-Ensure Docker is running and try rebuilding with the `--no-cache` option:
-
-```bash
-docker-compose build --no-cache
-```
-
-### Getting Help
-
-If you're experiencing issues not covered here:
-
-1. Check the existing GitHub issues to see if it's a known problem
-2. Join our community Discord channel for real-time support
-3. Open a new GitHub issue with detailed information about your problem
-
-## License
-
-This project is licensed under the MIT License - see the LICENSE file for details.
-
-## Acknowledgments
-
-- Django
-- Discord.py
-- All contributors
\ No newline at end of file
+   ```
\ No newline at end of file
diff --git a/bot_management/admin.py b/bot_management/admin.py
index afc50f9..fea9a00 100644
--- a/bot_management/admin.py
+++ b/bot_management/admin.py
@@ -1,5 +1,5 @@
 from django.contrib import admin
-from .models import Bot, BotLog
+from .models import Bot, BotLog, Guild, GuildSettings, GuildChannel
 
 @admin.register(Bot)
 class BotAdmin(admin.ModelAdmin):
@@ -33,4 +33,70 @@ class BotLogAdmin(admin.ModelAdmin):
         ('Event Information', {
             'fields': ('bot', 'event_type', 'description', 'timestamp')
         }),
+    )
+
+@admin.register(Guild)
+class GuildAdmin(admin.ModelAdmin):
+    list_display = ('name', 'guild_id', 'bot', 'member_count', 'is_available', 'last_sync')
+    list_filter = ('is_available', 'bot', 'joined_at')
+    search_fields = ('name', 'guild_id', 'owner_id')
+    readonly_fields = ('joined_at', 'last_sync')
+    fieldsets = (
+        ('Guild Information', {
+            'fields': ('bot', 'guild_id', 'name', 'owner_id', 'description')
+        }),
+        ('Server Details', {
+            'fields': ('icon_url', 'region', 'member_count', 'features')
+        }),
+        ('Status', {
+            'fields': ('is_available', 'joined_at', 'last_sync')
+        }),
+    )
+
+@admin.register(GuildSettings)
+class GuildSettingsAdmin(admin.ModelAdmin):
+    list_display = ('guild', 'prefix', 'enable_welcome_messages', 'enable_moderation', 'updated_at')
+    list_filter = ('enable_welcome_messages', 'enable_goodbye_messages', 'enable_moderation', 'enable_member_tracking')
+    search_fields = ('guild__name', 'prefix', 'notification_channel_id')
+    readonly_fields = ('created_at', 'updated_at')
+    fieldsets = (
+        ('Guild', {
+            'fields': ('guild',)
+        }),
+        ('Command Settings', {
+            'fields': ('prefix',)
+        }),
+        ('Notification Settings', {
+            'fields': ('notification_channel_id', 'welcome_message', 'goodbye_message')
+        }),
+        ('Feature Toggles', {
+            'fields': ('enable_welcome_messages', 'enable_goodbye_messages', 'enable_member_tracking', 'enable_moderation')
+        }),
+        ('Role Configuration', {
+            'fields': ('admin_role_id', 'moderator_role_id')
+        }),
+        ('Custom Settings', {
+            'fields': ('custom_settings',)
+        }),
+        ('Timestamps', {
+            'fields': ('created_at', 'updated_at')
+        }),
+    )
+
+@admin.register(GuildChannel)
+class GuildChannelAdmin(admin.ModelAdmin):
+    list_display = ('name', 'guild', 'type', 'position', 'is_nsfw', 'last_sync')
+    list_filter = ('type', 'is_nsfw', 'guild')
+    search_fields = ('name', 'channel_id', 'topic', 'guild__name')
+    readonly_fields = ('last_sync',)
+    fieldsets = (
+        ('Channel Information', {
+            'fields': ('guild', 'channel_id', 'name', 'type')
+        }),
+        ('Details', {
+            'fields': ('position', 'category_id', 'is_nsfw', 'topic')
+        }),
+        ('Timestamps', {
+            'fields': ('last_sync',)
+        }),
     )
\ No newline at end of file
diff --git a/bot_management/discord_bot/client.py b/bot_management/discord_bot/client.py
index 5d096ee..2230e75 100644
--- a/bot_management/discord_bot/client.py
+++ b/bot_management/discord_bot/client.py
@@ -180,6 +180,13 @@ class SocialCubeBot(discord.Client):
         self.startup_time = time.time()
         self.ready_event.set()
         
+        # Sync guilds to database
+        try:
+            logger.info(f"Syncing guilds for bot {self.user.name}")
+            await self._sync_all_guilds()
+        except Exception as e:
+            logger.error(f"Failed to sync guilds for bot {self.user.name}: {str(e)}")
+        
         # Sync application commands with Discord
         try:
             # Sync commands globally
@@ -188,10 +195,203 @@ class SocialCubeBot(discord.Client):
         except Exception as e:
             logger.error(f"Failed to sync commands for bot {self.user.name}: {str(e)}")
             
+    async def _sync_all_guilds(self):
+        """Sync all guilds to the database"""
+        for guild in self.guilds:
+            await self._sync_guild_to_db(guild)
+            await self._sync_guild_channels(guild)
+            
+    async def _sync_guild_channels(self, guild):
+        """Sync all channels for a guild to the database"""
+        try:
+            from bot_management.models import Guild, GuildChannel
+            
+            # Get the guild from the database
+            try:
+                guild_obj = await asyncio.to_thread(
+                    Guild.objects.get,
+                    bot_id=self.bot_id,
+                    guild_id=str(guild.id)
+                )
+            except Guild.DoesNotExist:
+                logger.error(f"Guild {guild.id} not found in database, cannot sync channels")
+                return
+                
+            # Track existing channel IDs for cleanup
+            existing_channels = set(await asyncio.to_thread(
+                lambda: list(GuildChannel.objects.filter(
+                    guild=guild_obj
+                ).values_list('channel_id', flat=True))
+            ))
+            processed_channels = set()
+            
+            # Sync all channels
+            for channel in guild.channels:
+                # Prepare channel data
+                channel_data = {
+                    'name': channel.name,
+                    'type': channel.type.value,
+                    'position': getattr(channel, 'position', 0),
+                    'category_id': str(channel.category_id) if getattr(channel, 'category_id', None) else None,
+                    'is_nsfw': getattr(channel, 'nsfw', False),
+                    'topic': getattr(channel, 'topic', None)
+                }
+                
+                # Add to processed channels
+                processed_channels.add(str(channel.id))
+                
+                # Update or create the channel
+                try:
+                    channel_obj, created = await asyncio.to_thread(
+                        GuildChannel.objects.update_or_create,
+                        guild=guild_obj,
+                        channel_id=str(channel.id),
+                        defaults=channel_data
+                    )
+                    
+                    action = "created" if created else "updated"
+                    logger.debug(f"Channel {channel.name} (ID: {channel.id}) {action} in database")
+                except Exception as e:
+                    logger.error(f"Failed to sync channel {channel.id}: {str(e)}")
+            
+            # Remove channels that no longer exist
+            channels_to_remove = existing_channels - processed_channels
+            if channels_to_remove:
+                await asyncio.to_thread(
+                    GuildChannel.objects.filter(
+                        guild=guild_obj, 
+                        channel_id__in=channels_to_remove
+                    ).delete
+                )
+                logger.info(f"Removed {len(channels_to_remove)} deleted channels from database for guild {guild.id}")
+                
+            logger.info(f"Synced {len(processed_channels)} channels for guild {guild.id}")
+            
+        except Exception as e:
+            logger.error(f"Failed to sync channels for guild {guild.id}: {str(e)}")
+            
+    async def on_guild_channel_create(self, channel):
+        """Event handler for when a channel is created"""
+        logger.info(f"Channel created: {channel.name} (ID: {channel.id}) in guild {channel.guild.id}")
+        
+        # Get the guild from database and sync the new channel
+        try:
+            # Only process guild channels
+            if not hasattr(channel, 'guild'):
+                return
+                
+            from bot_management.models import Guild, GuildChannel
+            
+            # Get guild object
+            guild_obj = await asyncio.to_thread(
+                Guild.objects.get,
+                bot_id=self.bot_id,
+                guild_id=str(channel.guild.id)
+            )
+            
+            # Create channel data
+            channel_data = {
+                'name': channel.name,
+                'type': channel.type.value,
+                'position': getattr(channel, 'position', 0),
+                'category_id': str(channel.category_id) if getattr(channel, 'category_id', None) else None,
+                'is_nsfw': getattr(channel, 'nsfw', False),
+                'topic': getattr(channel, 'topic', None)
+            }
+            
+            # Create the channel
+            await asyncio.to_thread(
+                GuildChannel.objects.create,
+                guild=guild_obj,
+                channel_id=str(channel.id),
+                **channel_data
+            )
+            
+            logger.info(f"Channel {channel.name} (ID: {channel.id}) added to database")
+            
+        except Exception as e:
+            logger.error(f"Failed to add channel {channel.id} to database: {str(e)}")
+            
+    async def on_guild_channel_delete(self, channel):
+        """Event handler for when a channel is deleted"""
+        logger.info(f"Channel deleted: {channel.name} (ID: {channel.id}) in guild {channel.guild.id}")
+        
+        # Remove the channel from database
+        try:
+            # Only process guild channels
+            if not hasattr(channel, 'guild'):
+                return
+                
+            from bot_management.models import GuildChannel
+            
+            # Delete the channel
+            deleted = await asyncio.to_thread(
+                GuildChannel.objects.filter(
+                    channel_id=str(channel.id)
+                ).delete
+            )
+            
+            if deleted[0] > 0:
+                logger.info(f"Channel {channel.id} removed from database")
+            else:
+                logger.warning(f"Channel {channel.id} not found in database")
+                
+        except Exception as e:
+            logger.error(f"Failed to remove channel {channel.id} from database: {str(e)}")
+            
+    async def on_guild_channel_update(self, before, after):
+        """Event handler for when a channel is updated"""
+        logger.info(f"Channel updated: {after.name} (ID: {after.id}) in guild {after.guild.id}")
+        
+        # Update the channel in database
+        try:
+            # Only process guild channels
+            if not hasattr(after, 'guild'):
+                return
+                
+            from bot_management.models import Guild, GuildChannel
+            
+            # Get guild object
+            guild_obj = await asyncio.to_thread(
+                Guild.objects.get,
+                bot_id=self.bot_id,
+                guild_id=str(after.guild.id)
+            )
+            
+            # Update channel data
+            channel_data = {
+                'name': after.name,
+                'type': after.type.value,
+                'position': getattr(after, 'position', 0),
+                'category_id': str(after.category_id) if getattr(after, 'category_id', None) else None,
+                'is_nsfw': getattr(after, 'nsfw', False),
+                'topic': getattr(after, 'topic', None)
+            }
+            
+            # Update the channel
+            updated = await asyncio.to_thread(
+                GuildChannel.objects.filter(
+                    guild=guild_obj,
+                    channel_id=str(after.id)
+                ).update,
+                **channel_data
+            )
+            
+            if updated > 0:
+                logger.info(f"Channel {after.name} (ID: {after.id}) updated in database")
+            else:
+                logger.warning(f"Channel {after.id} not found in database")
+                
+        except Exception as e:
+            logger.error(f"Failed to update channel {after.id} in database: {str(e)}")
+            
     async def on_guild_join(self, guild):
         """Event handler for when the bot joins a new guild"""
         logger.info(f"Bot {self.user.name} joined guild: {guild.name} (ID: {guild.id})")
         
+        # Save guild information to database
+        await self._sync_guild_to_db(guild)
+        
         # If the guild has a system channel, send a welcome message
         if guild.system_channel:
             try:
@@ -210,6 +410,75 @@ class SocialCubeBot(discord.Client):
             except Exception as e:
                 logger.warning(f"Could not send welcome message to {guild.name}: {str(e)}")
                 
+    async def on_guild_remove(self, guild):
+        """Event handler for when the bot is removed from a guild"""
+        logger.info(f"Bot {self.user.name} removed from guild: {guild.name} (ID: {guild.id})")
+        
+        # Mark guild as unavailable in database
+        try:
+            from bot_management.models import Guild
+            
+            # Update in a separate thread to avoid blocking the bot
+            await asyncio.to_thread(
+                Guild.objects.filter(
+                    bot_id=self.bot_id,
+                    guild_id=str(guild.id)
+                ).update,
+                is_available=False
+            )
+            
+            logger.info(f"Marked guild {guild.id} as unavailable in database")
+        except Exception as e:
+            logger.error(f"Failed to mark guild {guild.id} as unavailable: {str(e)}")
+            
+    async def on_guild_update(self, before, after):
+        """Event handler for when a guild is updated"""
+        logger.info(f"Guild updated: {after.name} (ID: {after.id})")
+        
+        # Update guild information in database
+        await self._sync_guild_to_db(after)
+        
+    async def _sync_guild_to_db(self, guild):
+        """Sync a guild's information to the database"""
+        try:
+            from bot_management.models import Guild, BotLog
+            
+            # Prepare guild data
+            guild_data = {
+                'name': guild.name,
+                'guild_id': str(guild.id),
+                'owner_id': str(guild.owner_id) if guild.owner_id else None,
+                'icon_url': str(guild.icon.url) if guild.icon else None,
+                'member_count': guild.member_count,
+                'description': guild.description,
+                'features': list(guild.features),
+                'is_available': True
+            }
+            
+            # Use asyncio.to_thread to run database operations in a separate thread
+            guild_obj, created = await asyncio.to_thread(
+                Guild.objects.update_or_create,
+                bot_id=self.bot_id,
+                guild_id=str(guild.id),
+                defaults=guild_data
+            )
+            
+            # Log the action
+            action = "created" if created else "updated"
+            await asyncio.to_thread(
+                BotLog.objects.create,
+                bot_id=self.bot_id,
+                event_type="GUILD_SYNCED",
+                description=f"Guild {guild.name} (ID: {guild.id}) {action} in database"
+            )
+            
+            logger.info(f"Guild {guild.name} (ID: {guild.id}) {action} in database")
+            return guild_obj
+            
+        except Exception as e:
+            logger.error(f"Failed to sync guild {guild.id} to database: {str(e)}")
+            return None
+                
     async def wait_until_ready(self, timeout=None):
         """Wait until the bot is connected and ready"""
         await asyncio.wait_for(self.ready_event.wait(), timeout=timeout)
@@ -226,4 +495,177 @@ class SocialCubeBot(discord.Client):
             
         # Ensure heartbeat is recent
         time_since_heartbeat = time.time() - self.last_heartbeat
-        return time_since_heartbeat <= (self.heartbeat_interval * 2)
\ No newline at end of file
+        return time_since_heartbeat <= (self.heartbeat_interval * 2)
+        
+    async def _sync_global_command(self, command_id: int, command_data: Dict[str, Any]) -> Dict[str, Any]:
+        """Sync a single global command with Discord
+        
+        Args:
+            command_id: Database ID of the command
+            command_data: Discord-compatible command data
+            
+        Returns:
+            Dict: Discord API response or None if failed
+        """
+        try:
+            # Ensure the bot is ready
+            await self.wait_until_ready()
+            
+            # Log the action
+            logger.info(f"Bot {self.bot_id} syncing global command: {command_data.get('name', 'Unknown')}") 
+            
+            # Create command using Discord API
+            result = await self.http.upsert_global_command(self.user.id, command_data)
+            
+            # Log the result
+            logger.info(f"Command {command_data.get('name')} synced with Discord ID: {result.get('id')}")
+            
+            return result
+            
+        except Exception as e:
+            logger.error(f"Error syncing global command {command_data.get('name', 'Unknown')}: {str(e)}")
+            return None
+            
+    async def _sync_guild_command(self, guild_id: int, command_id: int, command_data: Dict[str, Any]) -> Dict[str, Any]:
+        """Sync a single guild command with Discord
+        
+        Args:
+            guild_id: Discord ID of the guild
+            command_id: Database ID of the command
+            command_data: Discord-compatible command data
+            
+        Returns:
+            Dict: Discord API response or None if failed
+        """
+        try:
+            # Ensure the bot is ready
+            await self.wait_until_ready()
+            
+            # Log the action
+            logger.info(f"Bot {self.bot_id} syncing guild command: {command_data.get('name', 'Unknown')} for guild {guild_id}")
+            
+            # Create command using Discord API
+            result = await self.http.upsert_guild_command(self.user.id, guild_id, command_data)
+            
+            # Log the result
+            logger.info(f"Command {command_data.get('name')} synced for guild {guild_id} with Discord ID: {result.get('id')}")
+            
+            return result
+            
+        except Exception as e:
+            logger.error(f"Error syncing guild command {command_data.get('name', 'Unknown')} for guild {guild_id}: {str(e)}")
+            return None
+            
+    async def _delete_global_command(self, command_id: str) -> bool:
+        """Delete a global command from Discord
+        
+        Args:
+            command_id: Discord ID of the command to delete
+            
+        Returns:
+            bool: Success status
+        """
+        try:
+            # Ensure the bot is ready
+            await self.wait_until_ready()
+            
+            # Log the action
+            logger.info(f"Bot {self.bot_id} deleting global command with Discord ID: {command_id}")
+            
+            # Delete command using Discord API
+            await self.http.delete_global_command(self.user.id, command_id)
+            
+            # Log success
+            logger.info(f"Global command with Discord ID {command_id} deleted successfully")
+            
+            return True
+            
+        except Exception as e:
+            logger.error(f"Error deleting global command with Discord ID {command_id}: {str(e)}")
+            return False
+            
+    async def _delete_guild_command(self, guild_id: int, command_id: str) -> bool:
+        """Delete a guild command from Discord
+        
+        Args:
+            guild_id: Discord ID of the guild
+            command_id: Discord ID of the command to delete
+            
+        Returns:
+            bool: Success status
+        """
+        try:
+            # Ensure the bot is ready
+            await self.wait_until_ready()
+            
+            # Log the action
+            logger.info(f"Bot {self.bot_id} deleting guild command with Discord ID: {command_id} from guild {guild_id}")
+            
+            # Delete command using Discord API
+            await self.http.delete_guild_command(self.user.id, guild_id, command_id)
+            
+            # Log success
+            logger.info(f"Guild command with Discord ID {command_id} deleted successfully from guild {guild_id}")
+            
+            return True
+            
+        except Exception as e:
+            logger.error(f"Error deleting guild command with Discord ID {command_id} from guild {guild_id}: {str(e)}")
+            return False
+            
+    async def _bulk_sync_global_commands(self, commands_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
+        """Bulk sync global commands with Discord
+        
+        Args:
+            commands_data: List of Discord-compatible command data
+            
+        Returns:
+            List[Dict]: List of Discord API responses or None if failed
+        """
+        try:
+            # Ensure the bot is ready
+            await self.wait_until_ready()
+            
+            # Log the action
+            logger.info(f"Bot {self.bot_id} bulk syncing {len(commands_data)} global commands")
+            
+            # Bulk update commands using Discord API
+            result = await self.http.bulk_upsert_global_commands(self.user.id, commands_data)
+            
+            # Log success
+            logger.info(f"Successfully bulk synced {len(result)} global commands")
+            
+            return result
+            
+        except Exception as e:
+            logger.error(f"Error bulk syncing global commands: {str(e)}")
+            return None
+            
+    async def _bulk_sync_guild_commands(self, guild_id: int, commands_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
+        """Bulk sync guild commands with Discord
+        
+        Args:
+            guild_id: Discord ID of the guild
+            commands_data: List of Discord-compatible command data
+            
+        Returns:
+            List[Dict]: List of Discord API responses or None if failed
+        """
+        try:
+            # Ensure the bot is ready
+            await self.wait_until_ready()
+            
+            # Log the action
+            logger.info(f"Bot {self.bot_id} bulk syncing {len(commands_data)} commands for guild {guild_id}")
+            
+            # Bulk update commands using Discord API
+            result = await self.http.bulk_upsert_guild_commands(self.user.id, guild_id, commands_data)
+            
+            # Log success
+            logger.info(f"Successfully bulk synced {len(result)} commands for guild {guild_id}")
+            
+            return result
+            
+        except Exception as e:
+            logger.error(f"Error bulk syncing commands for guild {guild_id}: {str(e)}")
+            return None
\ No newline at end of file
diff --git a/bot_management/discord_bot/service.py b/bot_management/discord_bot/service.py
index 5d0ee2d..fffacd1 100644
--- a/bot_management/discord_bot/service.py
+++ b/bot_management/discord_bot/service.py
@@ -5,9 +5,11 @@ from typing import Dict, Optional, List, Tuple
 import time
 from concurrent.futures import ThreadPoolExecutor
 from django.db import transaction
+from functools import wraps
 
 from bot_management.models import Bot, BotLog
 from .client import SocialCubeBot
+from bot_management.error_handling import recoverable_error, log_error
 
 # Configure logging
 logger = logging.getLogger(__name__)
@@ -68,6 +70,7 @@ class BotManager:
             
         logger.info("Bot Manager service stopped")
         
+    @recoverable_error
     def start_bot(self, bot_id: int) -> bool:
         """
         Start a specific bot by its ID
@@ -124,6 +127,37 @@ class BotManager:
             # Store references
             self.running_bots[bot_id] = (client, None, bot_thread)
             
+            # Give the bot some time to connect
+            time.sleep(5)  # Wait for 5 seconds
+            
+            # Sync commands after startup
+            try:
+                # Get all active commands for this bot
+                from bot_management.models import Command
+                
+                # Check if bot has any commands to sync
+                has_commands = Command.objects.filter(bot_id=bot_id, is_active=True).exists()
+                
+                if has_commands:
+                    # Sync global commands
+                    self.sync_all_commands(bot_id)
+                    
+                    # Get guilds with guild-specific commands
+                    guild_ids = Command.objects.filter(
+                        bot_id=bot_id,
+                        guild__isnull=False,
+                        is_active=True
+                    ).values_list('guild__guild_id', flat=True).distinct()
+                    
+                    # Sync commands for each guild
+                    for guild_id in guild_ids:
+                        self.sync_all_commands(bot_id, guild_id)
+                        
+                    logger.info(f"Synced all commands for bot {bot_id}")
+            except Exception as e:
+                logger.error(f"Failed to sync commands for bot {bot_id}: {str(e)}")
+                # Continue anyway since the bot is running
+            
             # Log the start
             BotLog.objects.create(
                 bot=bot_model,
@@ -141,6 +175,7 @@ class BotManager:
             logger.error(f"Failed to start bot {bot_id}: {str(e)}")
             return False
             
+    @recoverable_error
     def stop_bot(self, bot_id: int) -> bool:
         """
         Stop a specific bot by its ID
@@ -184,6 +219,7 @@ class BotManager:
             logger.error(f"Failed to stop bot {bot_id}: {str(e)}")
             return False
             
+    @recoverable_error
     def restart_bot(self, bot_id: int) -> bool:
         """
         Restart a specific bot by its ID
@@ -309,5 +345,359 @@ class BotManager:
         except Exception as e:
             logger.error(f"Failed to start active bots: {str(e)}")
             
+    @recoverable_error
+    def sync_command(self, command_id: int) -> bool:
+        """
+        Sync a specific command to Discord
+        
+        Args:
+            command_id: The database ID of the command to sync
+            
+        Returns:
+            bool: True if successfully synced, False otherwise
+        """
+        from bot_management.models import Command
+        
+        try:
+            # Get command from database
+            command = Command.objects.get(id=command_id, is_active=True)
+            
+            # Get the bot client
+            bot_id = command.bot.id
+            if bot_id not in self.running_bots:
+                logger.warning(f"Bot {bot_id} is not running, cannot sync command {command_id}")
+                return False
+                
+            client, _, _ = self.running_bots[bot_id]
+            
+            # Wait until the bot is ready
+            try:
+                asyncio.run_coroutine_threadsafe(client.wait_until_ready(timeout=10), client.loop).result(timeout=15)
+            except (asyncio.TimeoutError, concurrent.futures.TimeoutError):
+                logger.error(f"Timed out waiting for bot {bot_id} to be ready")
+                return False
+                
+            # Convert command to Discord format
+            command_data = command.to_discord_json()
+            
+            # Create or update the command on Discord
+            if command.guild:
+                # Guild-specific command
+                guild_id = int(command.guild.guild_id)
+                
+                result = asyncio.run_coroutine_threadsafe(
+                    client._sync_guild_command(guild_id, command.id, command_data),
+                    client.loop
+                ).result(timeout=15)
+            else:
+                # Global command
+                result = asyncio.run_coroutine_threadsafe(
+                    client._sync_global_command(command.id, command_data),
+                    client.loop
+                ).result(timeout=15)
+                
+            if result and 'id' in result:
+                # Update the command_id
+                command.command_id = result['id']
+                command.save(update_fields=['command_id'])
+                
+                logger.info(f"Synced command {command.name} (ID: {command_id}) to Discord")
+                return True
+            else:
+                logger.error(f"Failed to sync command {command.name} (ID: {command_id})")
+                return False
+                
+        except Command.DoesNotExist:
+            logger.error(f"Command {command_id} not found or not active")
+            return False
+        except Exception as e:
+            logger.error(f"Failed to sync command {command_id}: {str(e)}")
+            return False
+            
+    @recoverable_error
+    def delete_command(self, command_id: int) -> bool:
+        """
+        Delete a specific command from Discord
+        
+        Args:
+            command_id: The database ID of the command to delete
+            
+        Returns:
+            bool: True if successfully deleted, False otherwise
+        """
+        from bot_management.models import Command
+        
+        try:
+            # Get command from database
+            command = Command.objects.get(id=command_id)
+            
+            # If no command_id, it was never synced to Discord
+            if not command.command_id:
+                logger.warning(f"Command {command_id} was never synced to Discord, nothing to delete")
+                return True
+                
+            # Get the bot client
+            bot_id = command.bot.id
+            if bot_id not in self.running_bots:
+                logger.warning(f"Bot {bot_id} is not running, cannot delete command {command_id}")
+                return False
+                
+            client, _, _ = self.running_bots[bot_id]
+            
+            # Wait until the bot is ready
+            try:
+                asyncio.run_coroutine_threadsafe(client.wait_until_ready(timeout=10), client.loop).result(timeout=15)
+            except (asyncio.TimeoutError, concurrent.futures.TimeoutError):
+                logger.error(f"Timed out waiting for bot {bot_id} to be ready")
+                return False
+                
+            # Delete the command from Discord
+            if command.guild:
+                # Guild-specific command
+                guild_id = int(command.guild.guild_id)
+                discord_command_id = command.command_id
+                
+                success = asyncio.run_coroutine_threadsafe(
+                    client._delete_guild_command(guild_id, discord_command_id),
+                    client.loop
+                ).result(timeout=15)
+            else:
+                # Global command
+                discord_command_id = command.command_id
+                
+                success = asyncio.run_coroutine_threadsafe(
+                    client._delete_global_command(discord_command_id),
+                    client.loop
+                ).result(timeout=15)
+                
+            if success:
+                # Clear the command_id
+                command.command_id = None
+                command.save(update_fields=['command_id'])
+                
+                logger.info(f"Deleted command {command.name} (ID: {command_id}) from Discord")
+                return True
+            else:
+                logger.error(f"Failed to delete command {command.name} (ID: {command_id})")
+                return False
+                
+        except Command.DoesNotExist:
+            logger.error(f"Command {command_id} not found")
+            return False
+        except Exception as e:
+            logger.error(f"Failed to delete command {command_id}: {str(e)}")
+            return False
+            
+    @recoverable_error
+    def sync_all_commands(self, bot_id: int, guild_id: str = None) -> bool:
+        """
+        Sync all commands for a bot, optionally filtered by guild
+        
+        Args:
+            bot_id: The database ID of the bot
+            guild_id: The Discord ID of the guild, or None for global commands
+            
+        Returns:
+            bool: True if successfully synced, False otherwise
+        """
+        from bot_management.models import Command, Guild
+        
+        try:
+            # Get the bot client
+            if bot_id not in self.running_bots:
+                logger.warning(f"Bot {bot_id} is not running, cannot sync commands")
+                return False
+                
+            client, _, _ = self.running_bots[bot_id]
+            
+            # Wait until the bot is ready
+            try:
+                asyncio.run_coroutine_threadsafe(client.wait_until_ready(timeout=10), client.loop).result(timeout=15)
+            except (asyncio.TimeoutError, concurrent.futures.TimeoutError):
+                logger.error(f"Timed out waiting for bot {bot_id} to be ready")
+                return False
+                
+            # Get active commands for this bot
+            commands_query = Command.objects.filter(bot_id=bot_id, is_active=True)
+            
+            if guild_id:
+                # Guild-specific commands
+                try:
+                    guild = Guild.objects.get(bot_id=bot_id, guild_id=guild_id)
+                    commands_query = commands_query.filter(guild=guild)
+                except Guild.DoesNotExist:
+                    logger.error(f"Guild {guild_id} not found for bot {bot_id}")
+                    return False
+                    
+                # Prepare command data
+                commands_data = [cmd.to_discord_json() for cmd in commands_query]
+                
+                # Sync all commands at once
+                result = asyncio.run_coroutine_threadsafe(
+                    client._bulk_sync_guild_commands(int(guild_id), commands_data),
+                    client.loop
+                ).result(timeout=30)  # Longer timeout for bulk operations
+                
+                # Update command IDs in the database
+                if result:
+                    self._update_command_ids(commands_query, result)
+                    logger.info(f"Synced {len(commands_data)} commands for bot {bot_id} in guild {guild_id}")
+                    return True
+                else:
+                    logger.error(f"Failed to sync commands for bot {bot_id} in guild {guild_id}")
+                    return False
+            else:
+                # Global commands
+                commands_query = commands_query.filter(guild__isnull=True)
+                
+                # Prepare command data
+                commands_data = [cmd.to_discord_json() for cmd in commands_query]
+                
+                # Sync all commands at once
+                result = asyncio.run_coroutine_threadsafe(
+                    client._bulk_sync_global_commands(commands_data),
+                    client.loop
+                ).result(timeout=30)  # Longer timeout for bulk operations
+                
+                # Update command IDs in the database
+                if result:
+                    self._update_command_ids(commands_query, result)
+                    logger.info(f"Synced {len(commands_data)} global commands for bot {bot_id}")
+                    return True
+                else:
+                    logger.error(f"Failed to sync global commands for bot {bot_id}")
+                    return False
+                    
+        except Exception as e:
+            logger.error(f"Failed to sync all commands for bot {bot_id}: {str(e)}")
+            return False
+            
+    def _update_command_ids(self, commands_query, result_commands):
+        """
+        Update command IDs in the database based on the response from Discord
+        
+        Args:
+            commands_query: QuerySet of Command objects
+            result_commands: List of command data from Discord API
+        """
+        name_to_id = {cmd['name']: cmd['id'] for cmd in result_commands if 'name' in cmd and 'id' in cmd}
+        
+        for command in commands_query:
+            if command.name in name_to_id:
+                command.command_id = name_to_id[command.name]
+        
+        # Bulk update to improve performance
+        Command.objects.bulk_update(commands_query, ['command_id'])
+        
+    @recoverable_error
+    def sync_guild(self, bot_id: int, guild_id: str) -> bool:
+        """
+        Sync a specific guild with Discord API
+        
+        Args:
+            bot_id: The database ID of the bot
+            guild_id: The Discord ID of the guild to sync
+            
+        Returns:
+            bool: True if successfully synced, False otherwise
+        """
+        # Check if bot is running
+        if bot_id not in self.running_bots:
+            logger.warning(f"Bot {bot_id} is not running, cannot sync guild {guild_id}")
+            return False
+            
+        client, _, _ = self.running_bots[bot_id]
+        
+        try:
+            # Find the guild in the bot's guilds
+            discord_guild = None
+            
+            # Wait until the bot is ready
+            try:
+                asyncio.run_coroutine_threadsafe(client.wait_until_ready(timeout=10), client.loop).result(timeout=15)
+                
+                # Get the guild by ID
+                discord_guild = asyncio.run_coroutine_threadsafe(
+                    client.fetch_guild(int(guild_id)),
+                    client.loop
+                ).result(timeout=15)
+                
+            except (asyncio.TimeoutError, concurrent.futures.TimeoutError):
+                logger.error(f"Timed out waiting for bot {bot_id} to be ready")
+                return False
+            except Exception as e:
+                logger.error(f"Failed to fetch guild {guild_id}: {str(e)}")
+                return False
+                
+            if not discord_guild:
+                logger.error(f"Guild {guild_id} not found for bot {bot_id}")
+                return False
+                
+            # Sync the guild to the database
+            asyncio.run_coroutine_threadsafe(
+                client._sync_guild_to_db(discord_guild),
+                client.loop
+            ).result(timeout=15)
+            
+            # Sync the guild's channels
+            asyncio.run_coroutine_threadsafe(
+                client._sync_guild_channels(discord_guild),
+                client.loop
+            ).result(timeout=30)  # Longer timeout for channels
+            
+            logger.info(f"Successfully synced guild {guild_id} for bot {bot_id}")
+            return True
+            
+        except Exception as e:
+            logger.error(f"Failed to sync guild {guild_id} for bot {bot_id}: {str(e)}")
+            return False
+            
+    @recoverable_error
+    def sync_all_guilds(self, bot_id: int) -> bool:
+        """
+        Sync all guilds for a bot with Discord API
+        
+        Args:
+            bot_id: The database ID of the bot
+            
+        Returns:
+            bool: True if successfully synced, False otherwise
+        """
+        # Check if bot is running
+        if bot_id not in self.running_bots:
+            logger.warning(f"Bot {bot_id} is not running, cannot sync guilds")
+            return False
+            
+        client, _, _ = self.running_bots[bot_id]
+        
+        try:
+            # Wait until the bot is ready
+            try:
+                asyncio.run_coroutine_threadsafe(client.wait_until_ready(timeout=10), client.loop).result(timeout=15)
+            except (asyncio.TimeoutError, concurrent.futures.TimeoutError):
+                logger.error(f"Timed out waiting for bot {bot_id} to be ready")
+                return False
+                
+            # Sync all guilds
+            asyncio.run_coroutine_threadsafe(
+                client._sync_all_guilds(),
+                client.loop
+            ).result(timeout=60)  # Longer timeout for bulk operation
+            
+            # Log success
+            from bot_management.models import BotLog
+            BotLog.objects.create(
+                bot_id=bot_id,
+                event_type="ALL_GUILDS_SYNCED",
+                description=f"All guilds synced for bot {bot_id}"
+            )
+            
+            logger.info(f"Successfully synced all guilds for bot {bot_id}")
+            return True
+            
+        except Exception as e:
+            logger.error(f"Failed to sync all guilds for bot {bot_id}: {str(e)}")
+            return False
+
 # Create the singleton instance
 bot_manager = BotManager()
\ No newline at end of file
diff --git a/bot_management/forms.py b/bot_management/forms.py
index 4ac68ed..fc5773e 100644
--- a/bot_management/forms.py
+++ b/bot_management/forms.py
@@ -1,67 +1,409 @@
 from django import forms
-from .models import Bot, BotLog
+from django.core.exceptions import ValidationError
+from django.utils.translation import gettext_lazy as _
+from django.core.validators import RegexValidator
+from django.core.serializers.json import DjangoJSONEncoder
+import json
 import re
 
+from .models import Bot, Guild, GuildSettings, Command, CommandOption, BotLog
+
 class BotForm(forms.ModelForm):
     """Form for creating and editing bots"""
     
-    token = forms.CharField(
-        widget=forms.TextInput(attrs={'class': 'form-control'}),
-        help_text='Enter your Discord bot token from the Developer Portal'
-    )
-    
     class Meta:
         model = Bot
         fields = ['name', 'description', 'token', 'client_id', 'bot_user_id', 'avatar_url', 'is_active']
         widgets = {
-            'name': forms.TextInput(attrs={'class': 'form-control'}),
-            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
-            'client_id': forms.TextInput(attrs={'class': 'form-control'}),
-            'bot_user_id': forms.TextInput(attrs={'class': 'form-control'}),
-            'avatar_url': forms.URLInput(attrs={'class': 'form-control'}),
+            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Bot Name'}),
+            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'placeholder': 'Bot Description'}),
+            'token': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Bot Token'}),
+            'client_id': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Client ID'}),
+            'bot_user_id': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Bot User ID'}),
+            'avatar_url': forms.URLInput(attrs={'class': 'form-control', 'placeholder': 'Avatar URL (Optional)'}),
             'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
         }
-        
+        help_texts = {
+            'name': _('A unique name for your bot'),
+            'description': _('A brief description of what your bot does'),
+            'token': _('Your Discord bot token (keep this secure!)'),
+            'client_id': _('Your Discord application client ID'),
+            'bot_user_id': _('Your Discord bot user ID'),
+            'avatar_url': _('URL to your bot\'s avatar image (optional)'),
+            'is_active': _('Whether the bot can be started and used'),
+        }
+
     def clean_token(self):
-        """Validate the bot token format"""
+        """Validate the bot token"""
         token = self.cleaned_data.get('token')
         
-        # Basic format validation for Discord bot tokens
-        if not re.match(r'^[A-Za-z0-9._-]+$', token):
-            raise forms.ValidationError("Bot token contains invalid characters")
+        # Token is optional for updates
+        if not token and self.instance and self.instance.pk:
+            return token
             
-        # Most Discord bot tokens are at least 50 characters long
-        if len(token) < 50:
-            raise forms.ValidationError("Bot token is too short to be valid")
+        # Check if token looks valid
+        if token and not re.match(r'^[A-Za-z0-9._-]+$', token):
+            raise ValidationError(_('Invalid token format. Tokens should only contain letters, numbers, and certain symbols (., _, -).'))
             
         return token
-        
+
     def clean_client_id(self):
-        """Validate the client ID (should be numeric)"""
+        """Validate the client ID"""
         client_id = self.cleaned_data.get('client_id')
         
-        if not client_id.isdigit():
-            raise forms.ValidationError("Client ID must contain only digits")
+        # Check if client_id is numeric
+        if client_id and not client_id.isdigit():
+            raise ValidationError(_('Client ID must be numeric'))
             
         return client_id
         
     def clean_bot_user_id(self):
-        """Validate the bot user ID (should be numeric)"""
+        """Validate the bot user ID"""
         bot_user_id = self.cleaned_data.get('bot_user_id')
         
-        if not bot_user_id.isdigit():
-            raise forms.ValidationError("Bot user ID must contain only digits")
+        # Check if bot_user_id is numeric
+        if bot_user_id and not bot_user_id.isdigit():
+            raise ValidationError(_('Bot User ID must be numeric'))
             
         return bot_user_id
 
 class BotLogForm(forms.ModelForm):
-    """Form for creating log entries"""
+    """Form for viewing and filtering bot logs"""
     
     class Meta:
         model = BotLog
-        fields = ['bot', 'event_type', 'description']
+        fields = ['event_type', 'description']
+        widgets = {
+            'event_type': forms.TextInput(attrs={'class': 'form-control', 'readonly': 'readonly'}),
+            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'readonly': 'readonly'}),
+        }
+
+class CommandForm(forms.ModelForm):
+    """Form for creating and updating commands"""
+    
+    # These fields are not directly on the model but help in form processing
+    is_global = forms.BooleanField(required=False, initial=True,
+                                  widget=forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+                                  help_text="If checked, this command will be available in all servers. If unchecked, select a specific server.")
+    guild_choice = forms.ModelChoiceField(queryset=Guild.objects.none(), required=False,
+                                         widget=forms.Select(attrs={'class': 'form-select'}),
+                                         help_text="The specific server where this command will be available. Only applies if 'Global Command' is unchecked.")
+    
+    class Meta:
+        model = Command
+        fields = ['bot', 'name', 'description', 'type', 'default_member_permissions', 
+                  'is_dm_enabled', 'is_nsfw', 'is_active']
         widgets = {
             'bot': forms.Select(attrs={'class': 'form-select'}),
-            'event_type': forms.TextInput(attrs={'class': 'form-control'}),
-            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
-        }
\ No newline at end of file
+            'name': forms.TextInput(attrs={'class': 'form-control', 'pattern': '^[\\w-]{1,32}$', 
+                                          'title': 'Command names must be 1-32 characters and contain only alphanumeric characters, underscores, and hyphens.'}),
+            'description': forms.TextInput(attrs={'class': 'form-control', 'maxlength': 100}),
+            'type': forms.Select(attrs={'class': 'form-select'}),
+            'default_member_permissions': forms.TextInput(attrs={'class': 'form-control'}),
+            'is_dm_enabled': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+            'is_nsfw': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+        }
+        help_texts = {
+            'name': 'Command name, lowercase with no spaces (1-32 characters, letters, numbers, hyphens, underscores only)',
+            'description': 'Short description of what the command does (max 100 characters)',
+            'type': 'Command type: slash command or context menu',
+            'default_member_permissions': 'Discord permission flags for who can use this command (leave blank for everyone)',
+            'is_dm_enabled': 'Whether this command can be used in DMs',
+            'is_nsfw': 'Whether this command is age-restricted',
+            'is_active': 'Whether this command is enabled and should be synced',
+        }
+    
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        
+        # If we have an instance, set up is_global and guild_choice fields
+        if self.instance and self.instance.pk:
+            self.fields['is_global'].initial = self.instance.guild is None
+            
+            if self.instance.bot:
+                self.fields['guild_choice'].queryset = Guild.objects.filter(
+                    bot=self.instance.bot, is_available=True
+                ).order_by('name')
+            
+            if self.instance.guild:
+                self.fields['guild_choice'].initial = self.instance.guild
+        
+        # If 'bot' is in the submitted data, fetch guilds for that bot
+        bot_id = None
+        if 'data' in kwargs and 'bot' in kwargs['data']:
+            bot_id = kwargs['data']['bot']
+        elif args and len(args) > 0 and 'bot' in args[0]:
+            bot_id = args[0]['bot']
+        
+        if bot_id:
+            self.fields['guild_choice'].queryset = Guild.objects.filter(
+                bot_id=bot_id, is_available=True
+            ).order_by('name')
+    
+    def clean(self):
+        cleaned_data = super().clean()
+        is_global = cleaned_data.get('is_global')
+        guild_choice = cleaned_data.get('guild_choice')
+        command_type = cleaned_data.get('type')
+        description = cleaned_data.get('description')
+        
+        # If not global, require a guild selection
+        if not is_global and not guild_choice:
+            self.add_error('guild_choice', 'You must select a server for a server-specific command.')
+        
+        # For USER and MESSAGE types, description is optional
+        if command_type in [2, 3] and not description:  # USER or MESSAGE
+            cleaned_data['description'] = ''  # Set to empty string if not provided
+        elif command_type == 1 and not description:  # CHAT_INPUT requires description
+            self.add_error('description', 'Description is required for slash commands.')
+        
+        return cleaned_data
+    
+    def save(self, commit=True):
+        command = super().save(commit=False)
+        is_global = self.cleaned_data.get('is_global')
+        guild_choice = self.cleaned_data.get('guild_choice')
+        
+        # Set the guild based on the is_global flag
+        if is_global:
+            command.guild = None
+        else:
+            command.guild = guild_choice
+        
+        if commit:
+            command.save()
+        
+        return command
+
+class CommandOptionForm(forms.ModelForm):
+    """Form for creating and updating command options"""
+    
+    class Meta:
+        model = CommandOption
+        fields = ['command', 'parent', 'name', 'description', 'type', 'required', 'position']
+        widgets = {
+            'command': forms.Select(attrs={'class': 'form-select'}),
+            'parent': forms.Select(attrs={'class': 'form-select'}),
+            'name': forms.TextInput(attrs={'class': 'form-control', 'pattern': '^[\\w-]{1,32}$', 
+                                          'title': 'Option names must be 1-32 characters and contain only alphanumeric characters, underscores, and hyphens.'}),
+            'description': forms.TextInput(attrs={'class': 'form-control', 'maxlength': 100}),
+            'type': forms.Select(attrs={'class': 'form-select'}),
+            'required': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+            'position': forms.NumberInput(attrs={'class': 'form-control', 'min': 0}),
+        }
+    
+    # Fields for different option types
+    choices_json = forms.CharField(
+        required=False, 
+        widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 4, 'placeholder': '[{"name": "Option 1", "value": "option1"}, {"name": "Option 2", "value": "option2"}]'}),
+        help_text="JSON array of choices for STRING, INTEGER, and NUMBER types. Each choice must have 'name' and 'value'."
+    )
+    
+    min_value = forms.IntegerField(
+        required=False,
+        widget=forms.NumberInput(attrs={'class': 'form-control'}),
+        help_text="Minimum value for INTEGER and NUMBER types."
+    )
+    
+    max_value = forms.IntegerField(
+        required=False,
+        widget=forms.NumberInput(attrs={'class': 'form-control'}),
+        help_text="Maximum value for INTEGER and NUMBER types."
+    )
+    
+    channel_types = forms.MultipleChoiceField(
+        required=False,
+        choices=[(0, 'Text'), (2, 'Voice'), (4, 'Category'), (5, 'Announcement'),
+                 (10, 'Announcement Thread'), (11, 'Public Thread'), (12, 'Private Thread'),
+                 (13, 'Stage Voice'), (15, 'Forum')],
+        widget=forms.SelectMultiple(attrs={'class': 'form-select', 'size': 5}),
+        help_text="Channel types that are allowed for CHANNEL type options."
+    )
+    
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        
+        # Filter parent choices based on the command
+        if self.instance and self.instance.command:
+            self.fields['parent'].queryset = CommandOption.objects.filter(
+                command=self.instance.command,
+                type__in=[1, 2]  # Only SUB_COMMAND or SUB_COMMAND_GROUP can be parents
+            ).exclude(pk=self.instance.pk)  # Exclude self from parent choices
+            
+            # Set initial values from option_data
+            if 'min_value' in self.instance.option_data:
+                self.initial['min_value'] = self.instance.option_data['min_value']
+            
+            if 'max_value' in self.instance.option_data:
+                self.initial['max_value'] = self.instance.option_data['max_value']
+            
+            if 'choices' in self.instance.option_data:
+                self.initial['choices_json'] = json.dumps(self.instance.option_data['choices'], indent=2)
+            
+            if 'channel_types' in self.instance.option_data:
+                self.initial['channel_types'] = self.instance.option_data['channel_types']
+    
+    def clean_choices_json(self):
+        """Validate and parse the choices JSON"""
+        choices_json = self.cleaned_data.get('choices_json')
+        if not choices_json:
+            return None
+        
+        try:
+            choices = json.loads(choices_json)
+            
+            # Validate that choices is a list
+            if not isinstance(choices, list):
+                raise ValidationError("Choices must be a JSON array.")
+            
+            # Validate each choice has name and value
+            for choice in choices:
+                if not isinstance(choice, dict):
+                    raise ValidationError("Each choice must be a JSON object.")
+                
+                if 'name' not in choice or 'value' not in choice:
+                    raise ValidationError("Each choice must have 'name' and 'value' properties.")
+                
+                # Check that name is a string and not too long
+                if not isinstance(choice['name'], str) or len(choice['name']) > 100:
+                    raise ValidationError("Choice names must be strings with at most 100 characters.")
+                
+                # Check that value is a valid type (string, number, or boolean)
+                if not isinstance(choice['value'], (str, int, float, bool)):
+                    raise ValidationError("Choice values must be strings, numbers, or booleans.")
+            
+            return choices
+        except json.JSONDecodeError:
+            raise ValidationError("Invalid JSON format for choices.")
+    
+    def clean(self):
+        cleaned_data = super().clean()
+        option_type = cleaned_data.get('type')
+        choices = cleaned_data.get('choices_json')
+        min_value = cleaned_data.get('min_value')
+        max_value = cleaned_data.get('max_value')
+        channel_types = cleaned_data.get('channel_types')
+        parent = cleaned_data.get('parent')
+        
+        # Validate based on option type
+        if option_type in [3, 4, 10]:  # STRING, INTEGER, NUMBER
+            # These types can have choices
+            pass
+        elif choices:
+            self.add_error('choices_json', f"Choices are only valid for STRING, INTEGER, and NUMBER types, not {self.instance.get_type_display()}.")
+        
+        if option_type in [4, 10]:  # INTEGER, NUMBER
+            # These types can have min/max values
+            if min_value is not None and max_value is not None and min_value > max_value:
+                self.add_error('max_value', "Maximum value must be greater than or equal to minimum value.")
+        elif (min_value is not None or max_value is not None):
+            self.add_error('min_value', f"Min/max values are only valid for INTEGER and NUMBER types, not {self.instance.get_type_display()}.")
+        
+        if option_type == 7:  # CHANNEL
+            # This type can have channel_types
+            pass
+        elif channel_types:
+            self.add_error('channel_types', f"Channel types are only valid for CHANNEL type, not {self.instance.get_type_display()}.")
+        
+        # Check parent compatibility
+        if parent:
+            if parent.type not in [1, 2]:  # SUB_COMMAND, SUB_COMMAND_GROUP
+                self.add_error('parent', f"Parent must be a SUB_COMMAND or SUB_COMMAND_GROUP, not {parent.get_type_display()}.")
+            
+            if parent.type == 1 and option_type in [1, 2]:  # SUB_COMMAND can't have SUB_COMMAND or SUB_COMMAND_GROUP children
+                self.add_error('parent', f"SUB_COMMAND cannot have {self.instance.get_type_display()} children.")
+        
+        return cleaned_data
+    
+    def save(self, commit=True):
+        option = super().save(commit=False)
+        
+        # Build option_data based on the option type
+        option_data = {}
+        
+        if option.type in [3, 4, 10]:  # STRING, INTEGER, NUMBER
+            choices = self.cleaned_data.get('choices_json')
+            if choices:
+                option_data['choices'] = choices
+        
+        if option.type in [4, 10]:  # INTEGER, NUMBER
+            min_value = self.cleaned_data.get('min_value')
+            max_value = self.cleaned_data.get('max_value')
+            
+            if min_value is not None:
+                option_data['min_value'] = min_value
+            
+            if max_value is not None:
+                option_data['max_value'] = max_value
+        
+        if option.type == 7:  # CHANNEL
+            channel_types = self.cleaned_data.get('channel_types')
+            if channel_types:
+                option_data['channel_types'] = [int(ct) for ct in channel_types]
+        
+        option.option_data = option_data
+        
+        if commit:
+            option.save()
+        
+        return option
+
+
+class GuildSettingsForm(forms.ModelForm):
+    """Form for managing guild-specific settings"""
+    
+    class Meta:
+        model = GuildSettings
+        fields = ['prefix', 'notification_channel_id', 'welcome_message', 'goodbye_message',
+                  'enable_welcome_messages', 'enable_goodbye_messages', 'enable_member_tracking',
+                  'enable_moderation', 'admin_role_id', 'moderator_role_id']
+        widgets = {
+            'prefix': forms.TextInput(attrs={'class': 'form-control', 'maxlength': 10}),
+            'notification_channel_id': forms.Select(attrs={'class': 'form-select'}),
+            'welcome_message': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
+            'goodbye_message': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
+            'enable_welcome_messages': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+            'enable_goodbye_messages': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+            'enable_member_tracking': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+            'enable_moderation': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
+            'admin_role_id': forms.Select(attrs={'class': 'form-select'}),
+            'moderator_role_id': forms.Select(attrs={'class': 'form-select'}),
+        }
+        
+    def __init__(self, *args, **kwargs):
+        guild = kwargs.pop('guild', None)
+        super().__init__(*args, **kwargs)
+        
+        if guild:
+            # Populate the channel and role dropdowns with choices from the guild
+            text_channels = []
+            for channel in guild.channels.filter(type=0).order_by('position', 'name'):
+                text_channels.append((channel.channel_id, f"#{channel.name}"))
+            
+            # Add empty option
+            text_channels.insert(0, ('', '---------'))
+            
+            self.fields['notification_channel_id'].widget = forms.Select(
+                attrs={'class': 'form-select'},
+                choices=text_channels
+            )
+            
+            # For future implementation when roles are added to the model
+            # For now, use text inputs for role IDs
+            self.fields['admin_role_id'] = forms.CharField(
+                required=False,
+                widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Discord Role ID'})
+            )
+            self.fields['moderator_role_id'] = forms.CharField(
+                required=False,
+                widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Discord Role ID'})
+            )
+            
+            # Help texts
+            self.fields['prefix'].help_text = 'Command prefix for this server (e.g., !, $, >)'
+            self.fields['notification_channel_id'].help_text = 'Channel for bot notifications and alerts'
+            self.fields['welcome_message'].help_text = 'Message sent when a new user joins the server. Use {user} to mention the user.'
+            self.fields['goodbye_message'].help_text = 'Message sent when a user leaves the server. Use {user} for the username.'
+            self.fields['admin_role_id'].help_text = 'Role ID that can use admin-level bot commands'
+            self.fields['moderator_role_id'].help_text = 'Role ID that can use moderation commands'
\ No newline at end of file
diff --git a/bot_management/models.py b/bot_management/models.py
index 7d15294..8f2f355 100644
--- a/bot_management/models.py
+++ b/bot_management/models.py
@@ -4,6 +4,8 @@ from cryptography.fernet import Fernet
 import environ
 import os
 import logging
+import json
+from django.core.serializers.json import DjangoJSONEncoder
 
 # Initialize environment variables
 env = environ.Env()
@@ -88,6 +90,79 @@ class Bot(models.Model):
         from bot_management.discord_bot.service import bot_manager
         
         return bot_manager.get_bot_status(self.id)
+    
+    def get_guilds(self):
+        """Get all guilds for this bot"""
+        return self.guilds.all()
+        
+    def sync_guilds(self):
+        """Sync all guilds for this bot with Discord API"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        success = bot_manager.sync_all_guilds(self.id)
+        
+        if success:
+            BotLog.objects.create(
+                bot=self,
+                event_type='ALL_GUILDS_SYNCED',
+                description=f'All guilds synced for bot {self.name}'
+            )
+            
+        return success
+        
+    def sync_guild(self, guild_id):
+        """Sync a specific guild for this bot with Discord API"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        success = bot_manager.sync_guild(self.id, guild_id)
+        
+        if success:
+            guild_name = self.guilds.filter(guild_id=guild_id).first().name if self.guilds.filter(guild_id=guild_id).exists() else 'Unknown'
+            BotLog.objects.create(
+                bot=self,
+                event_type='GUILD_SYNCED',
+                description=f'Guild {guild_name} (ID: {guild_id}) synced for bot {self.name}'
+            )
+            
+        return success
+        
+    def record_error(self, error_type, error_message, context=None):
+        """Record an error for this bot and attempt recovery if appropriate"""
+        from bot_management.error_handling import log_bot_error, BotErrorHandler
+        
+        # Log the error
+        log_bot_error(
+            bot=self,
+            error_type=error_type,
+            error_message=error_message,
+            context=context
+        )
+        
+        # Check if we should attempt recovery
+        permanent_errors = [
+            'InvalidToken',
+            'Unauthorized',
+            'RateLimitExceeded',
+            'ForbiddenBot',
+            'IntentRequired'
+        ]
+        
+        if error_type not in permanent_errors:
+            # Attempt recovery for non-permanent errors
+            return BotErrorHandler.attempt_recovery(self, error_type)
+        else:
+            # For permanent errors, mark the bot as inactive if needed
+            if error_type in ['InvalidToken', 'Unauthorized', 'ForbiddenBot', 'IntentRequired']:
+                self.is_active = False
+                self.save(update_fields=['is_active'])
+                
+                BotLog.objects.create(
+                    bot=self,
+                    event_type='BOT_DEACTIVATED',
+                    description=f'Bot automatically deactivated due to {error_type} error'
+                )
+            
+            return False
 
 class BotLog(models.Model):
     """Model for logging bot activity"""
@@ -97,4 +172,375 @@ class BotLog(models.Model):
     timestamp = models.DateTimeField(auto_now_add=True)
     
     def __str__(self):
-        return f"{self.bot.name} - {self.event_type} - {self.timestamp}"
\ No newline at end of file
+        return f"{self.bot.name} - {self.event_type} - {self.timestamp}"
+
+class Guild(models.Model):
+    """Model representing a Discord server (guild)"""
+    bot = models.ForeignKey(Bot, on_delete=models.CASCADE, related_name='guilds')
+    guild_id = models.CharField(max_length=100)
+    name = models.CharField(max_length=100)
+    icon_url = models.URLField(blank=True, null=True)
+    owner_id = models.CharField(max_length=100, null=True)
+    member_count = models.IntegerField(default=0)
+    description = models.TextField(blank=True, null=True)
+    region = models.CharField(max_length=50, blank=True, null=True)
+    joined_at = models.DateTimeField(auto_now_add=True)
+    last_sync = models.DateTimeField(auto_now=True)
+    is_available = models.BooleanField(default=True)
+    features = models.JSONField(default=list, encoder=DjangoJSONEncoder)
+    
+    class Meta:
+        unique_together = ('bot', 'guild_id')
+        ordering = ['name']
+    
+    def __str__(self):
+        return f"{self.name} ({self.guild_id})"
+    
+    def get_settings(self):
+        """Get guild-specific settings or create default ones if they don't exist"""
+        settings, created = GuildSettings.objects.get_or_create(guild=self)
+        return settings
+    
+    def sync_from_discord(self, guild_data):
+        """Update guild information from Discord guild data"""
+        self.name = guild_data.get('name', self.name)
+        self.icon_url = guild_data.get('icon_url', self.icon_url)
+        self.owner_id = guild_data.get('owner_id', self.owner_id)
+        self.member_count = guild_data.get('member_count', self.member_count)
+        self.description = guild_data.get('description', self.description)
+        self.region = guild_data.get('region', self.region)
+        self.features = guild_data.get('features', self.features)
+        self.is_available = True
+        self.save()
+        
+        # Log the sync
+        BotLog.objects.create(
+            bot=self.bot,
+            event_type='GUILD_SYNCED',
+            description=f'Guild {self.name} ({self.guild_id}) synchronized with Discord'
+        )
+        
+        return self
+
+    def mark_unavailable(self):
+        """Mark the guild as unavailable (bot left or was kicked)"""
+        self.is_available = False
+        self.save()
+        
+        # Log the status change
+        BotLog.objects.create(
+            bot=self.bot,
+            event_type='GUILD_UNAVAILABLE',
+            description=f'Guild {self.name} ({self.guild_id}) marked as unavailable'
+        )
+        
+    def sync_with_discord(self):
+        """Sync this guild with Discord API"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        success = bot_manager.sync_guild(self.bot.id, self.guild_id)
+        
+        if success:
+            BotLog.objects.create(
+                bot=self.bot,
+                event_type='GUILD_SYNCED',
+                description=f'Guild {self.name} ({self.guild_id}) synced with Discord'
+            )
+            
+        return success
+        
+    def get_channels(self):
+        """Get all channels for this guild"""
+        return self.channels.all().order_by('position', 'name')
+
+class GuildSettings(models.Model):
+    """Model for guild-specific settings"""
+    guild = models.OneToOneField(Guild, on_delete=models.CASCADE, related_name='settings')
+    
+    # Command prefix (for classic commands, if used)
+    prefix = models.CharField(max_length=10, default='!')
+    
+    # Notification settings
+    notification_channel_id = models.CharField(max_length=100, blank=True, null=True)
+    welcome_message = models.TextField(blank=True, null=True)
+    goodbye_message = models.TextField(blank=True, null=True)
+    
+    # Feature toggles
+    enable_welcome_messages = models.BooleanField(default=False)
+    enable_goodbye_messages = models.BooleanField(default=False)
+    enable_member_tracking = models.BooleanField(default=False)
+    enable_moderation = models.BooleanField(default=False)
+    
+    # Role settings
+    admin_role_id = models.CharField(max_length=100, blank=True, null=True)
+    moderator_role_id = models.CharField(max_length=100, blank=True, null=True)
+    
+    # Custom settings (stored as JSON)
+    custom_settings = models.JSONField(default=dict, encoder=DjangoJSONEncoder)
+    
+    # Timestamps
+    created_at = models.DateTimeField(auto_now_add=True)
+    updated_at = models.DateTimeField(auto_now=True)
+    
+    def __str__(self):
+        return f"Settings for {self.guild.name}"
+    
+    def get_custom_setting(self, key, default=None):
+        """Get a custom setting by key"""
+        return self.custom_settings.get(key, default)
+    
+    def set_custom_setting(self, key, value):
+        """Set a custom setting"""
+        if not self.custom_settings:
+            self.custom_settings = {}
+        
+        self.custom_settings[key] = value
+        self.save(update_fields=['custom_settings', 'updated_at'])
+        
+        return True
+    
+    def delete_custom_setting(self, key):
+        """Delete a custom setting"""
+        if not self.custom_settings or key not in self.custom_settings:
+            return False
+        
+        del self.custom_settings[key]
+        self.save(update_fields=['custom_settings', 'updated_at'])
+        
+        return True
+
+class GuildChannel(models.Model):
+    """Model representing a Discord channel within a guild"""
+    guild = models.ForeignKey(Guild, on_delete=models.CASCADE, related_name='channels')
+    channel_id = models.CharField(max_length=100)
+    name = models.CharField(max_length=100)
+    
+    # Channel types (using Discord's channel type IDs)
+    TYPES = (
+        (0, 'Text'),
+        (1, 'DM'),
+        (2, 'Voice'),
+        (3, 'Group DM'),
+        (4, 'Category'),
+        (5, 'Announcement'),
+        (10, 'Announcement Thread'),
+        (11, 'Public Thread'),
+        (12, 'Private Thread'),
+        (13, 'Stage Voice'),
+        (14, 'Directory'),
+        (15, 'Forum'),
+    )
+    
+    type = models.IntegerField(choices=TYPES, default=0)
+    position = models.IntegerField(default=0)
+    category_id = models.CharField(max_length=100, blank=True, null=True)
+    is_nsfw = models.BooleanField(default=False)
+    topic = models.CharField(max_length=1024, blank=True, null=True)
+    last_sync = models.DateTimeField(auto_now=True)
+    
+    class Meta:
+        unique_together = ('guild', 'channel_id')
+        ordering = ['position', 'name']
+    
+    def __str__(self):
+        return f"#{self.name} ({self.get_type_display()})"
+    
+    def sync_from_discord(self, channel_data):
+        """Update channel information from Discord channel data"""
+        self.name = channel_data.get('name', self.name)
+        self.type = channel_data.get('type', self.type)
+        self.position = channel_data.get('position', self.position)
+        self.category_id = channel_data.get('parent_id', self.category_id)
+        self.is_nsfw = channel_data.get('nsfw', self.is_nsfw)
+        self.topic = channel_data.get('topic', self.topic)
+        self.save()
+
+
+class CommandOption(models.Model):
+    """Model representing a Discord slash command option"""
+    # Option types (using Discord's application command option types)
+    TYPES = (
+        (1, 'SUB_COMMAND'),
+        (2, 'SUB_COMMAND_GROUP'),
+        (3, 'STRING'),
+        (4, 'INTEGER'),
+        (5, 'BOOLEAN'),
+        (6, 'USER'),
+        (7, 'CHANNEL'),
+        (8, 'ROLE'),
+        (9, 'MENTIONABLE'),
+        (10, 'NUMBER'),
+        (11, 'ATTACHMENT'),
+    )
+    
+    name = models.CharField(max_length=32)  # Discord limit for option names is 32 characters
+    description = models.CharField(max_length=100)  # Discord limit for option descriptions is 100 characters
+    type = models.IntegerField(choices=TYPES)
+    required = models.BooleanField(default=False)
+    # For storing choices and other option-specific configurations
+    option_data = models.JSONField(default=dict, encoder=DjangoJSONEncoder)
+    # Self-referential relationship for sub-command and sub-command group options
+    parent = models.ForeignKey('self', null=True, blank=True, on_delete=models.CASCADE, related_name='children')
+    command = models.ForeignKey('Command', on_delete=models.CASCADE, related_name='options')
+    position = models.IntegerField(default=0)  # For ordering options
+    
+    class Meta:
+        ordering = ['position']
+    
+    def __str__(self):
+        return f"{self.name} ({self.get_type_display()})"
+    
+    def to_discord_json(self):
+        """Convert the option to a Discord API compatible JSON format"""
+        data = {
+            'name': self.name,
+            'description': self.description,
+            'type': self.type,
+            'required': self.required,
+            **self.option_data  # Include any additional option data
+        }
+        
+        # Add choices if present in option_data
+        if 'choices' in self.option_data:
+            data['choices'] = self.option_data['choices']
+        
+        # Include channel_types if specified for CHANNEL type options
+        if self.type == 7 and 'channel_types' in self.option_data:
+            data['channel_types'] = self.option_data['channel_types']
+        
+        # Include min_value and max_value for INTEGER and NUMBER types
+        if self.type in [4, 10]:
+            if 'min_value' in self.option_data:
+                data['min_value'] = self.option_data['min_value']
+            if 'max_value' in self.option_data:
+                data['max_value'] = self.option_data['max_value']
+        
+        # Add options for SUB_COMMAND and SUB_COMMAND_GROUP types
+        if self.type in [1, 2] and self.children.exists():
+            data['options'] = [child.to_discord_json() for child in self.children.all()]
+        
+        return data
+
+
+class Command(models.Model):
+    """Model representing a Discord slash command"""
+    # Command types (using Discord's application command types)
+    TYPES = (
+        (1, 'CHAT_INPUT'),  # Slash command
+        (2, 'USER'),         # User context menu command
+        (3, 'MESSAGE'),      # Message context menu command
+    )
+    
+    bot = models.ForeignKey(Bot, on_delete=models.CASCADE, related_name='commands')
+    guild = models.ForeignKey(Guild, on_delete=models.CASCADE, related_name='commands', null=True, blank=True)  # Null for global commands
+    name = models.CharField(max_length=32)  # Discord limit for command names is 32 characters
+    description = models.CharField(max_length=100, blank=True)  # Discord limit for command descriptions is 100 characters
+    type = models.IntegerField(choices=TYPES, default=1)  # Default to slash command (CHAT_INPUT)
+    default_member_permissions = models.CharField(max_length=100, blank=True, null=True)  # Permission flags as string
+    is_dm_enabled = models.BooleanField(default=True)  # Whether the command is enabled in DMs
+    is_nsfw = models.BooleanField(default=False)  # Whether the command is age-restricted
+    command_id = models.CharField(max_length=100, blank=True, null=True)  # Discord's ID for the command once registered
+    is_active = models.BooleanField(default=True)  # Whether the command is active and should be synced
+    # For additional custom configurations and metadata
+    command_data = models.JSONField(default=dict, encoder=DjangoJSONEncoder)
+    created_at = models.DateTimeField(auto_now_add=True)
+    updated_at = models.DateTimeField(auto_now=True)
+    last_synced_at = models.DateTimeField(null=True, blank=True)  # Last time the command was synced with Discord
+    
+    class Meta:
+        unique_together = ('bot', 'guild', 'name')  # Command names must be unique per bot and guild
+        ordering = ['name']
+    
+    def __str__(self):
+        guild_name = f" - {self.guild.name}" if self.guild else " (Global)"
+        return f"{self.name}{guild_name}"
+    
+    def to_discord_json(self):
+        """Convert the command to a Discord API compatible JSON format"""
+        data = {
+            'name': self.name,
+            'type': self.type,
+        }
+        
+        # Only CHAT_INPUT commands have descriptions
+        if self.type == 1:  # CHAT_INPUT
+            data['description'] = self.description
+        
+        # Add options if they exist
+        if self.options.exists():
+            data['options'] = [option.to_discord_json() for option in self.options.filter(parent=None)]  # Only top-level options
+        
+        # Add additional fields if they exist
+        if self.default_member_permissions:
+            data['default_member_permissions'] = self.default_member_permissions
+        
+        data['dm_permission'] = self.is_dm_enabled
+        
+        if self.is_nsfw:
+            data['nsfw'] = True
+        
+        # Include any additional command data
+        for key, value in self.command_data.items():
+            if key not in data:  # Don't override existing fields
+                data[key] = value
+        
+        return data
+    
+    def sync_to_discord(self):
+        """Sync this command to Discord API"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        success = bot_manager.sync_command(self.id)
+        
+        if success:
+            BotLog.objects.create(
+                bot=self.bot,
+                event_type='COMMAND_SYNCED',
+                description=f'Command {self.name} synced with Discord'
+            )
+            
+        return success
+    
+    def delete_from_discord(self):
+        """Delete this command from Discord API"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        success = bot_manager.delete_command(self.id)
+        
+        if success:
+            BotLog.objects.create(
+                bot=self.bot,
+                event_type='COMMAND_DELETED',
+                description=f'Command {self.name} deleted from Discord'
+            )
+            
+        return success
+    
+    @staticmethod
+    def sync_all_commands(bot_id, guild_id=None):
+        """Sync all commands for a bot, optionally filtered by guild"""
+        from bot_management.discord_bot.service import bot_manager
+        
+        success = bot_manager.sync_all_commands(bot_id, guild_id)
+        
+        if success:
+            guild_text = f" for guild {guild_id}" if guild_id else ""
+            BotLog.objects.create(
+                bot_id=bot_id,
+                event_type='ALL_COMMANDS_SYNCED',
+                description=f'All commands synced with Discord{guild_text}'
+            )
+            
+        return success
+
+
+class CommandLog(models.Model):
+    """Model for logging command-related activity"""
+    command = models.ForeignKey(Command, on_delete=models.CASCADE, related_name='logs')
+    event_type = models.CharField(max_length=50)
+    description = models.TextField()
+    details = models.JSONField(default=dict, encoder=DjangoJSONEncoder, blank=True, null=True)  # For storing additional details
+    timestamp = models.DateTimeField(auto_now_add=True)
+    
+    def __str__(self):
+        return f"{self.command.name} - {self.event_type} - {self.timestamp}"
\ No newline at end of file
diff --git a/bot_management/tests/test_models.py b/bot_management/tests/test_models.py
index 76801b0..58899b7 100644
--- a/bot_management/tests/test_models.py
+++ b/bot_management/tests/test_models.py
@@ -1,12 +1,31 @@
-from django.test import TestCase
+from django.test import TestCase, override_settings
 from django.contrib.auth.models import User
 from cryptography.fernet import Fernet
 import environ
 import os
+from unittest.mock import patch
 
-from bot_management.models import Bot, BotLog
+from bot_management.models import Bot, BotLog, Guild, GuildSettings, GuildChannel
 
-class BotModelTest(TestCase):
+class BotBaseTestCase(TestCase):
+    """Base test case that sets up the Fernet encryption key for all bot tests"""
+    
+    @classmethod
+    def setUpClass(cls):
+        # Generate a valid Fernet key for testing
+        cls.valid_key = Fernet.generate_key()
+        # Set up environment patch
+        cls.env_patcher = patch.dict('os.environ', {'BOT_TOKEN_KEY': cls.valid_key.decode()})
+        cls.env_patcher.start()
+        super().setUpClass()
+    
+    @classmethod
+    def tearDownClass(cls):
+        # Stop the environment patch
+        cls.env_patcher.stop()
+        super().tearDownClass()
+
+class BotModelTest(BotBaseTestCase):
     """Tests for the Bot model"""
     
     def setUp(self):
@@ -53,7 +72,7 @@ class BotModelTest(TestCase):
         self.assertGreater(len(self.bot.token), len('mock_token'))
 
 
-class BotLogModelTest(TestCase):
+class BotLogModelTest(BotBaseTestCase):
     """Tests for the BotLog model"""
     
     def setUp(self):
@@ -92,4 +111,198 @@ class BotLogModelTest(TestCase):
         self.assertEqual(self.log.bot, self.bot)
         self.assertEqual(self.log.event_type, 'TEST_EVENT')
         self.assertEqual(self.log.description, 'This is a test log entry')
-        self.assertIsNotNone(self.log.timestamp)
\ No newline at end of file
+        self.assertIsNotNone(self.log.timestamp)
+
+
+class GuildModelTest(BotBaseTestCase):
+    """Tests for the Guild model"""
+    
+    def setUp(self):
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='password123'
+        )
+        
+        # Create a test bot
+        self.bot = Bot.objects.create(
+            name='Test Bot',
+            description='A test bot for unit tests',
+            owner=self.user,
+            token='mock_token',
+            client_id='123456789',
+            bot_user_id='987654321',
+            is_active=True
+        )
+        
+        # Create a test guild
+        self.guild = Guild.objects.create(
+            bot=self.bot,
+            guild_id='123456789',
+            name='Test Guild',
+            icon_url='https://example.com/icon.png',
+            owner_id='987654321',
+            member_count=100,
+            is_available=True
+        )
+    
+    def test_guild_string_representation(self):
+        """Test the string representation of a Guild"""
+        self.assertEqual(str(self.guild), 'Test Guild (123456789)')
+    
+    def test_guild_fields(self):
+        """Test that guild fields are saved correctly"""
+        self.assertEqual(self.guild.bot, self.bot)
+        self.assertEqual(self.guild.guild_id, '123456789')
+        self.assertEqual(self.guild.name, 'Test Guild')
+        self.assertEqual(self.guild.icon_url, 'https://example.com/icon.png')
+        self.assertEqual(self.guild.owner_id, '987654321')
+        self.assertEqual(self.guild.member_count, 100)
+        self.assertTrue(self.guild.is_available)
+        self.assertIsNotNone(self.guild.joined_at)
+
+
+class GuildSettingsModelTest(BotBaseTestCase):
+    """Tests for the GuildSettings model"""
+    
+    def setUp(self):
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='password123'
+        )
+        
+        # Create a test bot
+        self.bot = Bot.objects.create(
+            name='Test Bot',
+            description='A test bot for unit tests',
+            owner=self.user,
+            token='mock_token',
+            client_id='123456789',
+            bot_user_id='987654321',
+            is_active=True
+        )
+        
+        # Create a test guild
+        self.guild = Guild.objects.create(
+            bot=self.bot,
+            guild_id='123456789',
+            name='Test Guild',
+            owner_id='987654321',
+            member_count=100,
+            is_available=True
+        )
+        
+        # Create test guild settings
+        self.settings = GuildSettings.objects.create(
+            guild=self.guild,
+            prefix='!',
+            custom_settings={
+                'welcome_channel': '12345',
+                'welcome_message': 'Hello {user}!'
+            }
+        )
+    
+    def test_settings_string_representation(self):
+        """Test the string representation of GuildSettings"""
+        self.assertEqual(str(self.settings), 'Settings for Test Guild')
+    
+    def test_settings_fields(self):
+        """Test that settings fields are saved correctly"""
+        self.assertEqual(self.settings.guild, self.guild)
+        self.assertEqual(self.settings.prefix, '!')
+        self.assertEqual(self.settings.custom_settings['welcome_channel'], '12345')
+        self.assertEqual(self.settings.custom_settings['welcome_message'], 'Hello {user}!')
+        
+    def test_get_custom_setting(self):
+        """Test the get_setting method"""
+        self.assertEqual(self.settings.get_custom_setting('welcome_channel'), '12345')
+        self.assertEqual(self.settings.get_custom_setting('welcome_message'), 'Hello {user}!')
+        self.assertEqual(self.settings.get_custom_setting('nonexistent', 'default'), 'default')
+
+    def test_set_custom_setting(self):
+        """Test the set_setting method"""
+        self.settings.set_custom_setting('new_setting', 'value')
+        self.assertEqual(self.settings.custom_settings['new_setting'], 'value')
+        # Change existing setting
+        self.settings.set_custom_setting('welcome_channel', '67890')
+        self.assertEqual(self.settings.custom_settings['welcome_channel'], '67890')
+
+
+class GuildChannelModelTest(BotBaseTestCase):
+    """Tests for the GuildChannel model"""
+    
+    def setUp(self):
+        # Create a test user
+        self.user = User.objects.create_user(
+            username='testuser',
+            email='test@example.com',
+            password='password123'
+        )
+        
+        # Create a test bot
+        self.bot = Bot.objects.create(
+            name='Test Bot',
+            description='A test bot for unit tests',
+            owner=self.user,
+            token='mock_token',
+            client_id='123456789',
+            bot_user_id='987654321',
+            is_active=True
+        )
+        
+        # Create a test guild
+        self.guild = Guild.objects.create(
+            bot=self.bot,
+            guild_id='123456789',
+            name='Test Guild',
+            owner_id='987654321',
+            member_count=100,
+            is_available=True
+        )
+        
+        # Create a test channel
+        self.channel = GuildChannel.objects.create(
+            guild=self.guild,
+            channel_id='987654321',
+            name='test-channel',
+            type=0,  # Text channel
+            position=1,
+            category_id='111222333',
+            is_nsfw=False
+        )
+    
+    def test_channel_string_representation(self):
+        """Test the string representation of a GuildChannel"""
+        self.assertEqual(str(self.channel), f"#{self.channel.name} ({self.channel.get_type_display()})")
+    
+    def test_channel_fields(self):
+        """Test that channel fields are saved correctly"""
+        self.assertEqual(self.channel.guild, self.guild)
+        self.assertEqual(self.channel.channel_id, '987654321')
+        self.assertEqual(self.channel.name, 'test-channel')
+        self.assertEqual(self.channel.type, 0)
+        self.assertEqual(self.channel.position, 1)
+        self.assertEqual(self.channel.category_id, '111222333')
+        self.assertFalse(self.channel.is_nsfw)
+    
+    def test_get_type_display(self):
+        """Test the get_type_display method"""
+        self.assertEqual(self.channel.get_type_display(), 'Text')
+        
+        # Test other channel types
+        self.channel.type = 2
+        self.channel.save()
+        self.assertEqual(self.channel.get_type_display(), 'Voice')
+        
+        self.channel.type = 4
+        self.channel.save()
+        self.assertEqual(self.channel.get_type_display(), 'Category')
+        
+        # For an invalid type, Django returns the raw value
+        # instead of None, so we just check that it's the right value
+        self.channel.type = 999  # Unknown type
+        self.channel.save()
+        self.assertEqual(self.channel.get_type_display(), 999)
\ No newline at end of file
diff --git a/bot_management/tests/test_views.py b/bot_management/tests/test_views.py
index 38fce55..1aa9346 100644
--- a/bot_management/tests/test_views.py
+++ b/bot_management/tests/test_views.py
@@ -1,11 +1,12 @@
-from django.test import TestCase, Client
+from django.test import Client
 from django.urls import reverse
 from django.contrib.auth.models import User
-from bot_management.models import Bot, BotLog
 from django.contrib.messages import get_messages
 
+from bot_management.models import Bot, BotLog
+from bot_management.tests.test_models import BotBaseTestCase
 
-class BotViewsTest(TestCase):
+class BotViewsTest(BotBaseTestCase):
     """Tests for the bot_management views"""
     
     def setUp(self):
diff --git a/bot_management/urls.py b/bot_management/urls.py
index 1d852f0..20839ce 100644
--- a/bot_management/urls.py
+++ b/bot_management/urls.py
@@ -1,5 +1,7 @@
 from django.urls import path
 from . import views
+from . import command_views
+from . import guild_views
 
 app_name = 'bot_management'
 
@@ -17,4 +19,31 @@ urlpatterns = [
     path('bot/<int:bot_id>/start/', views.start_bot, name='start_bot'),
     path('bot/<int:bot_id>/stop/', views.stop_bot, name='stop_bot'),
     path('bot/<int:bot_id>/restart/', views.restart_bot, name='restart_bot'),
+    
+    # Command management
+    path('commands/', command_views.command_list, name='command_list'),
+    path('commands/new/', command_views.command_create, name='command_create'),
+    path('commands/<int:command_id>/', command_views.command_detail, name='command_detail'),
+    path('commands/<int:command_id>/edit/', command_views.command_update, name='command_update'),
+    path('commands/<int:command_id>/delete/', command_views.command_delete, name='command_delete'),
+    path('commands/<int:command_id>/toggle-status/', command_views.command_toggle_status, name='command_toggle_status'),
+    path('commands/<int:command_id>/sync/', command_views.command_sync, name='command_sync'),
+    path('commands/sync-all/<int:bot_id>/', command_views.command_sync_all, name='command_sync_all'),
+    
+    # Command option management
+    path('commands/<int:command_id>/option/new/', command_views.option_create, name='option_create'),
+    path('options/<int:option_id>/edit/', command_views.option_update, name='option_update'),
+    path('options/<int:option_id>/delete/', command_views.option_delete, name='option_delete'),
+    
+    # AJAX endpoints
+    path('api/guilds-by-bot/', command_views.get_guild_choices, name='get_guild_choices'),
+    
+    # Guild management
+    path('guilds/', guild_views.guild_list, name='guild_list'),
+    path('guilds/<int:guild_id>/', guild_views.guild_detail, name='guild_detail'),
+    path('guilds/<int:guild_id>/settings/', guild_views.guild_settings, name='guild_settings'),
+    path('guilds/<int:guild_id>/sync/', guild_views.sync_guild, name='sync_guild'),
+    path('guilds/sync-all/<int:bot_id>/', guild_views.sync_all_guilds, name='sync_all_guilds'),
+    path('guilds/<int:guild_id>/channels/', guild_views.guild_channels, name='guild_channels'),
+    path('guilds/<int:guild_id>/commands/', guild_views.guild_commands, name='guild_commands'),
 ]
\ No newline at end of file
diff --git a/bot_management/views.py b/bot_management/views.py
index 041ee71..ed684df 100644
--- a/bot_management/views.py
+++ b/bot_management/views.py
@@ -7,7 +7,10 @@ from django.views.decorators.http import require_POST
 from dashboard.decorators import discord_login_required
 from .models import Bot, BotLog
 from .forms import BotForm, BotLogForm
+from .error_handling import with_bot_error_handling
+from logging_system.utils import log_error
 import time
+import functools
 
 @discord_login_required
 def index(request):
@@ -132,6 +135,7 @@ def bot_update(request, bot_id):
 
 @discord_login_required
 @require_POST
+@with_bot_error_handling(bot_field='bot_id')
 def bot_delete(request, bot_id):
     """View to delete a bot"""
     bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
@@ -151,6 +155,7 @@ def bot_delete(request, bot_id):
 
 @discord_login_required
 @require_POST
+@with_bot_error_handling(bot_field='bot_id')
 def toggle_bot_status(request, bot_id):
     """AJAX view to toggle a bot's active status"""
     bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
@@ -193,6 +198,7 @@ def bot_logs(request, bot_id):
 
 @discord_login_required
 @require_POST
+@with_bot_error_handling(bot_field='bot_id')
 def start_bot(request, bot_id):
     """View to start a bot"""
     bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
@@ -220,6 +226,7 @@ def start_bot(request, bot_id):
 
 @discord_login_required
 @require_POST
+@with_bot_error_handling(bot_field='bot_id')
 def stop_bot(request, bot_id):
     """View to stop a bot"""
     bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
@@ -241,6 +248,7 @@ def stop_bot(request, bot_id):
 
 @discord_login_required
 @require_POST
+@with_bot_error_handling(bot_field='bot_id')
 def restart_bot(request, bot_id):
     """View to restart a bot"""
     bot = get_object_or_404(Bot, id=bot_id, owner=request.user)
diff --git a/config/asgi.py b/config/asgi.py
index 03604b3..aeadfae 100644
--- a/config/asgi.py
+++ b/config/asgi.py
@@ -8,10 +8,37 @@ https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
 """
 
 import os
+import django
 
+# Check environment setting and set appropriate settings module
+django_env = os.environ.get('DJANGO_ENV', 'development')
+if django_env == 'production':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_prod')
+elif django_env == 'test':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_test')
+else:
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_dev')
+
+# Initialize Django first
+django.setup()
+
+# Import after Django setup to avoid import errors
+from channels.auth import AuthMiddlewareStack
+from channels.routing import ProtocolTypeRouter, URLRouter
+from channels.security.websocket import AllowedHostsOriginValidator
 from django.core.asgi import get_asgi_application
 
-# Set default Django settings module
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_dev')
+# Import WebSocket URL patterns
+import realtime.routing
 
-application = get_asgi_application()
\ No newline at end of file
+# Create the ASGI application
+application = ProtocolTypeRouter({
+    "http": get_asgi_application(),
+    "websocket": AllowedHostsOriginValidator(
+        AuthMiddlewareStack(
+            URLRouter(
+                realtime.routing.websocket_urlpatterns
+            )
+        )
+    ),
+})
\ No newline at end of file
diff --git a/config/settings_base.py b/config/settings_base.py
index 2ce9666..c5f7e0c 100644
--- a/config/settings_base.py
+++ b/config/settings_base.py
@@ -48,6 +48,7 @@ PROJECT_APPS = [
     'dashboard.apps.DashboardConfig',
     'bot_management',
     'api',
+    'logging_system',
 ]
 
 # Combined apps list
@@ -67,6 +68,7 @@ MIDDLEWARE = [
     'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'allauth.account.middleware.AccountMiddleware',  # Django-allauth middleware
     'dashboard.middleware.RequestLogMiddleware',  # Request logging middleware (only in debug mode)
+    'logging_system.middleware.RequestLoggingMiddleware',  # System-wide request logging
 ]
 
 # URL configuration
diff --git a/config/settings_prod.py b/config/settings_prod.py
index af9aa58..80a7885 100644
--- a/config/settings_prod.py
+++ b/config/settings_prod.py
@@ -2,21 +2,39 @@
 Production environment settings for Social Cube project.
 """
 
+import os
 from .settings_base import *  # noqa
 
 # Debug should be False in production
-DEBUG = False
+DEBUG = env.bool('DEBUG', default=False)
 
 # Secret key - must be provided in environment
 SECRET_KEY = env('SECRET_KEY')
 
 # Allowed hosts - must be configured properly in production
-ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')
+ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])
 
-# Production database settings - must be configured
-DATABASES = {
-    'default': env.db('DATABASE_URL'),
-}
+# Production database settings
+# Use DATABASE_URL if provided, otherwise construct from individual settings
+if env('DATABASE_URL', default=None):
+    DATABASES = {
+        'default': env.db('DATABASE_URL'),
+    }
+else:
+    DATABASES = {
+        'default': {
+            'ENGINE': env('DB_ENGINE', default='django.db.backends.postgresql'),
+            'NAME': env('DB_NAME', default='social_cube'),
+            'USER': env('DB_USER', default='postgres'),
+            'PASSWORD': env('DB_PASSWORD'),
+            'HOST': env('DB_HOST', default='db'),
+            'PORT': env('DB_PORT', default='5432'),
+            'CONN_MAX_AGE': env.int('DB_CONN_MAX_AGE', default=60),
+            'OPTIONS': {
+                'connect_timeout': env.int('DB_CONNECT_TIMEOUT', default=10),
+            }
+        }
+    }
 
 # Discord OAuth2 credentials - required in production
 DISCORD_CLIENT_ID = env('DISCORD_CLIENT_ID')
@@ -24,8 +42,8 @@ DISCORD_CLIENT_SECRET = env('DISCORD_CLIENT_SECRET')
 DISCORD_REDIRECT_URI = env('DISCORD_REDIRECT_URI')
 
 # CORS settings - restrictive in production
-CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS')
-CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS')
+CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[])
+CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])
 
 # Google OAuth2 settings
 GOOGLE_OAUTH2_CLIENT_SECRETS_FILE = os.path.join(BASE_DIR, 'client_secrets.json')
@@ -33,6 +51,27 @@ GOOGLE_OAUTH2_SCOPES = [
     'https://www.googleapis.com/auth/youtube.readonly',
 ]
 
+# Cache configuration
+CACHES = {
+    'default': {
+        'BACKEND': 'django_redis.cache.RedisCache',
+        'LOCATION': env('REDIS_URL', default=f"redis://{env('REDIS_HOST', default='redis')}:{env('REDIS_PORT', default='6379')}/1"),
+        'OPTIONS': {
+            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
+            'IGNORE_EXCEPTIONS': True,
+            'PARSER_CLASS': 'redis.connection.HiredisParser',
+        }
+    }
+}
+
+# Session configuration
+SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
+SESSION_CACHE_ALIAS = 'default'
+SESSION_COOKIE_AGE = 86400  # 1 day in seconds
+SESSION_COOKIE_HTTPONLY = True
+SESSION_COOKIE_NAME = 'social_cube_session'
+SESSION_COOKIE_SECURE = True
+
 # Security settings for production
 SECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT', default=True)
 SECURE_HSTS_SECONDS = env.int('SECURE_HSTS_SECONDS', default=2592000)  # 30 days
@@ -43,11 +82,29 @@ SECURE_BROWSER_XSS_FILTER = True
 SECURE_CONTENT_TYPE_NOSNIFF = True
 SESSION_COOKIE_SECURE = True
 CSRF_COOKIE_SECURE = True
+X_FRAME_OPTIONS = 'DENY'
 
-# Static files
+# Static files configuration
+STATIC_ROOT = env('STATIC_ROOT', default=os.path.join(BASE_DIR, 'staticfiles'))
 STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
 
-# Logging - configuration for production environment
+# Media files configuration
+MEDIA_ROOT = env('MEDIA_ROOT', default=os.path.join(BASE_DIR, 'media'))
+
+# Channels configuration
+CHANNEL_LAYERS = {
+    "default": {
+        "BACKEND": "channels_redis.core.RedisChannelLayer",
+        "CONFIG": {
+            "hosts": [(env('REDIS_HOST', default='redis'), env.int('REDIS_PORT', default=6379))],
+        },
+    },
+}
+
+# Logging - enhanced configuration for production environment
+LOG_LEVEL = env('LOG_LEVEL', default='ERROR')
+LOG_FILE = env('LOG_FILE', default=os.path.join(BASE_DIR, 'logs', 'django-errors.log'))
+
 LOGGING = {
     'version': 1,
     'disable_existing_loggers': False,
@@ -56,39 +113,92 @@ LOGGING = {
             'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
             'style': '{',
         },
+        'simple': {
+            'format': '{levelname} {message}',
+            'style': '{',
+        },
+    },
+    'filters': {
+        'require_debug_false': {
+            '()': 'django.utils.log.RequireDebugFalse',
+        },
     },
     'handlers': {
         'console': {
-            'level': 'ERROR',
+            'level': LOG_LEVEL,
             'class': 'logging.StreamHandler',
             'formatter': 'verbose',
         },
         'file': {
-            'level': 'ERROR',
+            'level': LOG_LEVEL,
             'class': 'logging.FileHandler',
-            'filename': os.path.join(BASE_DIR, 'logs', 'django-errors.log'),
+            'filename': LOG_FILE,
             'formatter': 'verbose',
         },
+        'mail_admins': {
+            'level': 'ERROR',
+            'filters': ['require_debug_false'],
+            'class': 'django.utils.log.AdminEmailHandler',
+        },
     },
     'loggers': {
         'django': {
             'handlers': ['console', 'file'],
-            'level': 'ERROR',
+            'level': LOG_LEVEL,
             'propagate': True,
         },
+        'django.request': {
+            'handlers': ['mail_admins', 'file'],
+            'level': 'ERROR',
+            'propagate': False,
+        },
+        'django.security': {
+            'handlers': ['mail_admins', 'file'],
+            'level': 'ERROR',
+            'propagate': False,
+        },
+        'django.db.backends': {
+            'handlers': ['console', 'file'],
+            'level': env('DB_LOG_LEVEL', default='ERROR'),
+            'propagate': False,
+        },
         'dashboard': {
             'handlers': ['console', 'file'],
-            'level': 'ERROR',
+            'level': LOG_LEVEL,
+            'propagate': True,
+        },
+        'bot_management': {
+            'handlers': ['console', 'file'],
+            'level': LOG_LEVEL,
+            'propagate': True,
+        },
+        'api': {
+            'handlers': ['console', 'file'],
+            'level': LOG_LEVEL,
+            'propagate': True,
+        },
+        'realtime': {
+            'handlers': ['console', 'file'],
+            'level': LOG_LEVEL,
             'propagate': True,
         },
     },
 }
 
 # Email configuration (using environment variables)
-EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
-EMAIL_HOST = env('EMAIL_HOST')
+EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
+EMAIL_HOST = env('EMAIL_HOST', default='')
 EMAIL_PORT = env.int('EMAIL_PORT', default=587)
 EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
-EMAIL_HOST_USER = env('EMAIL_HOST_USER')
-EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
-DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default=EMAIL_HOST_USER)
\ No newline at end of file
+EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
+EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
+DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default=EMAIL_HOST_USER)
+
+# Performance optimizations
+DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB
+FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB
+ATOMIC_REQUESTS = True
+
+# Custom settings for production
+DISCORD_BOT_AUTO_START = env.bool('DISCORD_BOT_AUTO_START', default=True)
+MAX_DISCORD_BOTS_PER_USER = env.int('MAX_DISCORD_BOTS_PER_USER', default=5)
\ No newline at end of file
diff --git a/config/urls.py b/config/urls.py
index 7c45cb6..b030374 100644
--- a/config/urls.py
+++ b/config/urls.py
@@ -7,8 +7,10 @@ from django.urls import path, include
 from django.conf.urls.static import static
 from django.views.generic import RedirectView
 from rest_framework.authtoken.views import obtain_auth_token
+from config.health_views import health_check
 
 urlpatterns = [
+    path('health/', health_check, name='health_check'),
     path('admin/', admin.site.urls),
     path('dashboard/', include(('dashboard.urls', 'dashboard'), namespace='dashboard')),
     path('bots/', include(('bot_management.urls', 'bot_management'), namespace='bot_management')),
diff --git a/dashboard/models.py b/dashboard/models.py
index bb4e068..27238a9 100644
--- a/dashboard/models.py
+++ b/dashboard/models.py
@@ -1,5 +1,8 @@
 from django.db import models
 from django.contrib.auth.models import User
+from django.db.models.signals import post_save
+from django.dispatch import receiver
+from django.core.serializers.json import DjangoJSONEncoder
 
 class Bot(models.Model):
     """Discord bot model."""
@@ -9,6 +12,7 @@ class Bot(models.Model):
     owner = models.ForeignKey(User, on_delete=models.CASCADE)
     avatar = models.ImageField(upload_to='bot_avatars/', blank=True, null=True)
     prefix = models.CharField(max_length=10, default='!')
+    is_active = models.BooleanField(default=True)
     created_at = models.DateTimeField(auto_now_add=True)
     updated_at = models.DateTimeField(auto_now=True)
     
@@ -54,4 +58,79 @@ class CommandExecution(models.Model):
     executed_at = models.DateTimeField(auto_now_add=True)
     
     def __str__(self):
-        return f"{self.command.name} by {self.user_name} in {self.server_name}"
\ No newline at end of file
+        return f"{self.command.name} by {self.user_name} in {self.server_name}"
+
+
+class UserSettings(models.Model):
+    """Model for storing user-specific settings"""
+    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='settings')
+    
+    # UI preferences
+    enable_dark_mode = models.BooleanField(default=False)
+    dashboard_layout = models.CharField(
+        max_length=20, 
+        choices=[
+            ('default', 'Default'),
+            ('compact', 'Compact'),
+            ('expanded', 'Expanded')
+        ],
+        default='default'
+    )
+    
+    # Notification settings
+    email_notifications = models.BooleanField(default=True)
+    discord_notifications = models.BooleanField(default=True)
+    
+    # Notification types
+    notify_on_bot_status_change = models.BooleanField(default=True)
+    notify_on_server_join = models.BooleanField(default=True)
+    notify_on_command_usage = models.BooleanField(default=False)
+    notify_on_error = models.BooleanField(default=True)
+    
+    # Custom preferences stored as JSON
+    preferences = models.JSONField(default=dict, encoder=DjangoJSONEncoder)
+    
+    # Timestamps
+    created_at = models.DateTimeField(auto_now_add=True)
+    updated_at = models.DateTimeField(auto_now=True)
+    
+    def __str__(self):
+        return f"Settings for {self.user.username}"
+    
+    def get_preference(self, key, default=None):
+        """Get a custom preference by key"""
+        return self.preferences.get(key, default)
+    
+    def set_preference(self, key, value):
+        """Set a custom preference"""
+        if not self.preferences:
+            self.preferences = {}
+        
+        self.preferences[key] = value
+        self.save(update_fields=['preferences', 'updated_at'])
+        
+        return True
+    
+    def delete_preference(self, key):
+        """Delete a custom preference"""
+        if not self.preferences or key not in self.preferences:
+            return False
+        
+        del self.preferences[key]
+        self.save(update_fields=['preferences', 'updated_at'])
+        
+        return True
+
+@receiver(post_save, sender=User)
+def create_user_settings(sender, instance, created, **kwargs):
+    """Create UserSettings when a new User is created"""
+    if created:
+        UserSettings.objects.create(user=instance)
+
+@receiver(post_save, sender=User)
+def save_user_settings(sender, instance, **kwargs):
+    """Ensure UserSettings is saved when User is saved"""
+    try:
+        instance.settings.save()
+    except UserSettings.DoesNotExist:
+        UserSettings.objects.create(user=instance)
\ No newline at end of file
diff --git a/dashboard/templates/dashboard/new_base.html b/dashboard/templates/dashboard/new_base.html
index 1773608..47e7cd4 100644
--- a/dashboard/templates/dashboard/new_base.html
+++ b/dashboard/templates/dashboard/new_base.html
@@ -1,6 +1,6 @@
 {% load static %}
 <!DOCTYPE html>
-<html lang="en" x-data="{ darkMode: localStorage.getItem('darkMode') === 'true' }" x-bind:class="{ 'dark': darkMode }">
+<html lang="en" x-data="{ darkMode: localStorage.getItem('darkMode') === 'true', sidebarOpen: false }" x-bind:class="{ 'dark': darkMode }">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
@@ -26,6 +26,9 @@
                             800: '#3730a3',
                             900: '#312e81',
                         }
+                    },
+                    animation: {
+                        'spin-slow': 'spin 3s linear infinite',
                     }
                 }
             }
@@ -44,6 +47,26 @@
             content: "/";
             @apply text-gray-400 dark:text-gray-500 mx-2;
         }
+
+        /* Sidebar transition */
+        .sidebar-transition {
+            transition: transform 0.3s ease, width 0.3s ease, margin-left 0.3s ease;
+        }
+
+        /* Custom scrollbar */
+        ::-webkit-scrollbar {
+            width: 8px;
+            height: 8px;
+        }
+        ::-webkit-scrollbar-track {
+            @apply bg-gray-100 dark:bg-gray-800;
+        }
+        ::-webkit-scrollbar-thumb {
+            @apply bg-gray-300 dark:bg-gray-600 rounded-full;
+        }
+        ::-webkit-scrollbar-thumb:hover {
+            @apply bg-gray-400 dark:bg-gray-500;
+        }
     </style>
 </head>
 <body class="min-h-screen flex flex-col dark-transition bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
@@ -53,150 +76,256 @@
     <!-- Path tracking system -->
     <div x-data="pathTracker" x-init="trackCurrentPath" class="path-tracker"></div>
     
-    <nav class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
-        <div class="container mx-auto px-4">
-            <div class="flex justify-between items-center py-4">
-                <!-- Logo and Desktop Navigation -->
-                <div class="flex items-center space-x-8">
-                    <a href="{% url 'dashboard:index' %}" class="flex items-center space-x-2">
-                        <i class="fas fa-cube text-primary-600 dark:text-primary-400 text-2xl"></i>
-                        <span class="text-xl font-bold text-gray-900 dark:text-white">Social Cube</span>
-                    </a>
-                    {% if user.is_authenticated %}
-                    <nav class="hidden md:flex space-x-6">
-                        <a href="{% url 'dashboard:index' %}" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'index' %}text-primary-600 dark:text-primary-400{% endif %}">
-                            <i class="fas fa-tachometer-alt mr-1"></i>儀表板
-                        </a>
-                        <a href="{% url 'dashboard:bot:list' %}" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 {% if 'bot' in request.resolver_match.namespaces %}text-primary-600 dark:text-primary-400{% endif %}">
-                            <i class="fas fa-robot mr-1"></i>機器人
-                        </a>
-                        <a href="{% url 'dashboard:servers' %}" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'servers' %}text-primary-600 dark:text-primary-400{% endif %}">
-                            <i class="fas fa-server mr-1"></i>伺服器
-                        </a>
-                        <a href="{% url 'dashboard:stats' %}" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'stats' %}text-primary-600 dark:text-primary-400{% endif %}">
-                            <i class="fas fa-chart-line mr-1"></i>統計
-                        </a>
-                    </nav>
-                    {% endif %}
+    <!-- Mobile menu backdrop -->
+    <div x-show="sidebarOpen" 
+         x-transition:enter="transition-opacity ease-linear duration-300" 
+         x-transition:enter-start="opacity-0" 
+         x-transition:enter-end="opacity-100" 
+         x-transition:leave="transition-opacity ease-linear duration-300" 
+         x-transition:leave-start="opacity-100" 
+         x-transition:leave-end="opacity-0" 
+         @click="sidebarOpen = false" 
+         class="fixed inset-0 bg-gray-900/50 z-40 md:hidden"></div>
+    
+    <!-- Sidebar / Mobile Navigation -->
+    <aside x-bind:class="{'translate-x-0': sidebarOpen, '-translate-x-full': !sidebarOpen, 'md:translate-x-0': true}"
+         class="fixed inset-y-0 left-0 z-50 w-64 transform transition-transform duration-300 ease-in-out md:relative md:w-72 lg:w-80 flex-shrink-0 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 shadow-md md:shadow-none">
+        <!-- Sidebar header with logo -->
+        <div class="h-16 flex items-center justify-between px-4 border-b border-gray-200 dark:border-gray-700">
+            <a href="{% url 'dashboard:index' %}" class="flex items-center space-x-2">
+                <i class="fas fa-cube text-primary-600 dark:text-primary-400 text-2xl"></i>
+                <span class="text-xl font-bold text-gray-900 dark:text-white">Social Cube</span>
+            </a>
+            <button @click="sidebarOpen = false" class="md:hidden text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
+                <i class="fas fa-times text-xl"></i>
+            </button>
+        </div>
+        
+        <!-- Sidebar content -->
+        <div class="h-full overflow-y-auto py-4 px-3">
+            {% if user.is_authenticated %}
+            <!-- User info card -->
+            <div class="flex items-center p-3 mb-5 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
+                <div class="flex-shrink-0 mr-3">
+                    <div class="h-10 w-10 rounded-full bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center">
+                        <i class="fas fa-user text-primary-600 dark:text-primary-400"></i>
+                    </div>
                 </div>
-
-                <!-- User Menu & Theme Toggle (Desktop) -->
-                <div class="hidden md:flex items-center space-x-4">
-                    <!-- Dark Mode Toggle -->
+                <div class="flex-1 min-w-0">
+                    <p class="text-sm font-medium text-gray-800 dark:text-gray-200 truncate">{{ user.username }}</p>
+                    <p class="text-xs text-gray-500 dark:text-gray-400 truncate">{{ user.email }}</p>
+                </div>
+                <div>
                     <button @click="darkMode = !darkMode; localStorage.setItem('darkMode', darkMode)" 
-                            class="p-2 rounded-full text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700" 
-                            title="切換深淺色模式">
+                           class="p-2 text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400" 
+                           title="切換深淺色模式">
                         <i class="fas fa-sun text-yellow-500 dark:hidden"></i>
                         <i class="fas fa-moon text-blue-300 hidden dark:block"></i>
                     </button>
+                </div>
+            </div>
+            
+            <!-- Main Navigation -->
+            <div class="space-y-1">
+                <p class="px-4 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">主選單</p>
+                <a href="{% url 'dashboard:index' %}" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors {% if request.resolver_match.url_name == 'index' %}text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20{% else %}text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700{% endif %}">
+                    <i class="fas fa-tachometer-alt w-5 h-5 mr-3 text-center"></i>
+                    <span>儀表板</span>
+                </a>
+                <a href="{% url 'dashboard:bot:list' %}" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors {% if 'bot' in request.resolver_match.namespaces and request.resolver_match.url_name == 'list' %}text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20{% else %}text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700{% endif %}">
+                    <i class="fas fa-robot w-5 h-5 mr-3 text-center"></i>
+                    <span>機器人</span>
+                </a>
+                <a href="{% url 'dashboard:bot:overview' %}" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors {% if 'bot' in request.resolver_match.namespaces and request.resolver_match.url_name == 'overview' %}text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20{% else %}text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700{% endif %}">
+                    <i class="fas fa-th-large w-5 h-5 mr-3 text-center"></i>
+                    <span>機器人總覽</span>
+                </a>
+                <a href="{% url 'dashboard:servers' %}" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors {% if request.resolver_match.url_name == 'servers' %}text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20{% else %}text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700{% endif %}">
+                    <i class="fas fa-server w-5 h-5 mr-3 text-center"></i>
+                    <span>伺服器</span>
+                </a>
+                <a href="{% url 'dashboard:stats' %}" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors {% if request.resolver_match.url_name == 'stats' %}text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20{% else %}text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700{% endif %}">
+                    <i class="fas fa-chart-line w-5 h-5 mr-3 text-center"></i>
+                    <span>統計</span>
+                </a>
+            </div>
+            
+            <!-- Tools Section -->
+            <div class="mt-8 space-y-1">
+                <p class="px-4 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">工具</p>
+                <a href="{% url 'dashboard:bot:add' %}" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">
+                    <i class="fas fa-plus w-5 h-5 mr-3 text-center"></i>
+                    <span>添加機器人</span>
+                </a>
+                <a href="{% url 'dashboard:user_settings' %}" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors {% if request.resolver_match.url_name == 'user_settings' %}text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20{% else %}text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700{% endif %}">
+                    <i class="fas fa-cog w-5 h-5 mr-3 text-center"></i>
+                    <span>設定</span>
+                </a>
+                <a href="{% url 'dashboard:profile' %}" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">
+                    <i class="fas fa-user-cog w-5 h-5 mr-3 text-center"></i>
+                    <span>個人資料</span>
+                </a>
+            </div>
 
-                    {% if user.is_authenticated %}
-                    <a href="{% url 'dashboard:bot:add' %}" class="bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors">
-                        <i class="fas fa-plus mr-1"></i>添加機器人
-                    </a>
-                    <div class="relative" x-data="{ open: false }">
-                        <button @click="open = !open" class="flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400">
-                            <span class="text-sm font-medium">{{ user.username }}</span>
-                            <i class="fas fa-chevron-down text-xs"></i>
+            <!-- Help Section -->
+            <div class="mt-8 space-y-1">
+                <p class="px-4 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">支援</p>
+                <a href="#" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">
+                    <i class="fas fa-question-circle w-5 h-5 mr-3 text-center"></i>
+                    <span>說明文件</span>
+                </a>
+                <a href="#" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">
+                    <i class="fas fa-bug w-5 h-5 mr-3 text-center"></i>
+                    <span>回報問題</span>
+                </a>
+            </div>
+            
+            <!-- Logout Section -->
+            <div class="mt-8 space-y-1">
+                <a href="{% url 'dashboard:logout' %}" class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20">
+                    <i class="fas fa-sign-out-alt w-5 h-5 mr-3 text-center"></i>
+                    <span>登出</span>
+                </a>
+            </div>
+            {% else %}
+            <!-- Not authenticated -->
+            <div class="p-4 text-center">
+                <p class="text-gray-600 dark:text-gray-300 mb-4">請登入以使用完整功能</p>
+                <a href="{% url 'dashboard:oauth2_login' %}" class="inline-flex items-center justify-center w-full py-2.5 px-4 bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white rounded-lg transition-colors">
+                    <i class="fab fa-discord mr-2"></i>
+                    <span>Discord 登入</span>
+                </a>
+            </div>
+            {% endif %}
+        </div>
+    </aside>
+    
+    <!-- Main content wrapper -->
+    <div class="flex-1 flex flex-col md:ml-72 lg:ml-80">
+        <!-- Top Navigation Bar -->
+        <header class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 shadow-sm">
+            <div class="px-4 sm:px-6 lg:px-8">
+                <div class="flex items-center justify-between h-16">
+                    <!-- Left: Mobile menu button and breadcrumb on larger screens -->
+                    <div class="flex items-center">
+                        <!-- Mobile menu button -->
+                        <button @click="sidebarOpen = !sidebarOpen" type="button" class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline-none">
+                            <i class="fas fa-bars"></i>
                         </button>
-                        <div x-show="open" @click.away="open = false" class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg py-2 border border-gray-200 dark:border-gray-700">
-                            <a href="{% url 'dashboard:servers' %}" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
-                                <i class="fas fa-user mr-2"></i>個人資料
-                            </a>
-                            <a href="{% url 'dashboard:logout' %}" class="block px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20">
-                                <i class="fas fa-sign-out-alt mr-2"></i>登出
-                            </a>
-                        </div>
+                        
+                        <!-- Page title - shows on mobile only -->
+                        <h1 class="ml-2 text-lg font-medium md:hidden text-gray-900 dark:text-white">{% block mobile_title %}Social Cube{% endblock %}</h1>
                     </div>
-                    {% else %}
-                    <a href="{% url 'dashboard:oauth2_login' %}" class="bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors">
-                        <i class="fab fa-discord mr-1"></i>Discord 登入
-                    </a>
-                    {% endif %}
-                </div>
-
-                <!-- Mobile Menu Button -->
-                <div class="md:hidden flex items-center space-x-2">
-                    <!-- Dark Mode Toggle (Mobile) -->
-                    <button @click="darkMode = !darkMode; localStorage.setItem('darkMode', darkMode)" 
-                            class="p-2 rounded-full text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700" 
-                            title="切換深淺色模式">
-                        <i class="fas fa-sun text-yellow-500 dark:hidden"></i>
-                        <i class="fas fa-moon text-blue-300 hidden dark:block"></i>
-                    </button>
                     
-                    <!-- Menu Toggle -->
-                    <button type="button" onclick="toggleMobileMenu()" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400">
-                        <i class="fas fa-bars text-xl"></i>
-                    </button>
+                    <!-- Right: User Menu (Mobile and Desktop) -->
+                    <div class="flex items-center">
+                        {% if user.is_authenticated %}
+                        <!-- Quick add button -->
+                        <a href="{% url 'dashboard:bot:add' %}" class="mr-4 bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white px-3 py-1.5 text-sm rounded-lg hidden sm:flex items-center transition-colors">
+                            <i class="fas fa-plus mr-1"></i>
+                            <span>添加機器人</span>
+                        </a>
+                        
+                        <!-- Help button (hidden on small screens) -->
+                        <button class="mr-3 hidden sm:flex p-1.5 rounded-full text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white">
+                            <i class="fas fa-question-circle text-lg"></i>
+                        </button>
+                        
+                        <!-- Notifications button (hidden on small screens) -->
+                        <button class="mr-3 hidden sm:flex p-1.5 rounded-full text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white">
+                            <i class="fas fa-bell text-lg"></i>
+                        </button>
+                        
+                        <!-- User dropdown -->
+                        <div class="relative" x-data="{ open: false }">
+                            <button @click="open = !open" class="flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400">
+                                <div class="hidden sm:block">
+                                    <span class="text-sm font-medium">{{ user.username }}</span>
+                                </div>
+                                <div class="h-8 w-8 rounded-full bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center">
+                                    <i class="fas fa-user text-primary-600 dark:text-primary-400"></i>
+                                </div>
+                            </button>
+                            
+                            <div x-show="open" 
+                                @click.away="open = false" 
+                                x-transition:enter="transition ease-out duration-100" 
+                                x-transition:enter-start="transform opacity-0 scale-95" 
+                                x-transition:enter-end="transform opacity-100 scale-100" 
+                                x-transition:leave="transition ease-in duration-75" 
+                                x-transition:leave-start="transform opacity-100 scale-100" 
+                                x-transition:leave-end="transform opacity-0 scale-95" 
+                                class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg py-2 border border-gray-200 dark:border-gray-700 z-50">
+                                
+                                <a href="{% url 'dashboard:profile' %}" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
+                                    <i class="fas fa-user mr-2"></i>個人資料
+                                </a>
+                                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
+                                    <i class="fas fa-cog mr-2"></i>帳戶設定
+                                </a>
+                                <hr class="my-1 border-gray-200 dark:border-gray-700">
+                                <a href="{% url 'dashboard:logout' %}" class="block px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20">
+                                    <i class="fas fa-sign-out-alt mr-2"></i>登出
+                                </a>
+                            </div>
+                        </div>
+                        {% else %}
+                        <a href="{% url 'dashboard:oauth2_login' %}" class="bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
+                            <i class="fab fa-discord mr-1"></i>
+                            <span>Discord 登入</span>
+                        </a>
+                        {% endif %}
+                    </div>
                 </div>
             </div>
+        </header>
 
-            <!-- Mobile Menu -->
-            <div id="mobileMenu" class="hidden md:hidden">
-                <nav class="py-4">
-                    {% if user.is_authenticated %}
-                    <a href="{% url 'dashboard:index' %}" class="block py-2 px-4 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'index' %}text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-700{% endif %}">
-                        <i class="fas fa-tachometer-alt mr-2"></i>儀表板
-                    </a>
-                    <a href="{% url 'dashboard:bot:list' %}" class="block py-2 px-4 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-primary-600 dark:hover:text-primary-400 {% if 'bot' in request.resolver_match.namespaces %}text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-700{% endif %}">
-                        <i class="fas fa-robot mr-2"></i>機器人
-                    </a>
-                    <a href="{% url 'dashboard:servers' %}" class="block py-2 px-4 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'servers' %}text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-700{% endif %}">
-                        <i class="fas fa-server mr-2"></i>伺服器
-                    </a>
-                    <a href="{% url 'dashboard:stats' %}" class="block py-2 px-4 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-primary-600 dark:hover:text-primary-400 {% if request.resolver_match.url_name == 'stats' %}text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-700{% endif %}">
-                        <i class="fas fa-chart-line mr-2"></i>統計
-                    </a>
-                    <a href="{% url 'dashboard:bot:add' %}" class="block py-2 px-4 text-primary-600 dark:text-primary-400 hover:bg-primary-50 dark:hover:bg-primary-900/20">
-                        <i class="fas fa-plus mr-2"></i>添加機器人
-                    </a>
-                    <hr class="my-2 border-gray-200 dark:border-gray-700">
-                    <a href="{% url 'dashboard:logout' %}" class="block py-2 px-4 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20">
-                        <i class="fas fa-sign-out-alt mr-2"></i>登出
-                    </a>
-                    {% else %}
-                    <a href="{% url 'dashboard:oauth2_login' %}" class="block py-2 px-4 text-primary-600 dark:text-primary-400 hover:bg-primary-50 dark:hover:bg-primary-900/20">
-                        <i class="fab fa-discord mr-2"></i>Discord 登入
-                    </a>
-                    {% endif %}
-                </nav>
+        <!-- Breadcrumb navigation -->
+        <div class="bg-gray-100 dark:bg-gray-800 py-2 px-4 border-b border-gray-200 dark:border-gray-700">
+            <div class="container mx-auto">
+                <ol class="flex flex-wrap text-sm text-gray-600 dark:text-gray-400">
+                    <li class="breadcrumb-item">
+                        <a href="{% url 'dashboard:index' %}" class="hover:text-primary-600 dark:hover:text-primary-400">
+                            <i class="fas fa-home"></i>
+                        </a>
+                    </li>
+                    {% block breadcrumb %}
+                    {% endblock %}
+                </ol>
             </div>
         </div>
-    </nav>
 
-    <!-- Breadcrumb navigation -->
-    <div class="bg-gray-100 dark:bg-gray-800 py-2 px-4 border-b border-gray-200 dark:border-gray-700 mb-4">
-        <div class="container mx-auto">
-            <ol class="flex flex-wrap text-sm text-gray-600 dark:text-gray-400">
-                <li class="breadcrumb-item">
-                    <a href="{% url 'dashboard:index' %}" class="hover:text-primary-600 dark:hover:text-primary-400">
-                        <i class="fas fa-home"></i>
-                    </a>
-                </li>
-                {% block breadcrumb %}
-                {% endblock %}
-            </ol>
+        <!-- Page heading with actions (desktop only) -->
+        <div class="hidden md:block bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
+            <div class="px-6 py-4">
+                <div class="flex items-center justify-between">
+                    <h1 class="text-2xl font-bold text-gray-900 dark:text-white">{% block page_title %}{% endblock %}</h1>
+                    <div class="flex space-x-3">
+                        {% block page_actions %}{% endblock %}
+                    </div>
+                </div>
+            </div>
         </div>
-    </div>
 
-    <main class="flex-grow">
-        {% if messages %}
-        <div class="container mx-auto px-4 mt-4">
-            {% for message in messages %}
-            <div class="p-4 mb-4 rounded-lg {% if message.tags == 'success' %}bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400{% elif message.tags == 'error' %}bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400{% else %}bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400{% endif %}">
-                {{ message }}
+        <!-- Main content area -->
+        <main class="flex-grow">
+            {% if messages %}
+            <div class="px-4 sm:px-6 lg:px-8 py-4">
+                {% for message in messages %}
+                <div class="p-4 mb-4 rounded-lg {% if message.tags == 'success' %}bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400{% elif message.tags == 'error' %}bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400{% else %}bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400{% endif %}">
+                    {{ message }}
+                </div>
+                {% endfor %}
             </div>
-            {% endfor %}
-        </div>
-        {% endif %}
-        
-        {% block content %}{% endblock %}
-    </main>
+            {% endif %}
+            
+            {% block content %}{% endblock %}
+        </main>
 
-    <footer class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-8 py-6">
-        <div class="container mx-auto px-4">
-            <div class="flex flex-col md:flex-row justify-between items-center">
+        <!-- Footer -->
+        <footer class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-auto py-6">
+            <div class="px-4 sm:px-6 lg:px-8">
+                <div class="flex flex-col md:flex-row justify-between items-center">
                 <div class="flex items-center space-x-2 mb-4 md:mb-0">
                     <i class="fas fa-cube text-primary-600 dark:text-primary-400"></i>
                     <span class="text-gray-600 dark:text-gray-400">&copy; 2025 Social Cube</span>
diff --git a/dashboard/templates/dashboard/new_bots.html b/dashboard/templates/dashboard/new_bots.html
index e35c969..5119c3f 100644
--- a/dashboard/templates/dashboard/new_bots.html
+++ b/dashboard/templates/dashboard/new_bots.html
@@ -8,7 +8,7 @@
     <!-- Breadcrumb -->
     <nav aria-label="breadcrumb" class="mb-4">
         <ol class="breadcrumb">
-            <li class="breadcrumb-item"><a href="{% url 'dashboard' %}">儀表板</a></li>
+            <li class="breadcrumb-item"><a href="{% url 'dashboard:index' %}">儀表板</a></li>
             <li class="breadcrumb-item active">機器人管理</li>
         </ol>
     </nav>
@@ -16,9 +16,14 @@
     <!-- Header -->
     <div class="d-flex justify-content-between align-items-center mb-4">
         <h1 class="h3 mb-0">機器人管理</h1>
-        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBotModal">
-            <i class="fas fa-plus me-2"></i>新增機器人
-        </button>
+        <div>
+            <a href="{% url 'dashboard:bot:overview' %}" class="btn btn-outline-primary me-2">
+                <i class="fas fa-th-large me-1"></i>總覽儀表板
+            </a>
+            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBotModal">
+                <i class="fas fa-plus me-2"></i>新增機器人
+            </button>
+        </div>
     </div>
 
     <!-- Search and Filters -->
diff --git a/dashboard/templates/dashboard/new_index.html b/dashboard/templates/dashboard/new_index.html
index af67c2d..6932156 100644
--- a/dashboard/templates/dashboard/new_index.html
+++ b/dashboard/templates/dashboard/new_index.html
@@ -107,6 +107,80 @@
             </div>
         </div>
 
+        <!-- BOT Status Cards -->
+        <div class="mb-8">
+            <h2 class="text-xl font-bold text-gray-800 dark:text-white mb-4">機器人狀態</h2>
+            
+            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
+                <!-- Bot status cards -->
+                {% for bot_status in bot_statuses %}
+                <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700 overflow-hidden">
+                    <!-- Header with status indicator -->
+                    <div class="border-b border-gray-200 dark:border-gray-700 p-4 flex justify-between items-center">
+                        <div class="flex items-center">
+                            <div class="mr-3 h-10 w-10 rounded-full bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center">
+                                <i class="fas fa-robot text-primary-600 dark:text-primary-400"></i>
+                            </div>
+                            <div>
+                                <h3 class="font-medium text-gray-800 dark:text-white truncate max-w-[180px]">{{ bot_status.bot.name }}</h3>
+                                <div class="flex items-center">
+                                    <span class="inline-flex h-2 w-2 rounded-full {% if bot_status.bot.is_active %}bg-green-500{% else %}bg-red-500{% endif %} mr-1"></span>
+                                    <span class="text-xs text-gray-500 dark:text-gray-400">{% if bot_status.bot.is_active %}在線{% else %}離線{% endif %}</span>
+                                </div>
+                            </div>
+                        </div>
+                        <div>
+                            <a href="{% url 'dashboard:bot:detail' bot_status.bot.id %}" class="text-primary-600 dark:text-primary-400 hover:underline">
+                                <i class="fas fa-external-link-alt"></i>
+                            </a>
+                        </div>
+                    </div>
+                    
+                    <!-- Bot metrics -->
+                    <div class="p-4">
+                        <div class="grid grid-cols-2 gap-4">
+                            <div class="text-center p-2 bg-gray-50 dark:bg-gray-700/50 rounded">
+                                <p class="text-xs text-gray-500 dark:text-gray-400 mb-1">伺服器</p>
+                                <p class="text-lg font-bold text-gray-800 dark:text-white">{{ bot_status.servers }}</p>
+                            </div>
+                            <div class="text-center p-2 bg-gray-50 dark:bg-gray-700/50 rounded">
+                                <p class="text-xs text-gray-500 dark:text-gray-400 mb-1">命令</p>
+                                <p class="text-lg font-bold text-gray-800 dark:text-white">{{ bot_status.commands }}</p>
+                            </div>
+                        </div>
+                        
+                        <!-- Action buttons -->
+                        <div class="mt-4 flex justify-between">
+                            {% if bot_status.bot.is_active %}
+                            <button type="button" class="px-3 py-2 text-xs text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 rounded hover:bg-red-100 dark:hover:bg-red-900/40 transition-colors">
+                                <i class="fas fa-stop-circle mr-1"></i> 停止
+                            </button>
+                            {% else %}
+                            <button type="button" class="px-3 py-2 text-xs text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20 rounded hover:bg-green-100 dark:hover:bg-green-900/40 transition-colors">
+                                <i class="fas fa-play-circle mr-1"></i> 啟動
+                            </button>
+                            {% endif %}
+                            <button type="button" class="px-3 py-2 text-xs text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20 rounded hover:bg-primary-100 dark:hover:bg-primary-900/40 transition-colors">
+                                <i class="fas fa-sync-alt mr-1"></i> 同步
+                            </button>
+                        </div>
+                    </div>
+                </div>
+                {% empty %}
+                <div class="col-span-full bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700 p-6 text-center">
+                    <div class="text-gray-500 dark:text-gray-400 mb-4">
+                        <i class="fas fa-robot text-4xl mb-3"></i>
+                        <p>您目前還沒有已添加的機器人</p>
+                    </div>
+                    <a href="{% url 'dashboard:bot:add' %}" class="inline-flex items-center justify-center px-4 py-2 bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white rounded transition-colors">
+                        <i class="fas fa-plus mr-2"></i>
+                        <span>添加機器人</span>
+                    </a>
+                </div>
+                {% endfor %}
+            </div>
+        </div>
+        
         <!-- 兩欄式佈局 -->
         <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
             <!-- 左側 (2/3寬度) -->
@@ -197,23 +271,27 @@
                                             </div>
                                             <div>
                                                 <h4 class="text-sm font-medium text-gray-800 dark:text-gray-200">{{ bot.name }}</h4>
-                                                <p class="text-xs text-gray-500 dark:text-gray-400">
-                                                    {% if bot.is_active %}
-                                                        <span class="text-green-500 dark:text-green-400">
-                                                            <i class="fas fa-circle text-xs"></i> 運行中
-                                                        </span>
-                                                    {% else %}
-                                                        <span class="text-gray-400 dark:text-gray-500">
-                                                            <i class="fas fa-circle text-xs"></i> 已停止
-                                                        </span>
-                                                    {% endif %}
-                                                </p>
+                                                <div class="flex items-center mt-1">
+                                                    <span class="inline-flex h-2 w-2 rounded-full {% if bot.is_active %}bg-green-500{% else %}bg-red-500{% endif %} mr-1"></span>
+                                                    <p class="text-xs text-gray-500 dark:text-gray-400">
+                                                        {% if bot.is_active %}在線{% else %}離線{% endif %}
+                                                        {% if bot.guilds.count %} • {{ bot.guilds.count }} 個伺服器{% endif %}
+                                                        {% if bot.command_count %} • {{ bot.command_count }} 個命令{% endif %}
+                                                    </p>
+                                                </div>
                                             </div>
                                         </div>
                                         <a href="{% url 'dashboard:bot:detail' bot.id %}" class="text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300">
                                             <i class="fas fa-chevron-right"></i>
                                         </a>
                                     </li>
+                                {% empty %}
+                                    <li class="p-4 text-center text-gray-500 dark:text-gray-400">
+                                        <p>尚未添加機器人</p>
+                                        <a href="{% url 'dashboard:bot:add' %}" class="mt-2 inline-block text-primary-600 dark:text-primary-400 hover:underline">
+                                            <i class="fas fa-plus mr-1"></i>添加機器人
+                                        </a>
+                                    </li>
                                 {% endfor %}
                             </ul>
                         {% else %}
diff --git a/dashboard/templates/dashboard/new_servers.html b/dashboard/templates/dashboard/new_servers.html
index e653c91..426608a 100644
--- a/dashboard/templates/dashboard/new_servers.html
+++ b/dashboard/templates/dashboard/new_servers.html
@@ -110,12 +110,12 @@
                         </div>
                         
                         <div class="mt-4 flex space-x-2">
-                            <a href="{% url 'dashboard:server:detail' server.id %}" class="flex-1 bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white py-2 px-3 rounded text-sm text-center transition-colors">
+                            <a href="{% url 'dashboard:server_detail' server.id %}" class="flex-1 bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white py-2 px-3 rounded text-sm text-center transition-colors">
                                 管理
                             </a>
-                            <button type="button" data-server-id="{{ server.id }}" class="server-settings-btn flex items-center justify-center w-10 h-10 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-300 rounded transition-colors">
+                            <a href="{% url 'dashboard:server_edit' server.id %}" class="flex items-center justify-center w-10 h-10 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-300 rounded transition-colors">
                                 <i class="fas fa-cog"></i>
-                            </button>
+                            </a>
                         </div>
                     </div>
                 </div>
diff --git a/dashboard/templates/dashboard/profile.html b/dashboard/templates/dashboard/profile.html
index 1afdb57..6044c57 100644
--- a/dashboard/templates/dashboard/profile.html
+++ b/dashboard/templates/dashboard/profile.html
@@ -1,4 +1,4 @@
-{% extends 'dashboard/base.html' %}
+{% extends 'dashboard/new_base.html' %}
 {% load static %}
 
 {% block content %}
@@ -69,11 +69,56 @@
                 </div>
             {% endif %}
             
-            <div class="mt-8 text-center">
-                <a href="{% url 'account_logout' %}" 
-                   class="inline-block bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors">
-                    Logout
-                </a>
+            <!-- Edit Profile Form -->
+            <div class="mt-8">
+                <h3 class="text-xl font-semibold mb-4 border-b pb-2">Edit Profile</h3>
+                
+                <form method="post" class="space-y-4">
+                    {% csrf_token %}
+                    <input type="hidden" name="update_profile" value="1">
+                    
+                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
+                        <div>
+                            <label for="{{ profile_form.first_name.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
+                            {{ profile_form.first_name }}
+                            {% if profile_form.first_name.errors %}
+                                <p class="text-red-500 text-xs mt-1">{{ profile_form.first_name.errors.0 }}</p>
+                            {% endif %}
+                        </div>
+                        
+                        <div>
+                            <label for="{{ profile_form.last_name.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
+                            {{ profile_form.last_name }}
+                            {% if profile_form.last_name.errors %}
+                                <p class="text-red-500 text-xs mt-1">{{ profile_form.last_name.errors.0 }}</p>
+                            {% endif %}
+                        </div>
+                    </div>
+                    
+                    <div>
+                        <label for="{{ profile_form.email.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
+                        {{ profile_form.email }}
+                        {% if profile_form.email.errors %}
+                            <p class="text-red-500 text-xs mt-1">{{ profile_form.email.errors.0 }}</p>
+                        {% endif %}
+                    </div>
+                    
+                    <div class="flex justify-between items-center pt-4">
+                        <a href="{% url 'dashboard:user_settings' %}" class="inline-block bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors">
+                            Dashboard Settings
+                        </a>
+                        
+                        <div>
+                            <button type="submit" class="inline-block bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition-colors">
+                                Save Changes
+                            </button>
+                            
+                            <a href="{% url 'account_logout' %}" class="inline-block ml-2 bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors">
+                                Logout
+                            </a>
+                        </div>
+                    </div>
+                </form>
             </div>
             
         {% else %}
diff --git a/dashboard/urls.py b/dashboard/urls.py
index c11446f..60b6666 100644
--- a/dashboard/urls.py
+++ b/dashboard/urls.py
@@ -6,6 +6,7 @@ app_name = 'dashboard'
 # Bot management URLs
 bot_patterns = [
     path('', views.bot_list, name='list'),
+    path('overview/', views.bot_overview, name='overview'),
     path('add/', views.bot_add, name='add'),
     path('<int:bot_id>/', views.bot_detail, name='detail'),
     path('<int:bot_id>/toggle/', views.bot_toggle, name='toggle'),
@@ -20,7 +21,10 @@ urlpatterns = [
     # Main views
     path('', views.index, name='index'),
     path('profile/', views.profile, name='profile'),
+    path('settings/', views.user_settings, name='user_settings'),
     path('servers/', views.server_list, name='servers'),
+    path('servers/<int:server_id>/', views.server_detail, name='server_detail'),
+    path('servers/<int:server_id>/edit/', views.server_edit, name='server_edit'),
     path('stats/', views.stats, name='stats'),
     
     # OAuth2 endpoints
diff --git a/dashboard/views.py b/dashboard/views.py
index 1c6d633..586394d 100644
--- a/dashboard/views.py
+++ b/dashboard/views.py
@@ -2,8 +2,10 @@ from django.shortcuts import render, redirect, get_object_or_404
 from django.contrib.auth.decorators import login_required
 from django.http import JsonResponse
 from django.core.paginator import Paginator
-from django.db.models import Count
-from .models import Bot, Command, CommandExecution
+from django.db.models import Count, Sum
+from django.contrib import messages
+from .models import Bot, Command, CommandExecution, UserSettings
+from .forms import UserSettingsForm, UserProfileForm
 import json
 import requests
 from datetime import datetime, timedelta
@@ -16,36 +18,83 @@ import secrets
 
 @login_required
 def index(request):
-    """Dashboard home view."""
+    """Dashboard home view with bot overview."""
     user_bots = Bot.objects.filter(owner=request.user)
     
     # Stats for dashboard overview
-    total_bots = user_bots.count()
-    total_commands = Command.objects.filter(bot__in=user_bots).count()
-    total_executions = CommandExecution.objects.filter(command__bot__in=user_bots).count()
+    bots_count = user_bots.count()
+    active_bots = user_bots.filter(is_active=True).count()
     
-    # Recent executions for activity feed
-    recent_executions = CommandExecution.objects.filter(
-        command__bot__in=user_bots
-    ).order_by('-executed_at')[:10]
+    # Get server statistics
+    servers_count = 0
+    total_members = 0
     
-    # Top commands by usage
-    top_commands = Command.objects.filter(
-        bot__in=user_bots
-    ).annotate(
-        execution_count=Count('commandexecution')
-    ).order_by('-execution_count')[:5]
+    # Get command statistics
+    total_commands = 0
+    commands_today = 0
+    
+    # Get bot status and metrics
+    bot_statuses = []
+    for bot in user_bots:
+        # Get bot status
+        status = bot.get_status() if hasattr(bot, 'get_status') else 'unknown'
+        
+        # Count commands for this bot
+        bot_commands = Command.objects.filter(bot=bot).count() if hasattr(bot, 'commands') else 0
+        total_commands += bot_commands
+        
+        # Count servers for this bot
+        bot_servers = 0
+        if hasattr(bot, 'guilds'):
+            bot_servers = bot.guilds.count()
+            servers_count += bot_servers
+            
+            # Sum up members
+            total_members += bot.guilds.aggregate(total=Sum('member_count')).get('total', 0) or 0
+        
+        # Get recent activity
+        recent_logs = []
+        if hasattr(bot, 'logs'):
+            recent_logs = bot.logs.all().order_by('-timestamp')[:5]
+        
+        # Add to bot statuses
+        bot_statuses.append({
+            'bot': bot,
+            'status': status,
+            'commands': bot_commands,
+            'servers': bot_servers,
+            'recent_logs': recent_logs
+        })
+    
+    # Get system-wide recent logs
+    recent_logs = []
+    for bot in user_bots:
+        if hasattr(bot, 'logs'):
+            bot_logs = bot.logs.all().order_by('-timestamp')[:5]
+            recent_logs.extend(list(bot_logs))
+    
+    # Sort and limit logs
+    if recent_logs:
+        recent_logs.sort(key=lambda x: x.timestamp, reverse=True)
+        recent_logs = recent_logs[:10]
+    
+    # Calculate the last updated time
+    last_updated = datetime.now().strftime('%Y-%m-%d %H:%M')
     
     context = {
-        'total_bots': total_bots,
-        'total_commands': total_commands,
-        'total_executions': total_executions,
-        'recent_executions': recent_executions,
-        'top_commands': top_commands,
         'user_bots': user_bots,
+        'bots_count': bots_count,
+        'active_bots': active_bots,
+        'servers_count': servers_count,
+        'total_members': total_members,
+        'total_commands': total_commands,
+        'commands_today': commands_today,
+        'bot_statuses': bot_statuses,
+        'recent_logs': recent_logs,
+        'last_updated': last_updated
     }
     
-    return render(request, 'dashboard/index.html', context)
+    return render(request, 'dashboard/new_index.html', context)
 
 @login_required
 def bot_list(request):
@@ -63,6 +112,85 @@ def bot_list(request):
     
     return render(request, 'dashboard/new_bots.html', context)
 
+@login_required
+def bot_overview(request):
+    """Bot overview dashboard with status indicators and statistics."""
+    user_bots = Bot.objects.filter(owner=request.user)
+    
+    # Stats for dashboard overview
+    bots_count = user_bots.count()
+    active_bots = user_bots.filter(is_active=True).count()
+    
+    # Get server statistics
+    servers_count = 0
+    total_members = 0
+    
+    # Get command statistics
+    total_commands = 0
+    commands_today = 0
+    
+    # Get today's date for command stats
+    today = datetime.now().date()
+    today_start = datetime.combine(today, datetime.min.time())
+    
+    # Get bot status and metrics
+    bot_statuses = []
+    for bot in user_bots:
+        # Get bot status
+        status = bot.get_status() if hasattr(bot, 'get_status') else ('online' if bot.is_active else 'offline')
+        
+        # Count commands for this bot
+        bot_commands = 0
+        if hasattr(bot, 'commands'):
+            bot_commands = bot.commands.count()
+            total_commands += bot_commands
+        
+        # Count today's commands
+        bot_commands_today = 0
+        if hasattr(bot, 'commandexecution_set'):
+            bot_commands_today = bot.commandexecution_set.filter(executed_at__gte=today_start).count()
+            commands_today += bot_commands_today
+        
+        # Count servers for this bot
+        bot_servers = 0
+        if hasattr(bot, 'guilds'):
+            bot_servers = bot.guilds.count()
+            servers_count += bot_servers
+            
+            # Sum up members
+            total_members += bot.guilds.aggregate(total=Sum('member_count')).get('total', 0) or 0
+        
+        # Get recent activity logs
+        recent_logs = []
+        if hasattr(bot, 'logs'):
+            recent_logs = bot.logs.all().order_by('-timestamp')[:5]
+        
+        # Add to bot statuses
+        bot_statuses.append({
+            'bot': bot,
+            'status': status,
+            'commands': bot_commands,
+            'servers': bot_servers,
+            'recent_logs': recent_logs
+        })
+    
+    # Calculate the last updated time
+    last_updated = datetime.now().strftime('%Y-%m-%d %H:%M')
+    
+    context = {
+        'user_bots': user_bots,
+        'bots_count': bots_count,
+        'active_bots': active_bots,
+        'servers_count': servers_count,
+        'total_members': total_members,
+        'total_commands': total_commands,
+        'commands_today': commands_today,
+        'bot_statuses': bot_statuses,
+        'last_updated': last_updated
+    }
+    
+    return render(request, 'dashboard/bot_overview.html', context)
+
 @login_required
 def bot_add(request):
     """Add new bot view."""
@@ -135,14 +263,253 @@ def bot_toggle(request, bot_id):
 
 @login_required
 def server_list(request):
-    """Server list view."""
+    """Server list view with filtering and sorting."""
+    user_bots = Bot.objects.filter(owner=request.user)
+    
+    # Get all servers from all user's bots
+    servers = []
+    for bot in user_bots:
+        if hasattr(bot, 'guilds'):
+            # Get guild data for this bot
+            bot_servers = bot.guilds.all()
+            
+            for server in bot_servers:
+                # Check if this server is already in our list (from another bot)
+                existing_server = next((s for s in servers if s.guild_id == server.guild_id), None)
+                
+                if existing_server:
+                    # Add this bot to the existing server's bots list
+                    if not hasattr(existing_server, 'bots'):
+                        existing_server.bots = []
+                    existing_server.bots.append(bot)
+                else:
+                    # Add bot to this server
+                    if not hasattr(server, 'bots'):
+                        server.bots = []
+                    server.bots.append(bot)
+                    
+                    # Add popular commands (if available)
+                    if hasattr(server, 'get_popular_commands'):
+                        server.popular_commands = server.get_popular_commands()
+                    else:
+                        server.popular_commands = []
+                        
+                    servers.append(server)
+    
+    # Apply filters
+    bot_filter = request.GET.get('bot_id')
+    search_query = request.GET.get('q')
+    sort_by = request.GET.get('sort', 'name')
+    
+    filtered_servers = servers
+    
+    # Filter by bot
+    if bot_filter and bot_filter != 'all':
+        filtered_servers = [s for s in filtered_servers if any(b.id == int(bot_filter) for b in s.bots)]
+    
+    # Search by name
+    if search_query:
+        filtered_servers = [s for s in filtered_servers if search_query.lower() in s.name.lower()]
+    
+    # Sort servers
+    if sort_by == 'member_count':
+        filtered_servers.sort(key=lambda s: s.member_count if hasattr(s, 'member_count') else 0, reverse=True)
+    elif sort_by == 'name':
+        filtered_servers.sort(key=lambda s: s.name.lower())
+    elif sort_by == 'recent_activity':
+        # Sort by last activity if available, otherwise by name
+        filtered_servers.sort(
+            key=lambda s: getattr(s, 'last_activity', datetime.min) if hasattr(s, 'last_activity') else datetime.min,
+            reverse=True
+        )
+    
+    # Set up pagination
+    paginator = Paginator(filtered_servers, 12)  # Show 12 servers per page
+    page = request.GET.get('page', 1)
+    servers_page = paginator.get_page(page)
+    
+    context = {
+        'user_bots': user_bots,
+        'servers': servers_page,
+        'active_bot_filter': bot_filter,
+        'search_query': search_query,
+        'sort_by': sort_by,
+    }
+    
+    return render(request, 'dashboard/new_servers.html', context)
+
+@login_required
+def server_detail(request, server_id):
+    """Server detail view showing connected bots and configuration."""
+    # Get the server and check that it belongs to one of the user's bots
     user_bots = Bot.objects.filter(owner=request.user)
+    server = None
+    
+    # Find the server by ID across all user's bots
+    for bot in user_bots:
+        if hasattr(bot, 'guilds'):
+            try:
+                found_server = bot.guilds.get(id=server_id)
+                if server is None:
+                    server = found_server
+                    server.bots = [bot]
+                else:
+                    # This server is connected to multiple bots
+                    if not hasattr(server, 'bots'):
+                        server.bots = []
+                    server.bots.append(bot)
+            except Exception:
+                continue
+    
+    if server is None:
+        return redirect('dashboard:servers')
+    
+    # Get server channels if available
+    channels = []
+    if hasattr(server, 'channels'):
+        channels = server.channels.all().order_by('type', 'position', 'name')
+        
+        # Group channels by category
+        categories = {}
+        uncategorized = []
+        
+        # First, collect categories
+        for channel in channels:
+            if channel.type == 4:  # Category
+                categories[channel.channel_id] = {
+                    'name': channel.name,
+                    'channels': []
+                }
+        
+        # Then, assign channels to categories
+        for channel in channels:
+            if channel.type != 4:  # Not a category
+                if channel.category_id and channel.category_id in categories:
+                    categories[channel.category_id]['channels'].append(channel)
+                else:
+                    uncategorized.append(channel)
+    else:
+        categories = {}
+        uncategorized = []
+    
+    # Get commands available in this server
+    commands = []
+    for bot in server.bots if hasattr(server, 'bots') else []:
+        if hasattr(bot, 'commands'):
+            # Get guild-specific commands
+            guild_commands = bot.commands.filter(guild=server)
+            commands.extend(list(guild_commands))
+            
+            # Get global commands
+            global_commands = bot.commands.filter(guild__isnull=True)
+            commands.extend(list(global_commands))
+    
+    # Get server settings if available
+    settings = None
+    if hasattr(server, 'get_settings'):
+        settings = server.get_settings()
+    
+    # Get recent logs for this server
+    logs = []
+    for bot in server.bots if hasattr(server, 'bots') else []:
+        if hasattr(bot, 'logs'):
+            # Filter logs containing the server ID
+            server_logs = bot.logs.filter(description__icontains=server.guild_id).order_by('-timestamp')[:10]
+            logs.extend(list(server_logs))
+    
+    # Sort logs by timestamp (most recent first)
+    logs.sort(key=lambda x: x.timestamp, reverse=True)
+    logs = logs[:10]  # Limit to 10 most recent logs
     
     context = {
-        'bots': user_bots,
+        'server': server,
+        'channels': channels,
+        'categories': categories,
+        'uncategorized': uncategorized,
+        'commands': commands,
+        'settings': settings,
+        'logs': logs
+    }
+    
+    return render(request, 'dashboard/server_detail.html', context)
+
+@login_required
+def server_edit(request, server_id):
+    """Edit server settings."""
+    # Get the server and check that it belongs to one of the user's bots
+    user_bots = Bot.objects.filter(owner=request.user)
+    server = None
+    
+    # Find the server by ID across all user's bots
+    for bot in user_bots:
+        if hasattr(bot, 'guilds'):
+            try:
+                found_server = bot.guilds.get(id=server_id)
+                if server is None:
+                    server = found_server
+                    server.bots = [bot]
+                else:
+                    # This server is connected to multiple bots
+                    if not hasattr(server, 'bots'):
+                        server.bots = []
+                    server.bots.append(bot)
+            except Exception:
+                continue
+    
+    if server is None:
+        return redirect('dashboard:servers')
+    
+    # Get or create settings
+    settings = None
+    if hasattr(server, 'get_settings'):
+        settings = server.get_settings()
+    
+    # Get available channels for the notification dropdown
+    text_channels = []
+    if hasattr(server, 'channels'):
+        text_channels = server.channels.filter(type=0).order_by('position', 'name')
+    
+    if request.method == 'POST':
+        # Process form submission
+        if settings is not None and hasattr(settings, 'save'):
+            # Update settings based on form data
+            if 'prefix' in request.POST:
+                settings.prefix = request.POST.get('prefix')
+            if 'notification_channel_id' in request.POST:
+                settings.notification_channel_id = request.POST.get('notification_channel_id')
+            if 'welcome_message' in request.POST:
+                settings.welcome_message = request.POST.get('welcome_message')
+            if 'goodbye_message' in request.POST:
+                settings.goodbye_message = request.POST.get('goodbye_message')
+                
+            # Boolean settings
+            settings.enable_welcome_messages = 'enable_welcome_messages' in request.POST
+            settings.enable_goodbye_messages = 'enable_goodbye_messages' in request.POST
+            settings.enable_member_tracking = 'enable_member_tracking' in request.POST
+            settings.enable_moderation = 'enable_moderation' in request.POST
+            
+            # Role IDs
+            if 'admin_role_id' in request.POST:
+                settings.admin_role_id = request.POST.get('admin_role_id')
+            if 'moderator_role_id' in request.POST:
+                settings.moderator_role_id = request.POST.get('moderator_role_id')
+                
+            # Save settings
+            settings.save()
+            
+            # Return JSON response for AJAX requests
+            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
+                return JsonResponse({'success': True})
+                
+            return redirect('dashboard:server_detail', server_id=server.id)
+    
+    context = {
+        'server': server,
+        'settings': settings,
+        'text_channels': text_channels
     }
     
-    return render(request, 'dashboard/servers.html', context)
+    return render(request, 'dashboard/server_edit.html', context)
 
 @login_required
 def stats(request):
@@ -284,6 +651,33 @@ def logout_view(request):
     logout(request)
     return redirect('login')
 
+@login_required
+def user_settings(request):
+    """User settings view allowing customization of dashboard preferences."""
+    # Get or create user settings
+    user_settings, created = UserSettings.objects.get_or_create(user=request.user)
+    
+    if request.method == 'POST':
+        form = UserSettingsForm(request.POST, instance=user_settings)
+        if form.is_valid():
+            form.save()
+            messages.success(request, 'Your settings have been updated successfully!')
+            
+            # Handle AJAX requests
+            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
+                return JsonResponse({'success': True})
+                
+            return redirect('dashboard:user_settings')
+    else:
+        form = UserSettingsForm(instance=user_settings)
+    
+    context = {
+        'form': form,
+        'settings': user_settings,
+    }
+    
+    return render(request, 'dashboard/user_settings.html', context)
+
 @login_required
 def profile(request):
     """User profile view showing Discord account information."""
@@ -298,10 +692,21 @@ def profile(request):
     except SocialAccount.DoesNotExist:
         discord_account = None
         discord_guilds = []
+        
+    # Handle profile form submission
+    if request.method == 'POST' and 'update_profile' in request.POST:
+        profile_form = UserProfileForm(request.POST, instance=request.user)
+        if profile_form.is_valid():
+            profile_form.save()
+            messages.success(request, 'Your profile has been updated successfully!')
+            return redirect('dashboard:profile')
+    else:
+        profile_form = UserProfileForm(instance=request.user)
     
     context = {
         'discord_account': discord_account,
         'discord_guilds': discord_guilds,
+        'profile_form': profile_form,
     }
     
     return render(request, 'dashboard/profile.html', context)
\ No newline at end of file
diff --git a/db.sqlite3 b/db.sqlite3
index e1bf10290de5bc53450fde8acad2cb6223436149..1a09a5ebc2c7c3b81da4d350d579847f3fa7ab5e 100644
GIT binary patch
literal 516096
zcmeFa3wRsZb)bnNL4q#;dP8p(p=OIPn<NTvNG+=&3X;$yL5UAZl)F<d07a-oyo3iu
zcDLPz`jOb}WXDe8nY_l{oh0*R6VK$e$z<XrPS#1BWSmSA&rBw7&t})LH;I$^#`a7+
z-fz#nb%Ck^3Lve>39TG<_ifa@=bU@af9}0ibx{D8Z_F!InO`rK^HP=fTlQHv&hi}3
zTP&8Jga6(Q|26)823}Yj2k?JR_qx-|pR-JFzSRe<Hs>D@nTqo(&M!It#`zb{&pJQj
z{DZ;&t^b$$vepmue!l0cJ&W82E&slgq21QkFCMVDHm10GMJZ(DEvZ($E7mG<S<IG;
zwNgcWtz^_g5ne<C{-8JQO^daHa=%sl;OtU7wi4%8lZhLvaXyi}9KX%GTcvg|>gE@d
z?MiNb!c84hGVW)1H+2vEaeM0L_S;<9C|8%X2-Mb+T+S<%ic&08MC~;RA`(ak(@~#H
zJ!=y_z@pH*-zL<-qR#m?6%vBM4{&~RpUw3mIKR-%dDRm5of3TBbZR|n?)Uy(`Q2u0
zCzl%v;O#x<fUDjc<sP2dmAi&uMQ=Le_XSg4ZRE5O+Shsfw8?5ivP(C+jtz#C!3+fZ
zlmk*TX-JJuBwZ|2<w8}gZkJ>-q<rgva7YfMXlgV$r%6t<R<V;6o!^=?89yxw;O4U3
z=Gva*9y+y@Xew<Tq>CB3AmwGzD@ZASI4Eh^(6k(#)1V3M()6w)febX9b9)}%9<jM%
zG4A#ARVkHI=P8~2w9uTWXlqMri=73r61y}X*RLn7f&?opB)kF%&B|pyxwyh7SLf&X
z>r07+*wPw57hmIJt1F9%B$!-?Cs)8#YQ$7)DSjos6i?2^mvx=8K0N$o(z--lN+c62
ziP-%78mo+7ZX1N{KDAlbSnRG3&qMF9%{4W}y?(F-EuCRHpz85RCyZ+Io`R>Y5xdI@
zmE9$>*WNa0bB&I2Z=NwCYYx7l4v-#+PD!d%9u&(kA~&US`mR)-5PT6&b6CP4$w`%}
zm@8(Lf}77sRk^C<WqrF+5i2zq7-W#T`Bbr()3=gZvIJ=M{a(#HJ9k4b>q;5A=`7iB
zq^pFSmz12=Q#h#g1p36$s<gh|?j*EG>8i2`UbgyAA{Orzm4Xb2+QRn;L;bG!C}*L|
zVdZ`fF4sgz6v)H%4SB^baD?W|;fKiqn=2aSUJq;eRmYMxyVQx%Ry$~t`8J_P8V0JB
z$3B>Wx)v0<fcko@G4*}@HrLn~SKnv>N}1EhY@NV85-j5wjI@tukKfksx;oZ%Sg6F+
zaY0`Xz*RK)&+_o8KAUTDl6&n{Egp>`4N5!gH;GJZeGK6Rb>TreTQ3Q^Cp2?UDrAd>
zlQ(l|=aW<O{H(1^UY#$V`ZcS~RrGW9m+53P=}MGJB{3(Z<eZp?E0LTS4y7{wj6X#$
zLrfI<7);|Gg^6Hy%j#8#i5iK$=@YrJpl-osRkqjW^82}mHJWh~O_M6CG4m!8k0JYl
z9yvIyd2gPTW=!VIp6fmRWN5F^IN5qxk?+^!LRxM)>@~#K(l|lp;4`4<sjqQ1*USv}
zP|~x@E7`JCB{yS?i&oKNu<LGXe<W(aMLX~Kg2oe%alKGmVV<wo9Z=q?+n}6(1&Z?p
zD9&Dn!sUnJ@JTzAZ?pcU#rdnw4>>c=F~@&&yx(!j{#E<W+8@{hBcC1l@W{=P{lmXC
z{KoL&@bRHf4SnBGYG``!Zw9|}@bbV{20k{hJuq(jPqy!~t=XLYpXlH2pXmE^-+TJv
zeM4Xr|BwI@Kmvbn1kSy!&oU~+GE(JkswkB+UavPGrixXudHL=0`hrv5z?3h-d;RBp
z{&U{obiglo147i(XYq{3;5G#AL$YFJyHb_&U_cO+f>KqaTvIj73%+wc;haA>?elvh
zK7Vuqx}7m}>!+K76}egkV->xs_nZ(pC-|p>-e@G~T{;WB-ii?)^HM>|%6Zs?fnNP^
zMU#h`OymFHSL0=|L{2+Rn;~8ZoeTQU1;f)q#2*O+mYz1Z=@YXxB?o(-q-?mR9>Hx{
zp&)A^Qk!1l>a-Azdc&c`@jlDh<yfVd1`<*_U93?zL!y+c!tSb}UX-`0Wl4lv8A<OX
zco;nwj7<Bz#L2`{VDM_2!5}kLEpEsKu~5sw#Z?Y&cuFNRQ@&8pCxjAbOicyoB~+<g
z+*C5)BJ623Vm37u^o0cBnj1{T+r0AYLJ~9bx>U<m#f*}!np*OQ1Chw3F|ZVEv*Z)i
z$nw&bn3D_H>RoMc0Q3eUpD!8+ha)`L7;m%DJ|gv+f)EY(=12Q1C)Q$GqM{<bbCoig
zvRr{}aM<jw$zrLj<fZbq+GZAu5P|LS@X~3pChM$4cD5$2D_b?wqzU0*IP8s`0-Lis
zn_;6(C9~DVtxzZ&^j$a!CeG_jgp4L~#RqcPG^!xXcmLHBpuVV64;s~p2elI1>2&cU
z;Ppp?i^su`s51m3kIo7M@=Uo{YH+6wrk?qQus3k$7#OVS4EoIsrpq$fIbf;Wl*`Jx
zB4@fd>k}g3;Q6CqJFK(qQ#D}uX^coy$GqW4FyM26^0-d9>rnJYgONxidW5d4Z7W;{
z)c{?RVf=fA@buw6%R%U_q?oS5bks9>!5fW6<_^I+ylhy9VZKQfxNFbS|2Ga`M@q>S
z$Wp6|)f+nJhlMmW9SH@)QNRCSpXC%xKA0}#BHz@5ATI>SswM=dA#s7IKX3p%7&my(
z9;aT*8}dgY*Y@{W4&REA`))Yj_*k;(maMjEWtJeFC0``s_lBO^2bQijED11v>FyFN
zf?M0VcX+fl$6&!L1cX^9SXgLS@G@W2tpswHv6CBNa3pZm0Y+At5pPr<5Z&wBjiC^n
zl6_a~U}(8vD55vi*!J7Wp<q~uMCL}o&WjB@VP<Dj$|=C7Scc8H49uKzxmXtSkZ?E;
zn<ENDVSdJj!C0bUEF_lU?ouhsjXenR4oXFY@#1R^E<NRdHyRQy4S|WdhKZm)E^RZE
zp8ia2z?vKso*M)kja<WZj=JX1QPX4tmkQ>A_@Y8EFgpMi8o7o`4xI(MLhXds=M((V
zYc?>_7`)!b;MF#W=#J}7mV|&m5WLpkXBod5WBWf8BcTX<^To|3UiBR+GJ;Iec*B05
zkm&2PxWK1OUMYYHKiOP{$qr{al4r6JTP%p{Ian3acZ&+_3z(S_qHvn<#jIcoC^J(&
z%@lJBW^Iv}H8l~51pOgzFPMO3jG5@VAPC`TI2xMi0j8iq7X*_lP~CVELQ!uh66OHi
zcq_W@J;4P}G(ztG?T%lwI6vq7wDV`3o6fhKKjM7R8FTi+UcjF@zZ;tH4+$UvB!C2v
z01`j~NB{{S0VIF~kigy{aO`Mrbg=oxkKx^yQ%8C)a>n;{=$?&SsY30olZSdQ4jA9S
zP><+N{prKKv!<<VZ~gdz-t*?|rIO3u8ysMAhP~y3*4|03<uRLA?1Q~y1GJLvw(WEE
zo*mEvg8ftbQ17U!MfP`kT)n-1&g7Yl(Stp`Qv<AlZaR=Xi^E*+Oha0GQsHewkipTB
zFIgPl?x;Ec%JH*~A94PM^Y@)U=lFHUXY4;{&)VOx{}=mL?7!&zh;!SSc3yU#a85hE
zVxPAkvU^9q<b2Dq>WDf{?44nNo*)4vfCP{L5<mh-00|%gB!C2r1Ws8!V=Z@t<V}3_
zhH&(R)pM$)RjOqaa<h2aq>Vl{0Bxs^TSv#a<{cZkM{7KAc9M2zd<2F)-v^2(c&q0u
zXWFVh>UaFO)pNpJ;FyW7;rYI!N39-Li!K##jaoh9W)19Fz$2%uXU}kk`(oW~@!=EJ
zv!iCM@TA_MQR~^WrfuqTg9lGpPt0)azL-8}0B`xjgD&t1ba-F>z)|aoaYHM6Xl=j4
zdhi$r4+Fu!Ky9Dya6{g99<h23wuA#n9mlMmW9`+TZy&Xe!X0trQBn4okoIKI$N}r<
zVPpI7Ve9A#V--AEG<4cJI;GXJyvkd0x<=v|G%B&?f&JFegPIa}YCB{-b%JX=Zp8lI
zf6_XBhSNV0p?lqDw;n!BHw4I7vpTGYUG#`<AM_ry9v-8I+M^gf`>n21gLF#(0MG{_
z$Y=98=U2$|xC5WfPdU#yM;w3b_({iy9A!t+G3_{D|7-hi+J6-G0aom1M!q!i>5(59
zd41%aBUeVA9_b(c{O~7-KQg>EyfQpG^k+jqG*lj19C~{2tAoEc__4w79^4wdGw2@p
zvw<HR$PLU5JZ1Z;?e}dTw|&I+9$UsXYdhKh#s1&v|FQn}^{4xv>p$4{r+pvodw1Ve
z_~gK+tlwdkt=`_R^!|G9_w=s!3cZ$|U+Z~)&tlIJ?sMEvaj$VJT!=eh`72AyXADli
z&}ZSsJg!YeexN?sIx7`;a>Uay?|uigk59SalR7dyI!Eh>gnG<m?x-?k8f0}c>ai+w
zat&lg&$`IdBuyi5pterkhSr(r5zPxWrHsz-tX8-M;{FRq^iJs%^u9G!ZmKG(PliW$
zNgryp>P$mraurmj!bh4e>$+%q-VhG25aGqcGy>hMZw8>&@i5tQN}5hvp6-^NUj{{C
z`7n#6MU{opQF%#KW>K{$v!FUD2XBD#<icSRUyCLQuanx$bx`xn9@0e$L3N4KzX%Fb
zR}UE?WGWrw^Cwj$Lu5>;V_Z`Upma8NNQ;PRn8!0S58}f4gZfC+^|mb<wc0-i3c-s9
zjge?7EzvNg=T#+RB$`r7G-|_C0+eQ=2X&EX8v1C|+VC|HkIo*Tk+hv3n$ge}UVrL1
ze-#ujTs^=dGF4?!nJ8aTm04t_$}GBe<zO6?!?6P-LQ_o=WxLwcWl)=m?$;s(Ir4yZ
zOOUKqm<4hFh5h>YbP9&h8Y-7m6@64X6+=L*eli9sQ{nw^XxOwSK0zG|g9(p42f}Bj
z_R$E`6LZsdIOO3xGky_7&I<dO*P0OXw;}d+Rg8J6i7_9U*ysfi8=KrmywhZeUrb=^
zS?ZCq;SpRL7(9aG@$<ARr{)n8(s@M0&Z%OWM@&rT5!8%EsYg!c5tC_n1c%2XAaH8j
zK|O*qebXIyeL75(Jr3pyYh`|r_K@1nd|>U&0XRAug!U6>9HevBNP32sV*zM6Gi7h|
z3YpM%Of%yLk+Xtb>zoN`{ZlcYDyI3s#56aE*r)(vW0Q8~3X@^p5P^sn1fuZ~>QUSE
zR?|7s!ozhHuU(5hI|G^*5+lq}Q(fk>nfA1*&HOjjW}%p9ho(R~JUc?dGF2rJn&_Q;
z2J}YH4mYDU1~>_=XC{Yr5s`L%5b#+hBBAq|Na!3r4xd<paW&lVj5If#IRhU_;>Kr&
zn!N*1qXSTJ_ACf_{6jh?n3&!VA_$)-B7!<!n4r!blCv@Rm=FxQp@vILs^Jw83Bm_|
zV5uCWp0!>qH(g{6eDg9o3Lo;}&c_FtuV#wO>2_84P!CaM-kYhiFxpi8@F^ZRN5VC8
z^MhDTj~ck!l-%&K9k|LI&_~!B*wgR<9nK>R7{eh_#webKkKPbDqwhqn#bx+74UCon
zoue)O9fwcLz-X~iuh>#SUX!)rG<+0>8}rzhH>{O;LfYXIE~K4#!P=PzaC8(tumY=)
zjr7hMNy_1+8$NCVEc$7$?53v4f*n5%pDKYE`&sWgDds^#4n9dj<d_#aIpztg;o)N=
zz@ndcqZ1+?vBOFDpa`7e`dEhOHy@Gb&6}RFyDXkm&cFvj;KHhpxu?4UBjU_Og93aA
zgeWjSTNIeDdIb-B{)3wg_7R6$q>0md(Ub524_H;K)N^v%*L0a2@bKXch}_CtZL~8V
zsRVp7gGeyn8WPMYa(Em*aslJSN}Opl6EDc?)9^707ze$ycY2%I?4BOE;gb=N?OxV@
zQ-V35%D_h-hz#?fDZ^Z#$0y;V4G?87@u4X|oS+92@UaDM(%(b9(C%)Vu4q-y*g$e7
z+{66Q8g!Y{DxZPR9}sEgnbtt0nR{C0)9@Js7>zx|N3E8K5=XU~r{DtwgJ%WmESv=C
zU3b$}sNiYM1bjwda5Bgo)ypw<nk0NS03?}{dP(MDQ_>9|3K$%pAr9)rh<ii^Zu!?<
zAn*Ub(zj)CegWR~|7GWoJHOBQhBNQH<-F<)ILDm(oSfqejz4mI%JI{Vf9`n0QE<HA
zxa#mZMjiVd7W)_Me+qj8KV$!X`v>fs_S^Pz_S5!}kuQ(@myzEZ`S{4c8u{Ll_m7lD
zZjAUw4v$!e|9bcjhkt$eW5Yi@{N2NE4Zk$JKD;#i-0;lsiDBE&7l;0M=o3T#`_Ko6
zHivEvMTSlc^$z~|;HL(Ea_}RA?;R`;zBqVwaC-3Y!2dV!*?~_D{KUZb47@e4H6RbH
z3_Lq9HqdYTOWPmVe#Q1<wtsGW)3#x|ZVTJowxRz2+W&|Bzuf=B{U3nuC0Osj-hZzD
zY1n7@YTsx3ez))E`+l(R+aPfKLjp(u3H&`1IBex6xlwvj(B64?#bxDYxKVZz(CS}S
z>)Dd8)xUJe%6Yg^vcPMV+Xt=OS?)A7-FVw#i*|RK8E(`*P-~glM(ySSD>u%aCPo`o
zHEQw{HQ9K#qe_)eF_VqjidxG|Hfqb%<SAmZQFWh&bds7RR~C(TN=nD9oS!?%%<5Z;
zY6~;1Zz&wHa#P$%VqRaJr@ow^U9f9(IPK+V$0t|^TK$Gv&&+G}_bB5N#JE<e9JO)+
zcU*5;eW&K`aVr<(jvKA3O<A?c*n!%#PWwKt>qD)VDYs+#ZZg!JW5y2BYNgS1YQL2`
z!yVHZm8jQ8sX4l9-GKg1>e^9e)X*fVP0X~R>6@t6M@a{U`WN?ExiL<+2mb;M!?5Z8
z4z)^e_KwrajdI$S`WiLgzKMRDjsvsZ@>^<)-Y9tu-)nJ`j*zy!?^Rmew#&UjIhpKX
zFRKl#1Klq35*=!-d(Ss$T3WW2uhTx;wvQLpYJ+Lm?oHB}XWRl_pkA2l^Ul*;neOM#
zsZB=n>Tc`vlym#uY~rMqi*g+{VXvLGau>Lc8?9H>X4YNXhUk?ORxZq$Z<fZXJMBB7
zmuYfMw?5SteP=Kx$u8<83bkz`Ge&2Ie#`PXirKhBc~PxnX4S36x6`4m+k3n~P3iX<
zpQUQXt;O?don{I)1<z4ax=q8V!^)lFnwx|X+OFFd467B)2;5qS>{jjs*Vy?BQcv`|
zeF565adXeF)@epyMf6d_x@|jwX1>EVotLJz<4)X++RQp=+b^4@nK$1{o1zPVwqN!P
zjYz*kHmTO=jK7USYwmz~=(1wi^qQcPuw{$utXiov1RGONQ|tPzt8wbB`A*eSr>xw0
zuG4nZ8MT#lz)l>^og+7$ji#GQV>AN8))7ygZP_UrRV$4hoTd@z_kd1OKFvL!lQh-3
zZJrZq1v3MK>Np)#jg6dR)EmR*%~9HM%U+F3tz>4{Cd(1(jeZyAFrANWyDo?5f@ZS6
za!_q(2HD)FIY8Ij*8P(GbO32vBm1ZW`ppohTEh&Iiv<S-)ZFZ_Qy#kg4R{Iwu7(U7
z8pCQ8GeUPHhG@^)b_KlW&rNcz8x#X{X=~q%u&MRTptf_+PpP(SF!UX;4xZ)cIlOUG
zZ#`rkoaETqyHVLoE1AtkWzRnA;5Z$3jT*bNV(D>=SsY`IPyRh$0%Lbb00|%gB!C2v
z01`j~NB{{S0VJ@O2-KhA?3Vh)*x;DmJ~$Y&mr@&<b)Q(dEBS(<r{K%`$=_4)Ys>J|
zY*w0$7W}KrTfs}gO!WEWQ<69Eppe<#*oY+NGO1u{^>R6VI~=>dzPxzt!A<`a-}ALx
z;Z8NMelvTa`TcqDwVv>$nnCj2!+~hjCj@KoODE+td<CHPWv-1czzg`MBSD`x8mLe7
zj9A3jK+JxAU@+zxOWa#uzwZ}r-&TULYoW#YMLBc*rFbruP;SfX%i)!4LagLVEp9h^
z1&i?IpTaqBXxbluZzGIklu8<YwMGm?;7blep(uRgq7S~4H0txh7dJ=XTQ0r+KxJe5
zxh(lbm}%JJF*W7)27*2<0Hu<bA-mrSL@i%;qFT3l*XS3PHo1}a|9hOjYjOUr^S|z;
zVTZmT0VIF~kN^@u0!RP}AOR$R1dsp{KmuI}obHWroi{If?7d@y+Rgy^{(sB9uJ*7I
z2_OL^fCP{L5<mh-00|%gB!C2v0225HCqUl+$NT?p@Fb%9NB{{S0VIF~kN^@u0!RP}
zAOR$R1a=^xd;gzq1?(V>%}4+VAOR$R1dsp{Kmter2_OL^fCP}hHy{Ds{r@+h_vkVb
zKmter2_OL^fCP{L5<mh-00|%gB(NI-c>li}N+^Q_kN^@u0!RP}AOR$R1dsp{KmthM
z8=C-m=>HY_DU0)eI=}4vug<@8e%ARJ=N~x#gY&nXzvlcuoj>RNY3GkQf7tm0&JR1k
z%lYljZ*_jNv+jJ^S#uVhiZkte(Rs^x!#U@SJ1;t;PQP=?dDc1RJmEa-bUFu}y^gOs
zzU=rL$N%g2za4+#_|J~tb$rV4tBzlE{H){uaQth>4>|sY<NF-{)bRnwTaGszuR69J
z6-VBYbx4kPI945tj)Y^@alsLG2#!g|xMS3D%yH0Rci0@9{VVn_+P`4`oc;f@|B?Ma
z*?-&q8}?te|APHz>_1`usQq8s|5y9>*uT^Mzu4bvf6e|b`vd!Z`-WY%i}p49vVFmR
z)eb)qVGr78>>m3W2ps>A01`j~NB{{S0VIF~kN^@u0)#+cFUO6(Ld%zF`4TO+NqKsU
zmJevTNy{23PgQAIp=Ftt_epuOM9U&A3$)CW@<fi78??MfONErj@6s|$%XM1Hq&$|P
zWtx^LT1uom`c7JkwEQMozDP>f3$%O(E$`5Bjg&`j)AANAZ_;v=l!sSnxlGF?THYY#
zq3g6<q-Bzp3#2?aPs=%4K2OU8DGywu<yBf<p=F$u`!CaSmX?=j86)Ms=V*D6mT#x!
z1yVYnrR8~Ao}*=yl#U23!?X<1GDu2$fR=t*`e-STa>Pr^8Cp)$a*CA0&(Ly`mT#k_
zhm=DTv^-18r)fD(%E6~-d4`s5T8@!&fT!gsEl<<(6e(>dX?cQ{$7y+tl>J9(>7wNk
zS{^24-yvEaq~!rx?kA;nA1$4<bkNdH%H9!L4%2domV>118K9+&mi@Hsv-S>hR#Nnm
zqNlfaa1h`B$E6MlAOR$R1dsp{Kmter2_OL^fCP}hlTQG@|NqI)F-C|4kN^@u0!RP}
zAOR$R1dsp{Kmter@BeWOAOR$R1dsp{Kmter2_OL^fCP{L5_s|n;QjxTpJR*=2_OL^
zfCP{L5<mh-00|%gB!C2v0N(%O7(fC@00|%gB!C2v01`j~NB{{S0VMF`6TtibCqKs+
zAre3WNB{{S0VIF~kN^@u0!RP}AOXAWi<W)dNsIF-$L|dOhyGu(KNxvm|DnEH*6$qt
z^5DgR`0%s6pX7cO1m0`;_m&GSyz2W7+FXlMTwPEK8F@>pRqu+mid+`6<zlT=QC}+=
zF(e5-ITJ~>3LKhUipN&sd?I-{Uf*|0Z!2?8DrAeIl*uavF;~nsZKZ>ufSi&-tpX=?
zwr=z8*5)>SH@}!{7jyFyZW@7-aeL|$Cv7ef!n;AkYcrWH7OHZgDpt2kvIt?O1F5te
zkyEXLCw6eHlby~kwrIFLuf6+(%{4W}ee+CJO6BBM4_c2;Gmlncm*(T<6aWCPKzv!b
z%qJID_~h#RJb!&Du@GBY<LBaQd~9`PF_8pA3-RR2GrYT)x+kZrz`@N|<*h1J(5lOF
zsqE%ArE>bNRG#p8y`H935R%eWrC1Qxb5hpLSMpLW2VL{ELPg0I<V;hNpS>2Jor4q^
z<llaQ_j<qxST1B`F)vptQdVww!CWWp#&qezBcUzDuf&()$=UdFlZRe`3=A?R_{&6Y
ziE>LM6Dx_>{QMfLj9-Rc8l$Hjp1z0XOxU$u7IIa|LueVPDw9`DGM@VLE}N?u<LdWY
zrXuyHB$x9_r2>pAqV}4MSz$eu3a<OoO^4Kpq6t-w8%J+v!48(yQQTRL5YW0K<Hu9K
zc);e`fQeUW38rOTp@$@jXuu!zroCygR#5J1U8&*+Spcia#En&Tv4I7mRjRo_m>X@4
zLN%>lE+F>}Rfyo+ew!;B<?50af!eBt+M0?;ARSCceKPf|P56LG8rp<fQqZudbG}W*
z4FBXlo9jhzexaN5swIG*5`5ltYCUT1_x@e^-DYejmm3Oh&qMDpUHV=>NSD6WytW>X
zFn`$6*V@eHWBcsww)B0y=6o~Ac6Ztq6DrHR-(i*V3_oqT?iwBC-aKPO)`T(C0a6D#
z^#_LsT=l^i_i#oVF%(MM>cddA3{)W?g;F8EuVwzWY9D28b(+bo^36G|O**>f>3h=+
zG^*ZegM>`$U}1tOZm<ON{NN#*>jtb;!Ir>jIx6ag5M80d!C*8P2s9D1YosG4(}Q-`
z$v~^WsvPl>zM|{r!{mU?6^(MQhqe5wt(yB4>PcJeph@Q2ggOj^?$-xR_a5(HZp+Co
z%xe@_Bs)zQxb8jT8XM#48+xGi$Pt?>4d>jomgKjNq2@T0qCr{82)Ya5R?%af#zU)M
zo6XjN(W;;y$ezb}<=*XN+PLy>b&d{(iqWNePFO^Gquj$Y8qT(%r_CrWiDZ6x(;2@n
znDS~XNSo@u&Z|e8?5?`e1=VJNgr-)St{V?;kJwzX829>lZ9vh4wPsCQFIrpdCNtI4
z1RLY+^Wq=klxE19?h?FlhtYOk(-c@7JI&SWJ^il9Np6jTt=!KkRavaa_iJ(?Ew>!@
z8W6TLP86iP{0wM%>T8_MH8aCKl&DR1GnH4eWr^IjRN5+f40ap$qME`ZWkf2KbT?4J
zpy39J_}aM@RC9_9H)iek4fy_l%bo@vA^{|T1dsp{Kmter2_OL^fCP{L5_kd$*n5vy
z?A*Vz^t|Q_I23zqWMlXf!``8<3?>Ip^!>};k8uBv{u8lO2mhbW;n(*E;LZCPt{w{6
zTpkbi@T`8Pqyq2A!afPxCaK8vSkUHDVBb`x8+{q6ayM0!%J2qyF`t*nlLT_QM&A%-
z6=Z`i==Dn>Z!pkV`YE>SLY^idPXK&PX4SpC&N^hvM)L+X{u>dik3O_1im4)bFI@D6
z*Q3#(FV!Y+W(RLu4Rmmj_@#CQJ_Y=+9}QVZn{yS(E>Y8N$}7u(^(fsiZS&5}yfePj
z(k9l~Vi$MmUKMQHH{ITQPkz{HmiM{l&T@563rXU0@j(F|ae>@M;F%VGL<nhEpn0rQ
zUQJb7F@X@tXrl|a=XI+<H;TVmeRosqs&%e(ZsD0njfXut&WlIdmZV$Gu*a=?w!^S9
zN!yLvlS0eWAMnJ`CMDX@2$Se;hCKgKkaLikj&@2?8Kyv0F2h?7>O(5p;~`2#tklx5
zM+|MLVlmfzwgQH#x+2LLQG)ceZK8sJZfW3CN|rpm(tKz}zop%lCB}TGP3_m_ymSlt
z&A7U-w&t+S?(hytf23R+`3H^9@MPplx~!DQy4?;p4G*kji{<T(nF0E8fj+v_PQS8U
zs7hNp)t1fgBJI>9rRlN^{dUe;tweI!xt&Z|GMaXmQ8sr$VW(_bEZh&e&YtDo>}$y;
zn9wo_2QBZz8`>U223sd$*A!NZ8!}|J@d#I|uCxj7j_4loQrqFlD)I(xSzcFk2^5SY
z=kJ=P=4#pg7MFhRHQ!3x<(w0y`(5!-&O%QC?9CytQKZLW)0!wWUk<$XwkccJ2P<sG
zY1!0#q-2()O65VZtXu8`U&OHZ=A=rMJUyvE;<RN;O$uG_;N3N{K)261Qfr*<f_}d9
z>V*O1mUhualB}M2Ny%v=#}^D3oFtA^rS<i8C!mEq_O=OcZMCk*BpUG^<ihlAE$DPz
zDMRdC9P{{}>33Zn>zZHn9b7fR^z~?c|D=sR36Q5#mnM+5Xs?_mIi@0yl;kcEuq1fu
zPr2cFtx3c4TH4#Da8+%5Ox3p@2#4f=`VfL9=U{HL%V!#o*4ojEdIi%WO(JdS7A{Yh
z$84_cN$#PO&Y%{Rwhq$844e_*g4HWXDStR9X>aXoZuK*#jn}D<W_s6=!02i?2alhP
z^EUE+^Xr^8AT<A4Jn1tT8k+DUjgMB$-Pb^N52jaQz3y<%(#PEK9AF%)KK*IhQ@=I}
z52*UN`pfDiwfcOw-VqVrrWSKj3NGRDko%k%4y7{wj6bE`qO>bmO_OgDVt32z8ob>;
zA=C7UJp4u7f`ObkZFBkk+{37P`fk@W@!^y)^(GRJlzz>>j#*K?HgERe`~RJHHLwK<
zAOR$R1dsp{Kmter2_OL^fCP}hlR^OR|DTjhVjM^S2_OL^fCP{L5<mh-00|%gB!C1u
z6Ttib&TOy+2_OL^fCP{L5<mh-00|%gB!C2vz>`7%@Bg2aOkx~J00|%gB!C2v01`j~
zNB{{S0VIF~IupSA|ITc%1qmPlB!C2v01`j~NB{{S0VIF~kie5dzz%_oj(pML{7dJ5
zcK*8aW6lpd-{;(Nrku0RDd%y=-#Y%(@oSEM>-b^E2OU+%iX-AUZvR{RXY3!h|A75<
z`?`J3K4U)!>iCBQkN^@u0!RP}AOR$R1dsp{*qa1Sj#@3AG5B2!_+gB!SlO;r<$Rg^
zM0}+RmB&v*>nUTaRLdx|?Noc4TrL;OAb#wm)iOHX{EZg!3mO%<T7@nuCr^+L$<N8a
z@0&?kIWHHg>?eajar8K}o;7V%f7<5QF%URmDlmGqT{l}(a+yZgE*A*6jJj0d^bu$n
zH)&wMqjd7H)pGVsrI=QvoRm%%YlW(MKz|74_#tQ=HED$}q(6NS+RmD_sb)?duv$*c
zFq`zpLEvWq;P*Q668Z5U*M4Xn*SAWUOc{Qb$-d8OIe1JeDex~)vpcoJ4SD;p1Hw6I
z3<r*m+M)VbTQ%sP9)WbtG}Bd;DjQWP3qPr%WD6ue`-h?Zu%Z3X5LBHoRDsH=L8zT-
z*0%mI*P#J}5^LUPgW7{lC2;UyztwW;1pBSL3j6<wKC5N?4EvRY>UIf!V@drr5Au4%
zYPB3bOnzd5j5T{N9J$C5{jre)J#aWi4z(Yc*w0xlu2WJbuM_|P#8}=Y_y3lCdvlti
zS4aQ}AOR$R1dsp{Kmter2_OL^fCP}h;~}7X{@?j{ETR=8fCP{L5<mh-00|%gB!C2v
z01`j~NMNrK!1w?6T1L<xB!C2v01`j~NB{{S0VIF~kN^@u0*{{nx&J?C`MAXycf8O3
zZ$~~qGBYd=egEL62agRTY~R-Z^L?M|J7f*@iaqb+{uzkvxxf1AL5C%FFxX=oeQ4Xi
zzh}_r^#!NAfhk{v_xjKI{O1Cp>0mSx4hmP}E853BX5bSSl^OVC$&BTb7q7oa;}U$~
zX)pXEEEHc-aye-xIPK*pZYhOK@j-=8uJ8i1p68(=6gbasg#sQvRx0J>TXJensm=ub
z;c0(}pP0M0vM~P)pHntu{;HhbD0=wWyX9hDo)P?Dk^I9iOY2fuX{f|AS*`8mcfI_s
z6`@`{K;lxm#O0liME$;C)EHN#DnVeRRMIm_K0A|<*QHvnIwfsNRjE8(DrC9uxcF_K
zd=CkE??im!Z|h6@NyIbVBld=)A)i^qkj8KQh3EEGP^W&XzOs)5<?kF63>se~;)}Kn
zPxwI3CVYO3jLvtylSH+La<$o0e}|KVb&-YD+dk|3{^_tc==X<=xuUbK2$5|n@`D-f
zzg_%+XK(MV;H)3|AN3^%iEgTMbiU|xG%AFJh)Hx1)OSr>-&;ZT{K<RjOZJ_D3QR{L
z-muqi9@LNj_9ymUPzxg@s54zMB}@l|aMatfX27)i;H%H=t#~YNeW4y1Ch<6X2I$#r
zpnYEXglT_7@I}2ON!;|_S-|THLtRthJ?HgJN4(xhsAbZ?eEH}!$;2L7;kf^PpdK0Q
znhF|E*cS=<1A8wO1Km;~gwJ`S(>|X+9BR3CfK+_w7x+Dx3R|~SsPPDp3H2IpZ_SGS
zuBix~3r42BKEWGpS)d>l@4x+#J(!BVuBm`{!qd@6L=g7i0%h%-3g0=O@0{1Ko&ehy
zsDJY3Kf3o)vCzAVc!EA(n5LrnQFC(D^>2QEWbefj>FGSQ8u<waB9Y+U8(I-=7q0t5
z5kI}k-%AUW?)iT*BJd9hAOR$R1dsp{Kmter2_OL^fCP{L5_kd$;Qjv-m{bf22_OL^
zfCP{L5<mh-00|%gB!C2vKnnr9|8D_;he!YkAOR$R1dsp{Kmter2_OL^fCQdE0_5}m
zoa3m)an$~+PhfZ$5)wcHNB{{S0VIF~kN^@u0#7c1*KYLmExakjLIr;*n|Wz7p9+^Y
zg1P(N2U~Y#IkGMV<?U!Nr%cPwZzb>La+?qC#ctfaJ~dwuDoa8CQebYXbZH}%ox7Wk
z&EKlXsiHSmxpS#HcX$2XX6ELN=cBi;6gErw%-q&hVf)VNtxJ)+FC`c6WN)r5E?-{A
zc_Za3nT6|8#GAXju;smzPu%f}^XbiCHQ);sf)678Yu6VApK@RJUtTEXuH9ZKOLL`6
z;l7ws){}Q?l~g9P9$XIIE#F?cq%5tMYl(Pl)gQldE4!V(zj$fmeqeEHEqNul6cpk?
z`EIpRe*HXz{BXIqZ{hV|thoJPV>1${1w!|{CI7utzElntGg}$O2M&~k9K`(~cdt^J
zBXKXSM{~mcId8Qh1tQ_XO6~g9E6bPiD>vp=y|2k&@XfW|7~HzK5wBi<@RADhCE=Eo
z^DTsvk@CHpmANZ9A$Bt*KS<6>H+_{$erfgkEivw0*xZx^-<@(G6TWk$c>UVl<&FER
zv%*WOSIbxKFJD@TKbX27^j*96(xNXvTaM0d+*~Vc&R1(MO_ikb)d#6U`EDdr5(77H
zdmji3Wq&~^T))3AWQ5R5#ktix)#a(n*?X&-rS+^Fx?aAvUS6Dwug_JtuLlbc7VZ?1
zmDGLj^OaQT>Vv|iI}3MW`RnOQU^yWxv-e`5>fM~bxNz(Km7Ar~W_5Add+W}uIP1TC
zBlJ=@7B9?gN#0Af)f<^h>uZ;$lEJvwSFKGcYl+<A{YvfD-P)BxsP<Cy!TgPvmLktf
ztD%>kzqII;uFtJ1t83fav$yB&&92>19^AT|U#Q%=B;B}j@Amau)!5D3@r_wwb8fX-
z@^0ml@mOXN#%wkLS>9SG1)>X^mn)g*TK1e!i)0`8&MAv4^R>%~^^FG)l52}MGRrIL
z^VhCr?pL2riFem;#nX$kK4o<|AShY&OYwqJf|nNp=Yqj=LS#A!U(Y27L(ZSJaLx}}
zoF9Y&|BwI@Kmter2_OL^fCP{L5<mh-00|(0zb67u^)7HbZR7NUFNvM@xOzb7srypp
ze(GK-C2jiBwc2LRCzs^Py=t}=yt`cpmkZ?m|NT9ZrFXnXa$a=~IV$#lW#1V7m7#ls
ze=_jpf%CRk`cL<L&g$>|8Sam`^zaK7%WJP(wYda=`{pxMDV2jAvZ|Pu3Q|_i%Y~{4
zhwU}t*`;`FCC;zJF3rbzce{X_pKvP~H?I_`a#k+$$;A~uxjH}3UtdZr#Fp0hx%e6%
zTU}X9B*D}|Jh}1=?=I{ePo%u;<~OBs`mR)-5WHSbGXn5)>x#`aJI2+I!4C<@TT)38
z;lErlE7ssk-bE!NX8b9y7rshZYYH)7iR9(@ZQiXlwCT9{#iU+<kYsk<o;nw|xf0Oz
zcx%_h;)c9UdQVHy_4SPG*E$Jy?A=7o%mGade24{YE+xj*W$HuoYe>a(F%RPgh{)+$
zRVfx46~w2Y*Dr;<!9Zu}r;I*!7Bn-f`rKKEKxFQLHxR@AfX%fy!_@`z7|5t6Zu`RP
z(P+?@YO{Q12X9*qba0UPrFP}^Y+W`PRV1a2Q5BX`vRC#6SYDwiVDv(3Xwxwy6*LW_
z>NWqY%{4a0y(!QIfSG{-t-bQIp4f!f8i=8<d7{gOOsNP<gEqx{!JuJ^<>l(#BCH?U
z6f`uGU&E+XU?gN<nzpVnFhiA+2)_hUmMaxEPp7ay3i`1AKwDMG%b=exx%rG#mC2!g
za+A>1iR9)}N*0W(3)fQoN_;7voQ*FxXD8!G1{8mpG%wNRFp*5GBx3XPYpgPU8G3C@
zVa;2z8XAn&s&{GL7}6bVdi<CAU026A3mw6g`#Gg5i&Cu$Tww~56^Z;uA`!ILzK8FK
z(Nw>|=~E3-nv7tYYAseRg59j?RIiam@&hZ)Gr?*yabq<OXbN2yTcsjO>8i2`iB1)Z
zxu!lSrpq!UFe6GZkjzq<lPXn06vmO(tPX<qbToqbyQHN4>~l7kJj>NzY*|*SQe~qm
zWu;0*$rk8omDG?GCKZSVBB^LvTVdK{y~bJIMN(|F+Pdtt*(PI+DZ#23y=Zf#!Tq&e
zxSyrory`L+PzrbPY36J3-e7c>&J!K*U4FaG^{!d&p=%eutLPyiB!*}x6!u3#8L?JS
z?so}fngybcTb`ZCyC^iXVb;+ugQK3h$*M)2g*XQ;*j#fSuI@33v$^aGLMkG8y^_(p
zscxxg(>3$ZaN2md_AH#SX1Uj+bS*LVWf<*Unx0`ku@g%d$wxZVFl^10+-#P&^|`wR
zm?lNd&(~mnceXvRxzF2N9uN1%t0ruX4o`L?_-N3SYEF0g>ub6E&B&E>St*fAJU3sJ
zx6~6P;84%X+DY4IylgI&m10?`!nH@^e9$70smUT)sN0w8omTo<iRg7c6MTJ^``EdD
z*Xm5CGq5pBWFQJ{Rd1_birQQ=Gu%VJNuEKcO~cbI+o14B2{)dBgSxcw&9ij6m@AgG
z)P=P(xu<?8VskCSniN&nq<c~!TNEpB^+oOi<gJoYRud~q!F0$M3i&ezk%^Xd$<S!3
z&(<b`Ac<Vpm)mnb-0xcSbWD#y8FFJde!3nC(FyqQteO}@t5J5mB_#$?;#Gr$;aVu5
zr>wgxCi94qgE1{NW*A$zpj98E?z)Bvc*y7fIp=3A&d)f130~qK5<mh-00|%gB!C2v
z01`j~NB{{S0VJ>|37qbYac0l=!!IQY(MWHnX7%y^Uh@9GW#66*44py(NB{{S0VIF~
zkN^@u0!RP}AOR$R1RfIs{Qm#P1QN|40VIF~kN^@u0!RP}AOR$R1dsp{*uw<y{r^3j
z9CQr{AOR$R1dsp{Kmter2_OL^fCP}hV<Ld}|BneInn40c00|%gB!C2v01`j~NB{{S
z0VJ@83E=bpdpJ4h8WKPPNB{{S0VIF~kN^@u0!RP}Ac4n30Pp`F6G$|J1dsp{Kmter
z2_OL^fCP{L5<mh-U=I_(`~N+h9CQr{AOR$R1dsp{Kmter2_OL^fCP}hV<Ld}|BneI
znn40c00|%gB!C2v01`j~NB{{S0VJ@83E=nt?cwC0Ye)bIAOR$R1dsp{Kmter2_OL^
zfCL^B0et`eF@Z!gNB{{S0VIF~kN^@u0!RP}AOR$R1okiieE)wBCkI_a0!RP}AOR$R
z1dsp{Kmter2_OL^@R$hT`~Qy#B$`12NB{{S0VIF~kN^@u0!RP}AOR$>hY8^Q{~k^b
zx`qUh01`j~NB{{S0VIF~kN^@u0!ZL75y1QZ#{?41AOR$R1dsp{Kmter2_OL^fCP{L
z64=88@bmwBI63GV5<mh-00|%gB!C2v01`j~NB{{SfyYDu-~WG1AkhpGKmter2_OL^
zfCP{L5<mh-00|(0Jxl=a|Mzfm&^0801dsp{Kmter2_OL^fCP{L5<mivi2y$T|Cm6c
z86<!NkN^@u0!RP}AOR$R1dsp{KmvQ10J;A^z&&T_&GdZU!P!4%e=y=1erxEngYO*-
z4P<On{h7Ys=$o*<)%)il)cmWj%Qn}m7rBQgltM<{sua_Tl#|lwVy#dW)uU>0LoSF?
zsU#{HvC#xC*V9r!_DX57R#5I!(bpnno9p65?u}QgQYt5RG}f_UVRk7VTZ!{4u}kxD
z-rZ5o%}=<MjGI>qRXHn{`Q+jXpIn`v=dUj%7Gg_l{9JsEkFBmOCX!%rA)Z`$hIi9A
z+<aBusx}oG)nY|{?QFs3I)9#fL+<E2Ffelos;}?tI7mH`+of`GQ_09>H@_*B(|4uv
zgx~AY2T+jmvep<dHl}lm44EXb8tOt+Fz8q0bXl%;Zr_l%J2y7GGxXr|8l9-f)v8j+
zR$Acmv)AIYbNs}_^UI4#@n&p3ae2bsl=bk7OE3hQs)=QqVvonOb;ahI9pmc9=#Z64
z3JgvqSImmFid-gxG~-Wsy<uNOYYMUaB$Aiow|TeL(5B<&7n6Dck~3!4?WuEdn=1ib
zkGFPBECMLfds>RFuV-Yx)=98q?<Q(y4rpTF125TJ!5~*pQy<9WtI1-itmLKgwkYQ%
zr8$4qgG{C@S1NJl!)h{dV>Qk*5N6uU0k#I{ZRlCR%wc`HJ^Za}@g<nAjf(p5ciLRb
z;9^w8WMWEnRP_2&vfr2THI@~9Z&zBV?QEsH=hQagC)!-Mz`0mw=NbdamktVkAsR4q
z@6s;ZYqiteL2Z~F`6iny3@$F{Q@kmcm32kVbk6a`ZaFrpclU&$YUH({>aJgT(dNp7
zV-I#_M{S7FNH`sVsYp)}W*FaY>a&?-bE=wH?jBA9ER0ze*~7pKbP~NjOc#5z?#${g
zGiTZP$xP&t*7zo1K2<E{^ox6AO0_jKVroAJF2%3FY)sC^mth^NRqs-6%q<UpnY1p^
z^J^lRSV_d@=hs+e{Bjde^JL)*2DFofr@pvkb5$;K_3ifjr;CMkrJR?lO0mFZx1=sT
zWKj&J!t0TAFk(QaSDEcHo%C{@O`D7Xy&@r?jvUP`x97(7ewTcav(R`d_j5{B76Dq3
z9yhOcsGi=KD0B=Y_V68x^eX7}c>CDW+vsTFxh|tjZ{U%J8l3B;stlI{8TemS$;<lD
zR)K2;eG6Pt!H_Uq0EBeofmcr^jZq`&!0s?CP1f?=jZja0Y#x^HaAWyS6{})iDo9y5
zPp)&|kX#6mS{QUGzc-bUqft|#3&sIwD${C69b%@U#C^3}IK`Zpv$<9Uu6}_Iqjq_*
z_@JO(stBpHHzNq%c9~~)@~_=UC-;bNjUL^ehjY)v*(J=q9;D;5y=Ne3T6xYmE=^?~
zX-vwSBzM*AlI}V-XuO2X$dz<iDUrpc<th?J9~s7#s+5NdY_m~K93>aPDJ2Ux49)S*
z>le!QV0JkkXA}LdTSBJ=q}{COYp;vWUi%u22<=89uf1~B<`M+%o6mH}Yr9T(r;I*Q
zI*m6ZLd(s7NhZ~0ro;W2*&U4Dq_zl=_?oB1=G~6Dth6arrLtHn=d^np^|nQIMybH!
zUsX0?M7Exi*$OI3hNY6-fx>94mB=83TjdVz&6&8v8u_)Ix;^;(e{)j<UmyV_fCP{L
z5<mh-00|%gB!C2v01|j&3E=(z6PsEL3<)3sB!C2v01`j~NB{{S0VIF~kU*0F-v2jI
z;0q*x1dsp{Kmter2_OL^fCP{L5<mh^ECIa#e_~UMfgu4TfCP{L5<mh-00|%gB!C2v
z01{{t!0-QWqQDnO00|%gB!C2v01`j~NB{{S0VIF~o>&6-{{Iu3S_}*cAOR$R1dsp{
zKmter2_OL^fCP|0lYs92{~}brz1e^-kN^@u0!RP}AOR$R1dsp{Kmter2_S(dhJfz=
z|A~nS13>~v00|%gB!C2v01`j~NB{{S0VIF~j0EuW|3)5oganWP5<mh-00|%gB!C2v
z01`j~NZ?5%pnL!S3dDB_{=?4!Jc)_Mn2-PxKmter2_OL^fCP{L5<mh-;2$*s-TnVR
zY7Q7Y5<mh-00|%gB!C2v01`j~NB{{SfhU;&-v2+z*~Qq901`j~NB{{S0VIF~kN^@u
z0!RP}s08r-A4dWbKmter2_OL^fCP{L5<mh-00|(0C!YY`|3CRT#t4xB5<mh-00|%g
zB!C2v01`j~NB{}o{XdQYB!C2v01`j~NB{{S0VIF~kN^@u0#7~x-S7WhgJ`cl`4MA;
zNB{{S0VIF~kN^@u0!RP}AOR$R1pe_6Aou^nmJeGTar+A+-#h&0L$1N#z-IqQ&*ytS
zVEM4)1O2&wP$sVxU$MDnXSp}!s+7vfsbW>kO9d$_=jB3G%+{1#CVf{b6y#i&rsdhC
zcx)xkuf#6R$9Z=bNjE>?Rx)m0DOBaGT;`LDD|~WwexAR+lvs!@t?_g5H9oewvY1GM
z&4qY!<r&`191w}(rc{Q*@`T{^dYalGQ;_m<=ho_W30hk_1+`MKqEwY)!L%_gfs@7Z
zwn@j}GH5Fmu~1om;O0}sVovW(wOCTpdUt#Q@K#mINtLQt*)BkP20ExJd0DSYk<%Vi
zN)|kBw((2xEAgdxayGtfj+n9a@Ry0;63s;-nOI50=I7T~W&E<|*312_jW}mf3K@B;
zazCe3Wl^eCi}YAD%UwmTR+U1wA`0DFm);zG$>xg3xwm2+hf>2*H#;|W9!w20k2IP}
zWqDoM(kI6_kcw4hU4hiYs1Q4kJT;dO<XpO#m&LqXslc3Z^Hq5ZGNv|Wi^WW8yF;T~
zAk$53F;HnAN=&fDSZBe!oKMMRv09eW8<4b)2J^*?T&7XBi%6NgQV`2UaIk&OslhSz
zV!69mx>l(c^P-k86;NZ=&t8kq&hZly&o3_~#hbDD#N`QhtBQwTT!J;A)lg!Ya`t%0
z0#TM>CS^paYCflGB{I`Gw|Aa%tI5QT)%fF@daq}<ZLVOD`<DA1XNcL%nA>?qJkm_i
z!hW<>RY}7Xsg-luT=LOXSsfw82L%|19mkJ4Ow+|$0g`62GH2vUx~!Dc#aTbC%5s)2
z*bSe9<V2u$c@Gw`E@|Fj<%QK;+LV+WnV9W!VjYH9tt`XD+j$5#W!16UJmmF*mSmdH
z`5KmaP}$`oUw?MX=8|W*`itr^UrZ}fPD)eUV#RP&tI#xw5g`zg!``&9)o^r;4a7w9
za{M;$Hni<v)y*#^yK0cYm@95iU3_43ZO?KKojbZ;Di=2uSjxnjk`dR_5y6`d$zrXb
z-0$MvRTc=F-n)pWb2qz+tfB6P)e0PSdtOU!s@Gj-=u*(d*Dg(q#)YAa<Rh&QO{bez
zUF!U1t2Ya!*(gK>!<m#$w_Fh}V$4@%vL=h_lr<M<42QPm!LS~~waZ<Ri0*D`fY)%2
zE=wYGFYRVB>!j7`tgFx_w5KlAY%cL4SHID5$X1IRazT_zC7AbO$RCmdzD(FGX;hG0
z0F#UAE`!t5VCV5j#R(<V1(;?Rsy0^^e3o|dnXMe)cQh!h`vkAt(eLMX?RUG;-T2<r
z0{_=5HrJ~cxrZlq@?T}%SODotAq8Zwl<v4vP*{mwuM>t;bn0g};ZaY?GNBoP)gn^1
zxh`Jh-gvd+YC#?7n3RQ`SBmE7ASb2P6LQ!4Gp1=cFG2t+l8OvhXK>nTZI!o53Y<<`
zuG!S{xGwZ|PxQAzX7MuRU9SdgGH4xv4~7NCw3AY4cO7_i@Bh!ioj$(*{|~y|ft@1(
zB!C2v01`j~NB{{S0VIF~kN^_+`Vhd+|9^eBqE#e-1dsp{Kmter2_OL^fCP{L5<mib
ziGc3?|0MYJJp7l~Oa7rRNB{{S0VIF~kN^@u0!RP}AOR$R1dzbroq+EC|L<-LEg%6T
zfCP{L5<mh-00|%gB!C2v01`j~dy)X&|L@7Ppi@Wy2_OL^fCP{L5<mh-00|%gB!C1S
zD*^oc|6|38#*hFKKmter2_OL^fCP{L5<mh-0150#0{H&_o=gimg#?fQ5<mh-00|%g
zB!C2v01`j~NZ_#&!1w<jD^4_q1dsp{Kmter2_OL^fCP{L5<mh-U{4aj`~N+e7IX>;
zAOR$R1dsp{Kmter2_OL^fCP}hV<mw1|Bn?X8bbm|00|%gB!C2v01`j~NB{{S0VJ>|
z3D}3e-7;)RS_VHc_|(8NHpTiv&%d@Loktvb`_GSjb;LWoKI|NJ?$-6!U#$1qT=6*f
zEf=a%DkrCkRWUCWq^z8m3so^)%)?QpSgI<;LbtXTXP4r!l{mi=yEGr?-Q7gp{DfP{
zxOt^em9ui0PcE+T$<_IJ{`yj4A-1%}&&AjH*y_q+A_+zp;>nd~cy~d{%Wi&CDyQ#C
z<q5yf(^P}Tj9f{V73!lVBY3?Aq3U)CEVOnC+GY8EO)1OZQL0$X>Fugviy5gZx%sNR
zRc$u%v)AIYbNs}_^UI4#@n&p3ae2b67x(asOT3|mPb||gJs#+@RIDfjsi{K@x=0|U
zlq|Tc^}7_m5?_iZXXDGAATzuk{xT6=qWMT96Dx_>{QMfLj9(@`NM({@eJ>;nJNKZ*
zxx0QmuX*Y{HrK_A+#5i#;{eMQv*tqv8eZ7V&;q$f8dvfrVW5tU#^?$f2aaKM8Abs>
z%*a(q$yFM|g8(!e8VxaZSTv3dL!zqW<w{k`m)txIIGG$a(+(Z|eGCfEn}c=E=88tS
zx2C!z%RE!>*iD)qDMw$&xu22OrCJV_JUO3|%VJ3`=aotYCMIOGF&xx|1TqU*P%2_3
zFUkcnl1&y2Xf9ONAGEI|`s{VEE2XQ-Cah4ci%>&#x2uprUL9|SD#M^lmt`1h8Bwa5
zkGfikjK$9FIjK?=E8B&1n~chf3>EzX(^%@eEHa?7yQKxvk*z7YjG==aRxqltJM*6U
z#k$4j%Fc3iNhxIHt(IX=O~KiyP>^$C!x2%AX8eJ4G}uM>Hk&Ak<mLG7wpF~lSvS9!
z?5aXyYdGWf)N8K}xazi9?&0L_LukaLWJF)u7ZIYVh*&Eq_q&92lZCXJOx#$F^IuD3
zoqGG)A|(qXO9c!!PyN)pZLZZISHI9PY>|WmAxi0}Kb=nb%%WS}Ia94>I=f9WqxK2@
z&A-d$x)1)nx}$%MWQw8npyc<-LdRUJ>^cbzr_F8eDg^!H^H?lB_gu5H+?#MRY(K^8
zN3<Dbmbhi+zWEiT-Uyq&>b2ZleYoExMmY;5S-GE6s<J56szrJX*KU=&siIWQh_#Ab
zuE^D@Qpi?B!Mt9!SgikoUOLyW)CX;@jW}0V%u>WwRCdMJypj@A8E+<-3P>$+8pP9G
zN0mWTY`1Kh9fK0V)6|2pmZ%TdTzQBjzjGwa5SbX^aB5xhg#+C}Nqr5Wn3&#OESe$&
zbD?g7HThzPHJORR#bD#kg+wA`{Bl}~teZyy!qRTS=wP&44D6!R5Wr-;-{yKT%GDRT
zWJ5cj2q9n88x0HQzQ1!fj<*}@=5xylWW3&IbFG29@ow%C?*MebFNb`gV9MNCaaYc^
znA*uzRU8J!dfjSsy&B~nj_tzH=E6rVEyc93?u}-mre`^pyKiE?cRj&1^2|c$(#bBP
z(l4^`nqCKc@csYY?roqP5<mh-00|%gB!C2v01`j~NB{{Sfp1&_<oo|$u>7XQ`G?LQ
zcYcdA<viycas094CmkPhlpRUOwBvyNukF8S|55uJ_7(e?kuQyWdgMn&ULSeq$d!?&
zNBW09Km5tzj|^`OuMCe4{n^kD4V8x$hn^n%>frAUer)i&2e$_A47vyYY~Tk6aszV%
zPuad|`+eKTZ6C3{$Ck0p+D`U=vHy4af2{v~{ptSa`VaQ~Y2Qct-raY#Z^-&7>vvdX
ztGD+ny}#c3J-zF_La(Lg*LvRHv)FTl`yBUE+-uwl7vc_B{t6s7{GEQG&%%v)T$_sg
zK;5XCl?psL;_3d0`yJ3eKIO{DIT<!~X&sSJkD1IJRfcRNXLT~_u_|+N4P-{ox};1-
zGXe){>(p&%orxaNykMKsMrU|dE8GHc|AixZr*sN>-<m2nRTb4I)dii3TCF<MP?=l>
zm8tNNrpr3{rsoae@Cp%LJWL~~6w`{7s}?upLNfrhj+aWMoRXHvvj;pCIKK>v!t!Aj
zON%NCrK9qas?4HlQD#APQV!k#<;jJ^B)%3+5?&{@nd_kDnLVV76oTp!r+*O?rmh|`
zM95S+#^+C}N`}aoQpdQa7C`B2?2r}_(=d-`W*)?a^9S{jq|?P(q1qOWTJ4_$h2X`5
z#z-`kmS~vL^Qw|D5>2Tk8nt060ZKE`gStpG4Sh6fZTK39M`sVvNaQ>`5s@wy)|GOe
z4zy-8w1w9<oxci-7p@*)5t*v8s7#cvsLCudQ)L!iyK*oN%Hh}n5}~OkiLza7>N2R!
zME7fvf?QdyR9b>$wZbfj`!DR*$EQ;;gw{~Gq^jtn(y15%V)c_TP?-wvheI_Mojkl`
zVX(@v=Ro+()IJ)4R8rtgil*;y$iwmYMG!eF>|<VQLd@TW*xOYx=BXyed}Lyy7eH)m
zav$+dlOcXFfw5;n;LMb>;n9Y?ZSV+=$IsKQoSH{WNaqm|JEw|i9x*YUM^G~wr5-t%
zM@**S5gZ<mfWWD72lWWH^PBF#>(gPP>~SzxSS#~`w1?Do<^yYI4#3gTAhe%2;~<^0
zM$$9991B3pnJIgtSAAxnnP$chB4-7=);SZ>`ln((RZR1NiD_;Su~7lU#wP8|6(+;H
zAp#LE2t?x})T63Y*{Dic37(J17Rb|qO)8{?hbCTYdv*piFC<2oqo%sdXEW_-Rh#*5
zs?9<%(GE?4c6fG#gk`EqA~exE`3&fdo*iyRYYcD_TF*=l>mnlU`XJt>O6a^M5;{kZ
zdqCpU_;ABB(%f+7%mlQJ&kQwt2cSj=pyKRV5c2qkbWSiay&pvIX;o0?3lr42Lvl7Y
z4uWT<h8iw0sfJfXB={7Fgkyu$GxjEzyd|e=<SL@+B5UBAEzvWec0NAHd^J;KPPePN
zRaNG_nJNpTP1QdJs=<qcBpx$85?Gs(n+K)wsR4b2t${r~3NjvHz!(mZGDh+AX;seX
zJCSQ~`4q^VnH<nLN`!R&9X|;Yr^ap6E4EaS*JQ0YeFECXJT~SHYh|90_Ty?h^MbWA
z58&wNF=#(=#zuN)jihII={^cA<5T^#*9x53^hsvNPrE?IBlNT0byCcOhTIWVj(MSz
zW1g@Y{xHa$nd~Rt=!A$z>~QiBNKA$MScc%y;X;)>wW-Szt>a1M%s~(q&i66*;DSRh
z&Rk@*s=@(Pf%(~@z<kv!c=m(BWU!Ao+#*e!){CCp2cn~At<-b!5K7Z!a=<&G^~|J|
zx!P!FK2iyXD#3hfNHC|!;c+`ioEo<hXBy4K3-bE(2(*oPdTH<3a<QgeDbpkOFtm?P
z^|Jn(63hWrW=NG`9yDc`3-tKpAjpiK?Ik`m1&9;$U}6ATC;dIt3+*AxCJC+T85>B>
zgnO7jS_6?~PHC0T^sCa$Gp&J0GxxO0r~5$KBlHj-wOS%d9Mx)`vi4a9&kEF8I0?c?
zD{B`dP{GrhiC&PJ3^GUca?DLlvWH4CC-sud#ipd21Ih6j;-FrPxYv{+_y7D*&f@%S
z=l43Z&XDtv<1ZYaaD2pZ-|?)&X8(`&kJ{gDU$j3p^5v0FjC^1uHF9C(!0=~>KR*0D
z!=>T)@ads14*kl|KLrE$hXjxS5<mh-00|%gB!C232zXv0*X_YkdMQjkCkdZWgA38-
zb^DT9#m^VBQ!kTC@#rYK9ySWID`LI)OR6}#C^m|-%VM4Q*=-Q__(#c=u~C*>8|wte
zw?Oc$aGH87)iR2~-x#SN-g+K@*ktfD^Hwj&eAPrZRZ-@tUX=OS6g^V|(eatn#7n&#
z@v$j1UZozMq8`fSa<Qx@8YdOh!wT*86!TCo$UM|U%c>~zP%p|nY>J+_Pdz+EJk-k(
z51T?$B@mj4o}?a<o5;q;CYpICm2hXSewacig1G;}N#<#*0`u0WQczWx$E_;NYlF&U
z9#p2nCyD2+^2B?CuqOw?lfe@-0=C<ur`*^8g1V^<5S@vhVBQ;rneTe>d#X6|+$hfc
z)`_20K-}X$LA*A~5}$Q~Gj~ByIDcI4vHIzfCiI51TJ6t*Lh#~oqu-iJi|b5jT~#uA
zuPL<zpf*g&pfnRbu8Tp_(1)Scx-%d?K6OkVNox#Gr$NRe95Xskq>OGqol@nD{t~$s
zPbH8$GkHwsA`#L#H}g)A5Y8W^UeR}v8^gEh8?9}QYQG2y!HY+ki)|{*(H5m|Qk9s$
zZA#2*qteuipfnRbN}O-gAR!pV$^E}&U&}&`he!YkAOR$R1dsp{Kmter2_OL^fCP}h
z6GZ^;|DULIVlYSm2_OL^fCP{L5<mh-00|%gB!C1=3E=&|DHg0m0!RP}AOR$R1dsp{
zKmter2_OL^@I(>7@Be?I(uu(!0VIF~kN^@u0!RP}AOR$R1dsp{FeQNZ|E5^55(yvy
zB!C2v01`j~NB{{S0VIF~kiZi~0Pp{wsB~g5NB{{S0VIF~kN^@u0!RP}AOR$R1WXCw
z{l6&|tV9Ax00|%gB!C2v01`j~NB{{S0VME55y1QZCn}v73=%*BNB{{S0VIF~kN^@u
z0!RP}AOTYXc>iyT1uKyN5<mh-00|%gB!C2v01`j~NB{{uQ3S~E|8dTru)x3ghXjxS
z5<mh-00|%gB!C2v01`j~NB{}!9RhQl!!mGU5dH=R_s3#`8F^i*<*F~g%jfk4r@VnF
zUxXL@=K|hy-q5t*^?L=sc}u`6gvtB=ob!KL;9vYh0!RP}AOR$R1dsp{Kmter2_OL^
zfCQdE0=>P1gZANdi_P){i_`B=2EKpbX5a7jzG?Y_;};zh_HP;ay^-MXhr0$|f2QuV
zxn4Za)fbdPM&8O5vstB(6)W47s+<?4T1Kftomi{LWl_n9QYh+QhkrWA-J4yC$5!He
zB6&G}n|F7RYP06%7n2>O-TZ``b?^4Paj@>Nxh`Jh-W#k+shr%>Ls`CGlPkpIjtvTP
zaV2(XKHk=;W`K07WZb+`sLENn%qJID_~h#RJb!&Du@GBY<LBaQd~9`PF_8p|3-RR2
zGrYU1<e_^hUvl#qsVbAhrXn=w<?7uc*xZ!L>AO;SLhyR@%_XUNS8MbIgN9bHTdh^Z
zbTK2hdj-ZbwX#%IiUl`cmZhBDu2K@EOr|VXDsG<k>yLtEhy}DLSt%<Qs&2k2Z&e%h
zz_Gk7mZY+j2Q9UwL16Y;e0GkXn0S79F)7}R%_lBTxDE0iesPI6R`H2tYTDz0P8nq}
zRm^Pf#<)RVHEyVCF<vPZ3l&+cC@-0lYK$f=w<NDi@hkDAcyczr%)6yp^)4NyY!rC-
z%cOOQj+sO<v66_*&#$q{_+`)QiMrk9I)9$~7LVDml*{E}xqVPJs_%9kk`1Y^$AHYq
zn{rMYaxLSL%psWe1t||4wJ~cPv@qZ+Fn(In2uYT=(sGFmNU^$I(ivzS*VVF=mQzxC
zquoR!$z~Hn9lqU$HjH_N^e^Q^n2b`3dERUkx2mXPt+m!L+`bNj>DBrO9Zc^%Y&Mu0
zYjVp9*Qm~R9ZU_Wug74L((3Zl7%4vEK<Sn$Sbmi1cFRB!yhZ~|h%CyDE;@)9M{MhW
z%gB{<S)oI-WlX@Rh4rzJm3Ot|HAK}x(l{~<j<%7r^FrFH@((fu=jy}#E-}hk=tV*0
zeom>%a4}FV(qouTmAk2;RL;;fvLaWjaLrH=1@n6Ojkni_Y_4dOd!LIAXmha+wZ`FW
zF7!yFSuT(Z2#BS;A?E2xHB~Gc&YN0iIcd9CgEM4f+_emCIWH+Wu~4ik>q?rQgkb=+
zSyL+MA|TsAj5cqJuxzG^Rk3l>r=zmnrX~#6XPdBA--8Tw6H6EKd8t71M%V0CA2oaQ
ztkZ6(RF>D}vRp{-Zi?u|)q$+9F-(;-T(wkXxWWX?X4g)&5~=Odu3n+GUmEeN$;6G-
z_}}ULZn5<C+FToPuCCA-KvDx7fngq2CAcP|REz5A4lbHVC0s41GW7%XBQ{qYuCImG
z>uZsod_`Y6ola#yy7k(-ao)erW<dKjb(;m#>*$6ZGD+0)y{A4}KWuX)z^kimUa?D9
zF&qd)GT|<Ml{)*?ZevH!bXU%o<IA%ixG_1@<;J8Dly)l-m4j*7?`t_LHsp#Ooh7$9
z4XHM3JG$LC`+Mpq>jzb&u{Naa#3g2Y=}g9Fg0yi~E_C!#Y`0<RTf-7bHdCQjU!MBm
z`T?8kDx^Hv=AU}v7S{uQug~Afz512<;3G`|Zzh-uNZn>k+8A~>QF2GpoLs79l|wfr
z0;8$t_S6&g0h=oilQ~aObW?3iZJ;8C!>M)27Y=ljPkjxcG}dCB>D|SmDY`x6`G3p4
zuJ`!Zhy;)T5<mh-00|%gB!C2v01`j~NB{|ZgA>5}|8MXFqWeey2_OL^fCP{L5<mh-
z00|%gB!C2VL7)$0tj@n6lJ9nY#rY-Y-#Gtb==%phJ$P&&Vf(iJpYQuz-yv(LSL}Ho
z_s=XJCt`c+ufBTFVTm0K_Si-r+V=178Pt8%f!BY|2j7Dbnhr)I;h=CezB1E%ByR?u
z!l=x^!;&+WPhPzKA`MFLg{QsnkFZdDNy+7;nc%dSpST4Nc@!U1_~Z&NK<jxPDnfzt
z{8lL7;bWyzPQE3l=9KD8&>x=mhxm!PYby)zXnaoDkol`}dZXy!XYZDad3i?ggGKTW
zzbvgwWu>7K&t$c>m*4gByH<pH@c@ZS=@OTBIuiB!f>C2!<cYt^3@MfLjFQjJu&;-h
zk~ZNX=JIr@kmbJP;<tVBJtXA46Y+_^tuO5-5zlmw*c*<9d}a|t8o%`yp4(eNo%*Tz
z%03d5zjIJ9Xnc`~FWNFZ)#ouQWOTmsog}I~l&j62`a7H?tcxtH-u7AN_fLntLBBs_
z%oUw=MR?M5Q;{FcaR2S%4?KH&Zv|)l(Eq3}IY@L<oul(br=w9JEJRGAgP^`^;`-hS
zs^?GMQ(v<06jWe367hz;e)FJy{I@@`_kvm&Awiw#k||+2AcUjdmNf&W)dydFZg0h7
zdFu=H$S{e=*)u@TW&`c>$|p?wBZ4pLB}w9@_s#-dUl{6|3ivi6-*m+5jf7ez4a}F1
zPLoXRp%sq%?+5CU!LF&G@q~Smpg*wpQZdji6+-x&H#+U}`NN@>YX?Zhhkk+IgQ>7}
zONAPb0GUv)@%GlN=<k|};JILA+Upa%(Ut`YQt|%VAK8Pc=<Avah$lQ9jYI@t4=zyF
z&Z+R7^ZCws{pty@eS!KXfBvI;FBJ>DyND;~^Mz?Dv^yUdTL0$vNA_Mkk)F;&tC62@
zAQB1gy`dF>ujK1=+HSh;4@La+D*qp9fr6C3>lzfVgrInN9E!1n`1^l=;s0;%N`T`y
zt}B2gu=g}?@a7T}MSvm)b045c5F#NGA_0ORC{nUzV1ZqL8-iG90Ya1*$J{uw<3pE2
zIdKvzvMpP2%67$<l9ZM56({mlQOZ)qv0awSc2bGsLuJY3l$1F6e;Nz!&dw|VsZt(O
zA5{I(^xx_E@BROKdU|HM>5mv728aP-fEXYKhyh}N7$63S0b+m{xW*Zv`~Pd)!32*O
zAO?s5Vt^PR28aP-fEXYKhyh}N7yt(7{-45t7$63S0b+m{AO?s5Vt^PR28aP-fEc*;
z8KC?BYv0F&kQg8ahyh}N7$63S0b+m{AO?s5Vt^Q+`+tf7Vt^PR28aP-fEXYKhyh}N
z7$63S0b=0VXMpbiuYDgALSldzAO?s5Vt^PR28aP-fEXYKhyh}N?*AzUhyh}N7$63S
z0b+m{AO?s5Vt^PR28e-cp8>l6zxI7h2#En=fEXYKhyh}N7$63S0b+m{AO?s5y8ovb
zAO?s5Vt^PR28aP-fEXYKhyh}N7$63&eFl;MamBJ7b*x|bsIVe=G4ahrYy95W&tk`;
zABnse=?y;-UfEPw_LuMz`XdI2f!87f#c*+JxcTVL`eIvdGLyZSNl%|0$)^jMp^^N|
zQ2wsTY+)#u8M3k&OSNR9LLECe(A_oIo$Bd3)O{w^QlYCpv?X=C&-J60RBKD=6fJFU
z-e24jZr-`G{w;fF(jybuiux*c?wLFBVAoB@x;^U5Wm;0X$(ihUwvg&OKA7q|b?jKG
zf1szgYv8uj(eB$)U8e?*_w+$6z1@9-yHhQb>GRo^)NHyidNy5Xl_jZd{y5NPveTo5
z+|*1iKiQI+$zGf(SI*?mWue&b*z|0ACS7pr!5*l0s*oMaT`bpCoOZO3P0wUAL+P28
zR0jTUCU-tte&!2PSn98zXSSM)f$p2T2fF(XcAreOq%X{z9l9``1tVKqfVsBRA=C~y
z-1hYK4EA&#J9gV#VfP`hJ2yR)9-Ya}0%arl{KULXZN*K+&Ee*r&idj$CzvMk<Kwx>
z@uBIvr=2rkBxO}SJ!-)JT`beiWX}&3vUgs{PR~H;-IZ}w_B)SScvzMFrm`*sh2Y?X
zEp5eAaTB+%yUM=lne@zs>7gMbV~wb_?Yro2Uv({uuy5|5(R?NgHm)je3^yMH4&^Ev
zr_$gmD>J5#Sv3i~%ilm(6^pPAj{vi_7dLR~j#in4fe9Ffv=J?ntxesmzh%|6EW)_C
zgU(O2K!Bb+*jChv>%+}yVDFUM%*wd98cDX5$*RhTZv<WNHF<#=7h(R@$lO|72lVc(
zFCKQ=J(RsTnuW$^C}XJVi0t9`Y@v`Zfc-PRmU`6TX<ex%%$m8=<|l_{?w-QH+*EAl
zCU#Ysh~z<z4W%<$M$&4SSnxNox{d`+oIAv6z1xZ_i)+Kp-9TY=;!I>`vlBzg=;-K3
zriOKQ*09c1!@{=V0l?bU;u=54mLlHNG%I7)uxrZSuIf4#w5%#;b{AKNo9_VPdfkr2
z2rtFNe8!~htUd}UgY3_>?&ZJB`x;yRtE$=-H2Z3<Y$~qu3&iZ?Om61xp`na2n#m|0
zl%_9aa(IoI^tE!Rx(-j<N;NsT!cRMwC~Jx<!_9|*Pu<O@bKQiD8q-usQEQlY-rqdD
z^j1`{pmqERh{biq6`VM`%CI?hhei}tQ@pM&CAbs*mQ~lWplMf~y0y4`p*$JMYSw7F
z25aa1Z7b!;)jAfm%_C1(jXWt4bTzUKTOEUct~@FI?zeo6#XKqfs;agH&7P-}p8vlV
zZ|Dd!F+dCu1H=F^KnxHA!~iis3=jjvz-x^Gy#GHf^wqKdX1`=VXFp;8&VInY%l?Hu
z!~T(dg?)*Aj(vtb!9LDD!X9VuXYXZy#QuQY&)&v<kG+ZA!!EEXc8-m)G<!We%?4O6
zJHigK{mf<>YiGOI4whmY*;=-OC0Lj>2>&Dem+*q{Q{g{^9}3S2-x8h`o)*3;{Jrpb
z;Ys1IgipXb2!AeoKzKxWk8nkJKzO@wuW(toB+LqT3KPP(Fe2O`oDoifx%5X25Cg;j
zF+dCu1H=F^KnxHA!~ikyYh_?rC|Z9S#jPk#p%_GQ62$<D6Dayo97oZIq8G(66h~3q
zf}#h-5fq0}+>D|d#UT_2QQU;03&jBxohbIB*oWdq6njy0ps-O`C`=Rv3LS-pLPepV
zkWok|+EIuo_Mq5};szAEP_&_FMX?jb^(c0rxDLg36fG#Wp-7?Fied|j%_ugZ*oa~S
ziuEYgp=d_27R4GAt5K{%u@c1!6w6UC6atDQiUf){iWrJ0iU^7@iY63|D3+lJp=bz&
zqEYAmzwu&S<Hg25Y<!~e*~S-}Ry8S2Cz__39%%Yl)7P7R9FB)~g?qwh!*30LDEy`H
z4<n&SOQb6@9C=gZk;vahz7u&lx*=*u&qVKvzB~Hq=rhq5Vk={EtUs2I-5>jC>}#?A
zjK|__@gwo^_*>#1jQ?Hy2Z@Hnw#0$NP~vwI?@c_J_;%u@<ocwQJe{0PKAiki@*ByY
z3o8UkI4(>I_X!_?@qr()C~IYhVVvP!_89vj`~I&r$m!(705L!eyebB^gu3b#NzwO6
z@SmEJ%nnKGPz}-6RLz!8`>8F{Qf%v1Z?!5ax^AlSDNnVch^AyKhBD}<HY|AGP(A5Z
z8y&jcA#0*->#C*=_^LJAw9ONKYDG~r%kKA9tD-GgwrL#qRx6@m=!R|fd8;MSvf+(H
zsn<_!8m6kN$2`<lhi-|ArmC`X)K@JTmTlZpt(Mge$rKIE(j~LUTWyG%Whjz*#8<7$
zvLqkAs@C=>Rtjp?WHimxBu%z%_EQ_CBI$Owx7q}c8K!I;@>Uz7tf_GBgMMmBH!MZI
z$y=?7vTkd-)#a^LMOjrOLqFiD)=UURNmuPoKeeI2dy(3HZ?z#BmSO42K2No3i@FTo
zA=x*2t1VHIY+Et+daHpo)zl5O!%q!?Y^a9qt=2`T8BDjl)tad4x-ChjpIWhG8$#V%
zt%`6kkgj{HA-`1<!cFs5%c3Rgnrf(iYB<^guX(B!U9=z+4N3M>n}(%omgJ$9FiT`v
z)h(&rTMeP8O17nl)oRs-)<-lT!whYYpIV1B(T&~SY6EDo4OP3rPi;WEXW6^F)w&3c
zw4_LF-fCzSWkr_sRzI}@mZ{oKZ?z)Av6^OH@28eENmk_@-fCIYWcX)a=dG4R!-QB-
zwtK2I3$jGBOr^z7ttrs-NZUNsstz7AZOu;ks(}_u+UinEMu#MKC@Q2sG<(JtKeeGk
ztl67A)v_&WCKzXK@>T1GBxxJnYP~~|p;?7yPtk0BgP&S5Ae5!`o@!MVRS0uKTj#6R
z!KG?*wOY~vx~NN*ZfR>h)EYMTkbb(NtZ}PVpsYiKX3wxRMOp2q)@{qw<yGElyhuXr
z_DWy1WZH(Z!c(o9qGCbMLtgH!Mu+OEYA{c=V#Ae4Hf2ljR%@bVNv5PGz10}!rY$K6
zKQ(-Fs@PK8Lk&%jB3hCJmy4L6+Egsa&}g+<hCZ1sDvAmXdc;pH!@;^7_E78SPzj>J
zR+_xkaH+8@$b&|=TIo=f4oT&-Sj&9X5G$q>@>9dL0D2}3n?qeu-qUot7E-BlQ-u~=
zcJBYf9d+zw_6vC8|2OOd>^|Z4<o_fejeH^UC*k+8e`U|I&$180Q~x&#7ld1qKS@3q
zyEpoa$R{H22tO1qva{@@Ff8cFZzeA#ew7Hv{vrCk$ZU8*_)KCTb~5rS;oiii*yhMn
zOi!+geJA>0<oZZN2qiz1>`8nr{%q{w=*J?5!X5F)VvTHbQcip-_EPj>v^o5I{K?n^
z3nw0l-yiRej)cD@Jd-#Ve_ecKv_1TI<bAKI>rDp}1H=F^KnxHAuYv(NG+y66KjTC@
z%!D!BjvwjgM%#1e$J;a6vGj$BnLT`N2XSh0{PgP3o~k2mWufimg{NHmgN-3p-+odF
z<;s7B=UL!v18YL<)rXvD4yhHT*}`nLFx}q2In-HR?x4woYBra>tNnOQZQqia==Eaa
zm<#z)2l*|_Lp$o*$I`R8(fp(cqQ~{KBhJqb>!Ey={pn1mwnuJW7t%eC>h_`O(9->I
z(9;h$`JAAuCesI&%yg$0)B9Z%?sFM4RmhL!CbI1}z9Lfh`jOh<QcP!OX5iEC>2}*?
zkF{i&rWZ`3CYQPkG)({DWP-MI7ptBwR+e6o>{*fIvb5x$c0WGFCG)q(i@)8k$o)6C
zta4fs%*0(w=cCP&k5(5SCC}|#GVJTUVDG3IHrM%_eEX75-r{xgZLU;EIj!5)C0D-1
ztMbjR$~QTcZ(MTa8@wuC@2Y&AQ+c!3PuIGBy5<!H+G@W*Teb8+Tj?2SD|~#tyk>+j
zFUW#dVbaAz!l5kgDvdd%QCDfiDGj?yo1D@{SLrg>e#rS%!?F;IwmbL#$w%whN7+N{
z?d-SNB)bjX<KM>&wvBCoxAq%_UkT5{`}*G&zAk)L_-o<g@P7Wo!u`Tqg}a4<a1P$c
zzZIU;cL^PWD(n!p2+`z=Fh=kkj0gNv@+-+tCqI^aoV~<efNu((W?x{RV#DkZYZaC!
zUrs*B-VEOl9EI-$RtdipzAroj-vRuE@Tc&`e?~YW>=v4ZhUC8`znFZK{TN0e{+WFl
zzC`#C`!o0gVf<Be+vreYfEXYKhyh}N7$63S0b+m{AO-@;KvSrpzW&N-+|)gFE8m>r
zn?Xk>o^&=>26*8KzUk+i<9ySHoBAugeD4_F9CZrCTez-=7ark-hk4=6ys(>Z4)MZ+
zeD5Z{>EfFMT-V9>_Vdj?zPXX>_VT?BzOnhn;yRP>8GNJjjmC8<-&6RW%=aX|Y3Cb}
z>-O-y-F)u`zPF3-weh`HzS+qOujhL^_~tsk+0Jz>d~X}yq?|%=E7xt|g`4?i6W49z
zx(&Q=J>RV3x@Kqd;#yv~#@V~Fn(wXRdn@_g3cgwH6u!v#M&O$y*Cm`iG0qEPd@suP
zB785*_nP=#Bi~!bHz8iw&=_if?;Gg*|9~bwnMDi`1H=F^KnxHA!~iis3=jjvK%g1G
z&&uih|KFtV|8f1ly5)fmDl(23AO?s5Vt^PR28aP-fEXYKhyh}N7$62-B?EZ>zq0PT
zbu2FIO^zi#5dTK(e`7-QXyj7(@unvlUv9i%+3C<&!vpo7fFJ$F{S{B_5bC;C?P&;a
z{oU}26%FMRA;26<IJt}h^MT+bD~G!W-CuLoJ=NJi>0p)>Q<UJJ+?&5AH!+cJhiPF_
zt*2pu%=}%`slLIK4BEXZC@{3Wsf&izmg<_Cn#i8cjvUR+wCgZ`hH9i*j~*H9g*Ck=
za_6$C!`abu`L@)-vxWTmY&*=3<D5WBolK9V3%SxE-I?*Lx=U}o^hRra@%HNwQ)dlK
zrI}$oFwK9{3E<AYJ7D0(&ld-`BRI7NxYE2fmEcMrfdQ=HI|2r4wxKxLg0RN@Va?CS
zQweL~uZruhbUw7*8NdrpkhW|rp4hfP;sIbj!;lAHOuTf!oCt~6n?g+6=bRX-ZcOH<
zMXJPvF*y`4ICby%S<%{xcvwTkX&fWoc$|5h5Kp}roB%6MZt=}0*Bn!ou2@t)4WGY^
z-U<#}%%{!1`7{rh&zj`{81pF?umHq-+T@#09Mk+%UzL~u&Y8yo1_$%$z($@=yt7e}
zPgn6cbCdCW>g*3%t5BTW;Gb8O^QTq1WKnrFHFX)i7OcEl@1IvCz<fqH55N$J_k1{D
zfrxpv&OfglO!L#&Rbm1-5B^9BmW!OcYWB~oc|6X%d!@X3L%^I;99UZ(W))oroEWfd
zZoo>HIC)k7V&|2IF9*vn4bNRJ_O7WFXE2}f{EUW`pdikM#{%XdjI+XO#FO{xq)U}k
zFjnGmoV4I%Gtg0=x<6oEY}twT|10V@)G;Pl$<f4}@%O|Yi#{EBE)ot)O|NUrExQtW
zf5TVne+oZ&jr|o*809(Z9y@^fnN<yD#l-n~J;DKEygz8I5RM(_h{<p405O#&8TP<b
zK6WrX5wK9ku>%dk`HdYQxY88KmEg+94l+)Z2d9eyV+VN^VdcD<B|c9$T+aE_&MsIB
zPZ9=g(&U!|hIr#k#Q_Box7S3>XRG!?45>FYdH_)c$BmnxDCXq_+&DkSwil?HGt1$n
zWh7vT(T&mqZUn@9+Hfz#*h{$MGI%jqZX9e!P`-^!*<|OHph~lL0j%k*0rS<+rs63P
zVd;J;2e3+$v{%BKpTrGtJ)%4sEO!;|C{FG{Tr~z>=VzC%#I>j!+KHzTZ-C+x2a0wh
z;95^SV0{E<zI+eB;KZ)sfMJ4OOW_8@<k>Nwdx}$<<lh6+Vmjt$9}F1imYu~@yJ}@5
zKDu%ygomXId_aRU&jf9BVo)yT+YpyucLs5l)?BE>wTL-S;W{|+`G9#6uY;|K*snW-
zh)c^zcp(Ni-goIyL=~v+%-~K0<#!$Ap!nh!E>LsxYyzy|@yo%2g%9ekM_9G47o|lz
zDq$_^dU5t$0R!B!kw5=`C*J>eCdU&G#Q!+<#pnystr0PNqUoN-4=(#;=sTfALv#J>
z>)wgZ`v3eZ_8vj<-4EFK0$D}}H1*I4;p-_?k`J-;u1o!BT5wXtdBAoU@wgwbx$y7>
zpn~>*t#C7%?sv&8U!1Da6^kAV8%|#imc!tZ+uMzx^|=S49wR<5pvjlq@&R4<RB!?i
zF13S)5RYFQjZQ4B5mt$(d_ZJ0U~a+zk%I`!uLps!N^6_BU@dAu<m`PImjP-?um^Dy
zBKGS+aKwDMHZR1`JZ9b;Fi<ccGT60Hbe0yGbAh_rgUGz&a<F^_(Rup;gjHjRRWB`$
zR|(5$Im?Gw&wMaoK7%3F$xa04*FAzjoL}0{1KdJmSi!psgWKu-2-xp-ngiyG6?y=M
z#OvpC6$j_CfX|2bAtrY>t8C#(Tx!f&VX+buz&Z0sz+w`+S%Wtso*I|A`6VGM@sth8
z1#YAfhU5x+5mt>Zm|9xOvJ%$fyI?_kK!u|o9SGWY91@=4losgp0gX9#XTX9Kx?-p7
zg>mtfMJsWYkFO4oT}EKRX-i;ywbw#iHQEw*Cz3CTT8Rt$Bo7D7P1u%9nuw>y1r8qi
z@-<v5@hs~8|J)A)hM3>~v(RuIlZ5lh_a?p^|7Psv*p}$wNFjW==}V2jXxy>v1gPnc
z7$62-0RzR!(_RgV*P`#Qph21V<YlxeI9CLG0Cg(@cK4Vo0rO?-JpjXHVfISEFkz4R
zl-E_R9Fr<4x^B8ZBLX<XK^s89t6cBk0(ca7QwA2UHIzyp0iK7RPX#OFoPpMph{t=N
z6;|=pU_D*9qmdL<MLdD}k|95Urn?8TN@K*j-66xnAsbdG)+$}GxW{2<9|>48;b7JY
zMC=~Sav|1i(>A>jLkPa@ecuaK2;yK?KZ0`KgI0oq{=MdYT3bHU8njpHa4_pQ!g3F0
zmBUg+8y-QMMy0Q+2D65PHVy)VS-1Bs1P)paLpR)kSOxCvdjghaI8xV(;M_Md<(|V8
z;T2VrJUqA1NL}XMfC0vS$1w!#-S03uupyP;Z8KBVooj$=;Z|r>?)zN8S{3Yf97Rm-
zyX$!;TKI;&qN%D}eVu;z4bKOwk;Lotfm;v{n|sTw^o5iQk7QW3)11_c!TSuf*xQ2;
kcDP=YD?z|#)TU@?mM%G0ud;<};pLRK{C>dFCVB4v09`%dT>t<8

delta 983
zcmYjPUrd`-6u<YoxBc3${qAX@rLNU<Kv0lD*&mt693^vZadxtVDMktOpGcgFNNY&U
z?ACxLyp(+pH`!BLbp~ygjql;>T8e$}NtxNhG?`JN4=x)L-4bVFNWfb#(d3?+-#NLz
zbI<vmldAetDObklJdF?<5OzWs7ItBN&wl@D)R~+!36H|MxY6^l0e``LShroXekVV;
zdUhE2&!^0aJv=dSW;`AfPkKkR`%q6>%&nU2IH8~F`rf3sHr%p40vC}21i@Xn31vva
z928&}`hh?rTh*PZDpQ)>BxHFj{@%z4zgna|)59*(XQ@FK|1wKVT4P|mX;8J2MoTy`
z_4>%z<lBh}@nxNL+fBS1pA=rbRtP+X-P+ASdwYu_0&eC*Ok)Z7ot0SuzJVX0!oFs|
zKo+JU3eSKKI@yMPxT|Q_CmcOk_Z|KfGgUALr3M5)!XkX6v0z>gJ6^*^!+F!1D%bK3
zS~fL#U_rEa(xPt;Ne36N*c`eo`*(m0GF6jrEa=YBVO3XG|2)?&-UD7iQW_4hakbz6
zhV3g`m$G3!Y4yno(`O`08t@8!5=~ie&-Z(cXGif3iJp`9$%Z$IU!gSJ9FUFaF+4X!
z+|0}6DsC6q@2H0NTYP(OKI7Oqiy7)LXi$1|H$_Xfn9(^ZJ%RaZfz<QzW%ApH;fQ2}
zBP9E@$}j@bhTwgWNE>Ha@{k$(SwHILd$QyuzEGhq{G9fV>gHcu6Z(Hpp)K6LOna2`
zd!w?aw-=|Ud1Hxsc`QeE;p6;ljuiOTi)P?GdE(?tF%10WJYh9tx3#6~BC_Ym5j@jg
zWA)-=H9|8_m1u~s<p}VfO4MoK%VY~1t)G%x7An>d^XjN{NJ$@x$)3JGJS*3@yS8_M
zzqu?>r9v%yCP#cbvCI;s{9cv}(CB1*im&C#CRTKu+VTr^7BjW!q#pP$IcR2nz-Brw
zW^zm{-XGvcs`)9T(2N98R;3wR%zRz>#Cp%-S65ZPbVW@5g5*jMCuL74gl9XZ!jUua
z|Ly4x>@U&BP5(uW*%FOlBbXzfV=5Ps#@EX<gkRv-i?pexr&`y&zdL+jU+iGhZgbKs
zszHdqTA_FCGaUksZOhfMEf-%Y?lkI9(nJ4N(QJ51^e8coF4HnLl0}-s#+{Ez5MQd&
F;6E~GEi?cC

diff --git a/docker-compose.yml b/docker-compose.yml
index 93c4375..25dd329 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -1,44 +1,81 @@
 version: '3.8'
 
+# Social Cube Docker Compose Configuration
+# This file defines all the services needed to run the Social Cube application
+
 services:
+  # Main Django web application service
   web:
     build: .
     restart: always
     volumes:
-      - static_volume:/app/staticfiles
-      - media_volume:/app/media
-      - logs_volume:/app/logs
+      - static_volume:/app/staticfiles  # For static files
+      - media_volume:/app/media  # For user uploaded files
+      - logs_volume:/app/logs  # For application logs
     env_file:
-      - .env
+      - .env  # Load environment variables from .env file
+    environment:
+      - DJANGO_AUTO_MIGRATE=true  # Automatically run migrations on startup
+      - DJANGO_COLLECTSTATIC=true  # Automatically collect static files on startup
+      - REDIS_HOST=redis  # Point to the Redis service
+      - REDIS_PORT=6379
     depends_on:
-      - db
+      - db  # Ensures database is started before web service
+      - redis  # Ensures Redis is started before web service
     networks:
       - app_network
+    healthcheck:
+      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
+      interval: 30s
+      timeout: 10s
+      retries: 3
+      start_period: 40s
     command: >
-      bash -c "python manage.py migrate &&
-              gunicorn --bind 0.0.0.0:8000 --workers 3 config.wsgi:application"
+      /usr/local/bin/wait-for db 5432 gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 config.wsgi:application
 
+  # PostgreSQL database service
   db:
     image: postgres:14-alpine
     restart: always
     volumes:
-      - postgres_data:/var/lib/postgresql/data/
+      - postgres_data:/var/lib/postgresql/data/  # Persistent database storage
+      - ./backups:/backups  # Volume for database backups
     env_file:
       - .env
     environment:
       - POSTGRES_PASSWORD=${DB_PASSWORD}
       - POSTGRES_USER=${DB_USER}
       - POSTGRES_DB=${DB_NAME}
+    healthcheck:
+      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
+      interval: 10s
+      timeout: 5s
+      retries: 5
     networks:
       - app_network
 
+  # Redis for caching and WebSocket channels
+  redis:
+    image: redis:alpine
+    restart: always
+    volumes:
+      - redis_data:/data  # Persistent Redis storage
+    networks:
+      - app_network
+    healthcheck:
+      test: ["CMD", "redis-cli", "ping"]
+      interval: 10s
+      timeout: 5s
+      retries: 5
+
+  # Nginx web server for handling HTTP requests and static files
   nginx:
     image: nginx:alpine
     restart: always
     volumes:
-      - static_volume:/app/staticfiles
-      - media_volume:/app/media
-      - ./nginx:/etc/nginx/conf.d
+      - static_volume:/app/staticfiles  # Access to static files
+      - media_volume:/app/media  # Access to media files
+      - ./nginx:/etc/nginx/conf.d  # Nginx configuration files
     ports:
       - "80:80"
       - "443:443"
@@ -46,12 +83,44 @@ services:
       - web
     networks:
       - app_network
+    healthcheck:
+      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
+      interval: 20s
+      timeout: 10s
+      retries: 3
+
+  # ASGI service for WebSocket support
+  asgi:
+    build: .
+    restart: always
+    volumes:
+      - static_volume:/app/staticfiles
+      - media_volume:/app/media
+      - logs_volume:/app/logs
+    env_file:
+      - .env
+    environment:
+      - DJANGO_AUTO_MIGRATE=false  # Don't run migrations in ASGI service
+      - DJANGO_COLLECTSTATIC=false  # Don't collect static files in ASGI service
+      - REDIS_HOST=redis
+      - REDIS_PORT=6379
+    depends_on:
+      - db
+      - redis
+      - web
+    networks:
+      - app_network
+    command: >
+      /usr/local/bin/wait-for web 8000 daphne -b 0.0.0.0 -p 8001 realtime.asgi:application
 
+# Network configuration
 networks:
   app_network:
 
+# Volume configuration for persistent data
 volumes:
-  postgres_data:
-  static_volume:
-  media_volume:
-  logs_volume:
\ No newline at end of file
+  postgres_data:  # Database files
+  static_volume:  # Static files (CSS, JS, etc.)
+  media_volume:   # User uploaded files
+  logs_volume:    # Application logs
+  redis_data:     # Redis data
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
index 1c43073..a0c68a1 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -12,4 +12,9 @@ crispy-bootstrap5>=2023.10
 gunicorn>=21.2.0
 cryptography>=42.0.7
 django-allauth>=0.65.0
-requests>=2.32.0
\ No newline at end of file
+requests>=2.32.0
+channels>=4.0.0
+channels-redis>=4.1.0
+redis>=5.0.0
+daphne>=4.0.0
+msgpack>=1.0.7
\ No newline at end of file
diff --git a/social_cube/urls.py b/social_cube/urls.py
index bdc865e..f778c13 100644
--- a/social_cube/urls.py
+++ b/social_cube/urls.py
@@ -24,6 +24,9 @@ path('bots/', include(('bot_management.urls', 'bot_management'), namespace='bot_
     
 # API endpoints
 path('api/', include(('api.urls', 'api'), namespace='api')),
+
+# Logging system
+path('logs/', include(('logging_system.urls', 'logging_system'), namespace='logging_system')),
     
     # Authentication
     path('accounts/', include('allauth.urls')),  # Django-allauth URLs
-- 
2.49.0.windows.1

